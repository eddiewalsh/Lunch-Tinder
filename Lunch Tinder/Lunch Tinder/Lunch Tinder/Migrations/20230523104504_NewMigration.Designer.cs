// <auto-generated />
using System;
using Lunch_Tinder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lunch_Tinder.Migrations
{
    [DbContext(typeof(LunchTinderContext))]
    [Migration("20230523104504_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lunch_Tinder.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Lunch_Tinder.Models.LunchGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventsEventId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.HasIndex("EventsEventId");

                    b.ToTable("LunchGroups");
                });

            modelBuilder.Entity("Lunch_Tinder.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantID"));

                    b.Property<int?>("EventsEventId")
                        .HasColumnType("int");

                    b.Property<string>("RestaurantDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RestaurantsRestaurantID")
                        .HasColumnType("int");

                    b.HasKey("RestaurantID");

                    b.HasIndex("EventsEventId");

                    b.HasIndex("RestaurantsRestaurantID");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Lunch_Tinder.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LunchGroupsGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("LunchGroupsGroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Lunch_Tinder.Models.Vote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteId"));

                    b.Property<int>("EventVoteID")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantVoteID")
                        .HasColumnType("int");

                    b.Property<int>("UserVoteID")
                        .HasColumnType("int");

                    b.HasKey("VoteId");

                    b.HasIndex("EventVoteID");

                    b.HasIndex("RestaurantVoteID");

                    b.HasIndex("UserVoteID")
                        .IsUnique();

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Lunch_Tinder.Models.LunchGroup", b =>
                {
                    b.HasOne("Lunch_Tinder.Models.Event", "Events")
                        .WithMany("LunchGroups")
                        .HasForeignKey("EventsEventId");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Lunch_Tinder.Models.Restaurant", b =>
                {
                    b.HasOne("Lunch_Tinder.Models.Event", "Events")
                        .WithMany("RestaurantOptions")
                        .HasForeignKey("EventsEventId");

                    b.HasOne("Lunch_Tinder.Models.Restaurant", "Restaurants")
                        .WithMany()
                        .HasForeignKey("RestaurantsRestaurantID");

                    b.Navigation("Events");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("Lunch_Tinder.Models.User", b =>
                {
                    b.HasOne("Lunch_Tinder.Models.LunchGroup", "LunchGroups")
                        .WithMany("Users")
                        .HasForeignKey("LunchGroupsGroupId");

                    b.Navigation("LunchGroups");
                });

            modelBuilder.Entity("Lunch_Tinder.Models.Vote", b =>
                {
                    b.HasOne("Lunch_Tinder.Models.Event", "Event")
                        .WithMany("Votes")
                        .HasForeignKey("EventVoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lunch_Tinder.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantVoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lunch_Tinder.Models.User", "User")
                        .WithOne("Vote")
                        .HasForeignKey("Lunch_Tinder.Models.Vote", "UserVoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lunch_Tinder.Models.Event", b =>
                {
                    b.Navigation("LunchGroups");

                    b.Navigation("RestaurantOptions");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Lunch_Tinder.Models.LunchGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Lunch_Tinder.Models.User", b =>
                {
                    b.Navigation("Vote");
                });
#pragma warning restore 612, 618
        }
    }
}
