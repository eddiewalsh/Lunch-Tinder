2023-07-19 08:49:09.9749|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 08:49:17.0649|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (34ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 08:49:17.1144|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (26ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 08:49:17.1177|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 08:49:17.1177|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 08:49:17.1453|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 08:49:17.2122|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 08:49:17.6719|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 08:49:17.6719|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 08:49:17.6719|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 08:49:17.6719|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 08:49:17.6719|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 08:49:22.0289|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 08:49:22.2408|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 08:49:22.2777|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 08:49:22.3644|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-07-19 08:49:22.7554|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 393.552ms. 
2023-07-19 08:49:22.7629|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 484.7266ms 
2023-07-19 08:49:22.7629|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 08:49:23.0341|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/login.css?v=TAtPYGzs3koDlRBFISayeBqbg0sFA6B1noT9LxjkWIs - - 
2023-07-19 08:49:23.0341|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 08:49:23.0486|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 08:49:23.0486|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 1011.4647ms 
2023-07-19 08:49:23.0713|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 35.8232ms 
2023-07-19 08:49:23.0713|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/login.css was not modified 
2023-07-19 08:49:23.0713|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/login.css?v=TAtPYGzs3koDlRBFISayeBqbg0sFA6B1noT9LxjkWIs - - - 304 - text/css 50.2763ms 
2023-07-19 08:49:23.1598|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 114.5395ms 
2023-07-19 08:49:31.5606|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 259 
2023-07-19 08:49:31.5606|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 08:49:31.5728|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 08:49:32.3291|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (77ms) [Parameters=[@__email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__email_0 
2023-07-19 08:49:32.5877|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__email_0 
2023-07-19 08:49:32.5877|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-07-19 08:49:32.5877|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 08:49:32.5877|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 1021.6104ms 
2023-07-19 08:49:32.5877|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 08:49:32.5877|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 08:49:32.6055|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 259 - 302 0 - 1044.9134ms 
2023-07-19 08:49:32.6055|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 08:49:32.6055|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 08:49:32.6662|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 08:49:32.8765|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 08:49:32.8960|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 08:49:32.9644|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 08:49:32.9644|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 08:49:33.0068|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 39.5635ms. 
2023-07-19 08:49:33.0068|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 395.9277ms 
2023-07-19 08:49:33.0068|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 08:49:33.0120|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 413.1594ms 
2023-07-19 08:49:33.0422|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=7dvp9ZjONPaSCuKA_3ZIgP1iYSRdhhzBbYkHNiNy9MI - - 
2023-07-19 08:49:33.0422|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/AdminHome.css?v=WLJh6RNFL_na_FwfncOE1gyFVzuYD88KVKv8NEV9xIo - - 
2023-07-19 08:49:33.0422|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 08:49:33.0422|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/AdminHome.css was not modified 
2023-07-19 08:49:33.0422|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 08:49:33.0422|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2413ms 
2023-07-19 08:49:33.0422|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/AdminHome.css?v=WLJh6RNFL_na_FwfncOE1gyFVzuYD88KVKv8NEV9xIo - - - 304 - text/css 0.3046ms 
2023-07-19 08:49:33.0422|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=7dvp9ZjONPaSCuKA_3ZIgP1iYSRdhhzBbYkHNiNy9MI - - - 304 - application/javascript 0.5757ms 
2023-07-19 08:49:33.0422|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 08:49:33.0576|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.1322ms 
2023-07-19 08:49:36.9764|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 08:49:36.9824|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 08:49:36.9824|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 08:49:37.0225|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 08:49:37.0385|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 08:49:37.0569|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 08:49:37.0728|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 08:49:37.0728|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 08:49:37.0947|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 08:49:37.2020|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 107.8053ms. 
2023-07-19 08:49:37.2020|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 213.5645ms 
2023-07-19 08:49:37.2020|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 08:49:37.2020|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 231.4652ms 
2023-07-19 08:49:37.2193|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 08:49:37.2193|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3915ms 
2023-07-19 08:49:37.2193|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=9VwtpgUXl61XgE0GMaxDSNSr-X98YH757NpiaEdl8eU - - 
2023-07-19 08:49:37.2193|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/invitetolunchgroup.js was not modified 
2023-07-19 08:49:37.2193|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=9VwtpgUXl61XgE0GMaxDSNSr-X98YH757NpiaEdl8eU - - - 304 - application/javascript 0.4723ms 
2023-07-19 08:49:37.2193|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=eMbMplCOERiAbRihgWyy-gR8klC6w1-0EpMfiVXzYOw - - 
2023-07-19 08:49:37.2193|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 08:49:37.2193|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=eMbMplCOERiAbRihgWyy-gR8klC6w1-0EpMfiVXzYOw - - - 304 - application/javascript 0.6004ms 
2023-07-19 08:49:37.2381|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 08:49:37.2499|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 11.6708ms 
2023-07-19 08:50:51.3402|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 08:50:51.3402|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 08:50:51.3402|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 08:50:51.3402|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 08:50:51.3402|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 08:50:51.3402|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 08:50:51.3402|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 08:50:51.3597|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 14.6402ms. 
2023-07-19 08:50:51.3597|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 17.7598ms 
2023-07-19 08:50:51.3597|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 08:50:51.3597|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 24.4252ms 
2023-07-19 08:50:51.9340|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - 
2023-07-19 08:50:51.9340|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=7dvp9ZjONPaSCuKA_3ZIgP1iYSRdhhzBbYkHNiNy9MI - - 
2023-07-19 08:50:51.9449|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 08:50:51.9449|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\site.css' 
2023-07-19 08:50:51.9449|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - - 200 989 text/css 11.1258ms 
2023-07-19 08:50:51.9449|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=7dvp9ZjONPaSCuKA_3ZIgP1iYSRdhhzBbYkHNiNy9MI - - - 200 10562 application/javascript 11.0291ms 
2023-07-19 08:50:51.9449|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-07-19 08:50:51.9449|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/LunchGroupDetails.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\LunchGroupDetails.css' 
2023-07-19 08:50:51.9449|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 200 575 text/css 1.3436ms 
2023-07-19 08:50:51.9449|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - 
2023-07-19 08:50:51.9449|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - 
2023-07-19 08:50:51.9644|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/invitetolunchgroup.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\invitetolunchgroup.js' 
2023-07-19 08:50:51.9644|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/InviteToLunchGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\InviteToLunchGroup.css' 
2023-07-19 08:50:51.9644|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - - 200 500 text/css 10.8443ms 
2023-07-19 08:50:51.9644|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - - 200 1050 application/javascript 10.8225ms 
2023-07-19 08:50:51.9644|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - 
2023-07-19 08:50:51.9644|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=eMbMplCOERiAbRihgWyy-gR8klC6w1-0EpMfiVXzYOw - - 
2023-07-19 08:50:51.9644|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/CreateLunchEventForGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\CreateLunchEventForGroup.css' 
2023-07-19 08:50:51.9644|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - - 200 899 text/css 4.7346ms 
2023-07-19 08:50:51.9759|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/createevent.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\createevent.js' 
2023-07-19 08:50:51.9759|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=eMbMplCOERiAbRihgWyy-gR8klC6w1-0EpMfiVXzYOw - - - 200 9318 application/javascript 2.1258ms 
2023-07-19 08:50:52.0870|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 08:50:52.0870|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2269ms 
2023-07-19 08:50:58.1772|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 08:51:00.2932|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (33ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 08:51:00.3425|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (26ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 08:51:00.3425|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 08:51:00.3461|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 08:51:00.3752|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 08:51:00.3992|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 08:51:00.5711|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 08:51:00.5711|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 08:51:00.5711|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 08:51:00.5711|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 08:51:00.5711|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 08:51:01.3419|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 08:51:01.4826|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 08:51:01.5088|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 08:51:01.5528|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-07-19 08:51:01.7718|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 225.0234ms. 
2023-07-19 08:51:01.7718|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 269.2013ms 
2023-07-19 08:51:01.7718|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 08:51:01.8310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 08:51:01.8310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 08:51:01.8310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 8.4019ms 
2023-07-19 08:51:01.8310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 502.3161ms 
2023-07-19 08:51:01.8555|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 24.4980ms 
2023-07-19 08:51:12.9164|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 259 
2023-07-19 08:51:12.9185|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 08:51:12.9185|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 08:51:13.3821|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (39ms) [Parameters=[@__email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__email_0 
2023-07-19 08:51:13.5614|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__email_0 
2023-07-19 08:51:13.5614|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-07-19 08:51:13.5614|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 08:51:13.5614|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 642.606ms 
2023-07-19 08:51:13.5614|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 08:51:13.5614|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 08:51:13.5614|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 259 - 302 0 - 657.9094ms 
2023-07-19 08:51:13.5777|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 08:51:13.5777|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 08:51:13.6212|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 08:51:13.7662|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 08:51:13.7791|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 08:51:13.8265|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 08:51:13.8265|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 08:51:13.8589|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 30.2582ms. 
2023-07-19 08:51:13.8589|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 280.5456ms 
2023-07-19 08:51:13.8589|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 08:51:13.8589|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 291.9162ms 
2023-07-19 08:51:13.8788|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 08:51:13.8788|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3781ms 
2023-07-19 08:51:13.8788|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 08:51:13.8788|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.6146ms 
2023-07-19 08:51:26.1960|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 08:51:26.1960|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 08:51:26.1960|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 08:51:26.2215|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 08:51:26.2304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 08:51:26.2413|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 08:51:26.2413|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 08:51:26.2413|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 08:51:26.2626|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 08:51:26.3283|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 66.0022ms. 
2023-07-19 08:51:26.3283|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 127.1818ms 
2023-07-19 08:51:26.3283|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 08:51:26.3283|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 135.7228ms 
2023-07-19 08:51:26.3381|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 08:51:26.3381|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - 
2023-07-19 08:51:26.3381|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2646ms 
2023-07-19 08:51:26.3381|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/invitetolunchgroup.js was not modified 
2023-07-19 08:51:26.3381|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - - 304 - application/javascript 5.7069ms 
2023-07-19 08:51:26.3381|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 08:51:26.3551|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.0249ms 
2023-07-19 08:55:32.8203|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 08:55:34.6754|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 08:55:34.7142|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 08:55:34.7142|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 08:55:34.7142|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 08:55:34.7388|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 08:55:34.7559|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 08:55:34.9176|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 08:55:34.9176|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 08:55:34.9176|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 08:55:34.9176|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 08:55:34.9176|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 08:55:35.9068|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 08:55:36.0077|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 08:55:36.0292|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 08:55:36.0634|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-07-19 08:55:36.2391|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 177.1581ms. 
2023-07-19 08:55:36.2391|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 216.1912ms 
2023-07-19 08:55:36.2391|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 08:55:36.2927|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 08:55:36.2927|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 08:55:36.2927|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 391.1067ms 
2023-07-19 08:55:36.3086|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 15.8403ms 
2023-07-19 08:55:36.3169|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 24.1263ms 
2023-07-19 08:55:43.6388|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 259 
2023-07-19 08:55:43.6388|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 08:55:43.6388|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 08:55:44.0831|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (35ms) [Parameters=[@__email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__email_0 
2023-07-19 08:55:44.2590|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__email_0 
2023-07-19 08:55:44.2590|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-07-19 08:55:44.2632|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 08:55:44.2632|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 616.9763ms 
2023-07-19 08:55:44.2632|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 08:55:44.2632|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 08:55:44.2632|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 259 - 302 0 - 633.4281ms 
2023-07-19 08:55:44.2632|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 08:55:44.2632|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 08:55:44.3176|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 08:55:44.4507|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 08:55:44.4507|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 08:55:44.5083|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 08:55:44.5083|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 08:55:44.5415|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 31.2698ms. 
2023-07-19 08:55:44.5415|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 266.1052ms 
2023-07-19 08:55:44.5415|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 08:55:44.5415|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 276.6092ms 
2023-07-19 08:55:44.5584|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 08:55:44.5584|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2382ms 
2023-07-19 08:55:44.5622|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 08:55:44.5622|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.9303ms 
2023-07-19 08:55:47.8166|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 08:55:47.8166|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 08:55:47.8166|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 08:55:47.8413|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 08:55:47.8413|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 08:55:47.8598|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 08:55:47.8598|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 08:55:47.8732|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 08:55:47.8732|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 08:55:47.9420|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 60.1134ms. 
2023-07-19 08:55:47.9420|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 120.1529ms 
2023-07-19 08:55:47.9420|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 08:55:47.9420|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 128.7158ms 
2023-07-19 08:55:47.9519|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 08:55:47.9519|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1915ms 
2023-07-19 08:55:47.9519|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - 
2023-07-19 08:55:47.9519|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/invitetolunchgroup.js was not modified 
2023-07-19 08:55:47.9519|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - - 304 - application/javascript 6.1866ms 
2023-07-19 08:55:47.9519|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 08:55:47.9519|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.2887ms 
2023-07-19 09:01:09.9688|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:01:11.8899|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (29ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:01:11.9346|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:01:11.9346|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:01:11.9346|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:01:11.9609|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:01:11.9789|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:01:12.1479|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:01:12.1479|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:01:12.1479|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:01:12.1479|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:01:12.1479|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:01:12.7710|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:01:12.8586|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:01:12.8771|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:01:12.9071|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-07-19 09:01:13.0605|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 155.4803ms. 
2023-07-19 09:01:13.0605|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 188.4796ms 
2023-07-19 09:01:13.0605|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:01:13.1048|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:01:13.1048|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:01:13.1081|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 339.2185ms 
2023-07-19 09:01:13.1211|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 16.2774ms 
2023-07-19 09:01:13.1211|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 24.8198ms 
2023-07-19 09:01:36.1694|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 259 
2023-07-19 09:01:36.1694|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:01:36.1694|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:01:36.6312|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (35ms) [Parameters=[@__email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__email_0 
2023-07-19 09:01:36.8069|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__email_0 
2023-07-19 09:01:36.8108|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-07-19 09:01:36.8108|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:01:36.8108|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 632.4017ms 
2023-07-19 09:01:36.8108|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:01:36.8108|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:01:36.8108|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 259 - 302 0 - 650.6404ms 
2023-07-19 09:01:36.8108|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:01:36.8108|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:01:36.8673|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:01:37.0055|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:01:37.0186|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:01:37.0643|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:01:37.0643|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:01:37.0970|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 30.7735ms. 
2023-07-19 09:01:37.0970|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 272.8214ms 
2023-07-19 09:01:37.0970|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:01:37.0970|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 286.9369ms 
2023-07-19 09:01:37.1150|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:01:37.1150|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2888ms 
2023-07-19 09:01:37.1217|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:01:37.1217|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.2851ms 
2023-07-19 09:01:45.3758|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Event/DisplayEvent?eventid=33 - - 
2023-07-19 09:01:45.3758|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder)' 
2023-07-19 09:01:45.3758|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayEvent", controller = "Event"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayEvent(Int32) on controller Lunch_Tinder.Controllers.EventController (Lunch Tinder). 
2023-07-19 09:01:45.4042|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[EventId], [t].[Description], [t].[EventEndTime], [t].[EventStartTime], [t].[Name], [t].[Status], [t].[VenueWinner], [t].[VotingEndTime], [t].[VotingStartTime], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[RestaurantID], [t0].[RestaurantDescription], [t0].[RestaurantName]
FROM (
    SELECT TOP(1) [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
    FROM [Events] AS [e]
    WHERE [e].[EventId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [e0].[EventsEventId], [e0].[RestaurantOptionsRestaurantID], [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [EventRestaurant] AS [e0]
    INNER JOIN [Restaurants] AS [r] ON [e0].[RestaurantOptionsRestaurantID] = [r].[RestaurantID]
) AS [t0] ON [t].[EventId] = [t0].[EventsEventId]
ORDER BY [t].[EventId], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 09:01:45.4242|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[GroupId], [t0].[Description], [t0].[GroupName]
FROM (
    SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [Users] AS [u]
    WHERE [u].[UserId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t0] ON [t].[UserId] = [t0].[UsersUserId]
ORDER BY [t].[UserId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-07-19 09:01:45.4242|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LunchGroupEvent.cshtml. 
2023-07-19 09:01:45.4505|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LunchGroupEvent.cshtml executed in 25.9687ms. 
2023-07-19 09:01:45.4505|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder) in 71.9264ms 
2023-07-19 09:01:45.4505|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder)' 
2023-07-19 09:01:45.4505|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Event/DisplayEvent?eventid=33 - - - 200 - text/html;+charset=utf-8 76.4282ms 
2023-07-19 09:01:45.4505|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:01:45.4505|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2290ms 
2023-07-19 09:01:45.4505|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/lunchgroupevent.css?v=TwrT2bp0B3Uje1hvxYNHAyqipyWHP5XtYrtmn5UQQFc - - 
2023-07-19 09:01:45.4702|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/lunchgroupevent.css was not modified 
2023-07-19 09:01:45.4702|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/lunchgroupevent.css?v=TwrT2bp0B3Uje1hvxYNHAyqipyWHP5XtYrtmn5UQQFc - - - 304 - text/css 7.4564ms 
2023-07-19 09:01:45.4702|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:01:45.4702|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.9453ms 
2023-07-19 09:01:47.3909|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:01:47.3909|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4846ms 
2023-07-19 09:01:48.7017|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:01:48.7017|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:01:48.7017|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:01:48.7186|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:01:48.7186|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:01:48.7375|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:01:48.7375|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:01:48.7468|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:01:48.7468|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:01:48.8024|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 55.1712ms. 
2023-07-19 09:01:48.8024|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 96.6176ms 
2023-07-19 09:01:48.8024|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:01:48.8024|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 104.3933ms 
2023-07-19 09:01:48.8139|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:01:48.8139|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2923ms 
2023-07-19 09:01:48.8139|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - 
2023-07-19 09:01:48.8139|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:01:48.8273|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/invitetolunchgroup.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\invitetolunchgroup.js' 
2023-07-19 09:01:48.8273|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - - 200 1050 application/javascript 13.1174ms 
2023-07-19 09:01:48.8273|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.2986ms 
2023-07-19 09:03:43.0749|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:03:44.9434|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (30ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:03:44.9870|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:03:44.9870|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:03:44.9870|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:03:45.0149|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:03:45.0331|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:03:45.2484|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:03:45.2484|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:03:45.2484|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:03:45.2484|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:03:45.2484|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:03:45.7992|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:03:45.8940|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:03:45.9142|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:03:45.9475|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:03:45.9517|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 33.9694ms 
2023-07-19 09:03:45.9517|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:03:45.9716|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:03:45.9716|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 175.6440ms 
2023-07-19 09:03:45.9824|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:03:45.9824|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:46.2285|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:03:46.5485|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:03:46.5654|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:03:46.6220|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:03:46.6220|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:03:46.7679|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 142.6165ms. 
2023-07-19 09:03:46.7679|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 789.8147ms 
2023-07-19 09:03:46.7679|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:03:46.8079|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 836.2421ms 
2023-07-19 09:03:46.8103|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:03:46.8103|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 3.7928ms 
2023-07-19 09:03:46.8103|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:03:46.8333|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 14.9060ms 
2023-07-19 09:03:47.7792|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:03:47.7792|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:03:47.7792|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:47.8557|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:03:47.9081|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (38ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:03:47.9207|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:03:47.9207|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:03:47.9342|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:03:47.9342|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:03:48.0141|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 71.4504ms. 
2023-07-19 09:03:48.0141|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 226.7457ms 
2023-07-19 09:03:48.0141|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:03:48.0141|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 239.0227ms 
2023-07-19 09:03:48.0141|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:03:48.0141|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2695ms 
2023-07-19 09:03:48.0141|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - 
2023-07-19 09:03:48.0312|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/invitetolunchgroup.js was not modified 
2023-07-19 09:03:48.0312|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - - 304 - application/javascript 5.3343ms 
2023-07-19 09:03:48.0312|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:03:48.0312|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.8407ms 
2023-07-19 09:03:50.3216|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=f - - 
2023-07-19 09:03:50.3216|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:50.3216|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:50.3399|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:50.3415|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:50.3677|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 44.5241ms 
2023-07-19 09:03:50.3677|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:50.3677|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=f - - - 200 - application/json;+charset=utf-8 46.3302ms 
2023-07-19 09:03:50.3677|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fd - - 
2023-07-19 09:03:50.3677|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:50.3677|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:50.3734|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:50.3734|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:50.3734|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 3.1068ms 
2023-07-19 09:03:50.3734|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:50.3734|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fd - - - 200 - application/json;+charset=utf-8 3.7251ms 
2023-07-19 09:03:50.6476|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fdd - - 
2023-07-19 09:03:50.6476|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:50.6476|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:50.6476|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:50.6476|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:50.6476|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9848ms 
2023-07-19 09:03:50.6476|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:50.6476|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fdd - - - 200 - application/json;+charset=utf-8 1.4267ms 
2023-07-19 09:03:50.8204|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddf - - 
2023-07-19 09:03:50.8204|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:50.8204|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:50.8204|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:50.8204|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:50.8204|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.5938ms 
2023-07-19 09:03:50.8204|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:50.8204|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddf - - - 200 - application/json;+charset=utf-8 2.4951ms 
2023-07-19 09:03:50.8958|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfs - - 
2023-07-19 09:03:50.8958|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:50.8958|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:50.8958|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:50.8958|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:50.8958|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1224ms 
2023-07-19 09:03:50.8958|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:50.8958|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfs - - - 200 - application/json;+charset=utf-8 1.6686ms 
2023-07-19 09:03:50.9285|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsd - - 
2023-07-19 09:03:50.9285|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:50.9285|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:50.9285|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:50.9285|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:50.9285|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0425ms 
2023-07-19 09:03:50.9285|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:50.9285|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsd - - - 200 - application/json;+charset=utf-8 1.5905ms 
2023-07-19 09:03:51.1079|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdf - - 
2023-07-19 09:03:51.1079|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:51.1079|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:51.1079|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:51.1079|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:51.1079|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.884ms 
2023-07-19 09:03:51.1079|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:51.1079|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdf - - - 200 - application/json;+charset=utf-8 1.2994ms 
2023-07-19 09:03:51.1738|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfd - - 
2023-07-19 09:03:51.1738|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:51.1738|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:51.1738|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:51.1738|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:51.1738|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0683ms 
2023-07-19 09:03:51.1738|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:51.1738|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfd - - - 200 - application/json;+charset=utf-8 1.4869ms 
2023-07-19 09:03:51.1919|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfds - - 
2023-07-19 09:03:51.1919|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:51.1919|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:51.1919|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:51.1919|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:51.1919|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9456ms 
2023-07-19 09:03:51.1919|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:51.1919|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfds - - - 200 - application/json;+charset=utf-8 1.3998ms 
2023-07-19 09:03:51.3056|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsf - - 
2023-07-19 09:03:51.3056|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:51.3056|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:51.3056|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:51.3056|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:51.3056|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9033ms 
2023-07-19 09:03:51.3056|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:51.3056|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsf - - - 200 - application/json;+charset=utf-8 1.3907ms 
2023-07-19 09:03:51.3856|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfd - - 
2023-07-19 09:03:51.3856|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:51.3856|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:51.3869|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:51.3869|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:51.3869|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0165ms 
2023-07-19 09:03:51.3869|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:51.3869|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfd - - - 200 - application/json;+charset=utf-8 1.6633ms 
2023-07-19 09:03:51.4218|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfds - - 
2023-07-19 09:03:51.4218|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:51.4218|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:51.4218|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:51.4218|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:51.4218|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9428ms 
2023-07-19 09:03:51.4218|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:51.4218|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfds - - - 200 - application/json;+charset=utf-8 1.3561ms 
2023-07-19 09:03:52.5643|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsd - - 
2023-07-19 09:03:52.5643|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:52.5643|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:52.5643|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:52.5643|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:52.5643|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.99ms 
2023-07-19 09:03:52.5643|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:52.5643|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsd - - - 200 - application/json;+charset=utf-8 1.6992ms 
2023-07-19 09:03:52.6024|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsds - - 
2023-07-19 09:03:52.6024|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:52.6024|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:52.6024|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:52.6024|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:52.6024|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9979ms 
2023-07-19 09:03:52.6024|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:52.6024|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsds - - - 200 - application/json;+charset=utf-8 1.5201ms 
2023-07-19 09:03:52.7360|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdss - - 
2023-07-19 09:03:52.7360|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:52.7360|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:52.7360|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:52.7360|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:52.7360|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.941ms 
2023-07-19 09:03:52.7360|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:52.7360|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdss - - - 200 - application/json;+charset=utf-8 1.4551ms 
2023-07-19 09:03:52.8229|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssf - - 
2023-07-19 09:03:52.8229|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:52.8229|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:52.8241|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:52.8241|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:52.8241|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9765ms 
2023-07-19 09:03:52.8241|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:52.8241|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssf - - - 200 - application/json;+charset=utf-8 1.4397ms 
2023-07-19 09:03:52.9836|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssfs - - 
2023-07-19 09:03:52.9836|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:52.9836|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:52.9836|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:52.9836|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:52.9836|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9175ms 
2023-07-19 09:03:52.9836|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:52.9836|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssfs - - - 200 - application/json;+charset=utf-8 1.3542ms 
2023-07-19 09:03:53.0175|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssfsf - - 
2023-07-19 09:03:53.0175|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:53.0175|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:53.0175|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:53.0175|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:53.0175|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9108ms 
2023-07-19 09:03:53.0175|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:53.0175|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssfsf - - - 200 - application/json;+charset=utf-8 1.3642ms 
2023-07-19 09:03:53.1607|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssfsfd - - 
2023-07-19 09:03:53.1607|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:53.1607|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:53.1607|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:53.1607|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:53.1607|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9307ms 
2023-07-19 09:03:53.1607|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:53.1607|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssfsfd - - - 200 - application/json;+charset=utf-8 1.4060ms 
2023-07-19 09:03:54.2515|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssfsf - - 
2023-07-19 09:03:54.2515|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.2515|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:54.2515|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:54.2515|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:54.2515|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0658ms 
2023-07-19 09:03:54.2515|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.2515|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssfsf - - - 200 - application/json;+charset=utf-8 1.8042ms 
2023-07-19 09:03:54.7395|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssfs - - 
2023-07-19 09:03:54.7395|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.7395|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:54.7395|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:54.7395|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:54.7395|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0074ms 
2023-07-19 09:03:54.7395|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.7395|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssfs - - - 200 - application/json;+charset=utf-8 1.5956ms 
2023-07-19 09:03:54.7846|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssf - - 
2023-07-19 09:03:54.7846|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.7846|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:54.7846|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:54.7846|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:54.7846|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9553ms 
2023-07-19 09:03:54.7846|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.7846|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdssf - - - 200 - application/json;+charset=utf-8 1.3750ms 
2023-07-19 09:03:54.8159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdss - - 
2023-07-19 09:03:54.8159|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.8159|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:54.8159|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:54.8159|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:54.8159|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.056ms 
2023-07-19 09:03:54.8159|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.8159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsdss - - - 200 - application/json;+charset=utf-8 1.8036ms 
2023-07-19 09:03:54.8473|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsds - - 
2023-07-19 09:03:54.8473|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.8473|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:54.8473|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:54.8473|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:54.8473|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8955ms 
2023-07-19 09:03:54.8473|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.8473|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsds - - - 200 - application/json;+charset=utf-8 1.3637ms 
2023-07-19 09:03:54.8759|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsd - - 
2023-07-19 09:03:54.8759|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.8759|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:54.8759|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:54.8759|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:54.8759|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9547ms 
2023-07-19 09:03:54.8759|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.8759|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfdsd - - - 200 - application/json;+charset=utf-8 1.4457ms 
2023-07-19 09:03:54.9073|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfds - - 
2023-07-19 09:03:54.9073|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.9073|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:54.9073|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:54.9073|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:54.9073|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9097ms 
2023-07-19 09:03:54.9073|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.9073|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfds - - - 200 - application/json;+charset=utf-8 1.5864ms 
2023-07-19 09:03:54.9394|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfd - - 
2023-07-19 09:03:54.9394|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.9394|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:54.9394|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:54.9394|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:54.9394|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9618ms 
2023-07-19 09:03:54.9394|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.9394|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsfd - - - 200 - application/json;+charset=utf-8 1.3751ms 
2023-07-19 09:03:54.9695|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsf - - 
2023-07-19 09:03:54.9695|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.9695|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:54.9695|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:54.9695|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:54.9695|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9306ms 
2023-07-19 09:03:54.9695|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:54.9695|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfdsf - - - 200 - application/json;+charset=utf-8 1.3949ms 
2023-07-19 09:03:55.0159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfds - - 
2023-07-19 09:03:55.0159|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.0159|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:55.0159|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:55.0159|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:55.0159|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9082ms 
2023-07-19 09:03:55.0159|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.0159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfds - - - 200 - application/json;+charset=utf-8 1.4155ms 
2023-07-19 09:03:55.0465|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfd - - 
2023-07-19 09:03:55.0465|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.0465|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:55.0465|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:55.0465|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:55.0465|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9297ms 
2023-07-19 09:03:55.0465|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.0465|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdfd - - - 200 - application/json;+charset=utf-8 1.4448ms 
2023-07-19 09:03:55.0781|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdf - - 
2023-07-19 09:03:55.0781|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.0781|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:55.0781|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:55.0781|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:55.0781|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9574ms 
2023-07-19 09:03:55.0781|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.0781|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsdf - - - 200 - application/json;+charset=utf-8 1.4834ms 
2023-07-19 09:03:55.1082|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsd - - 
2023-07-19 09:03:55.1082|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.1082|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:55.1082|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:55.1082|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:55.1082|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0028ms 
2023-07-19 09:03:55.1082|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.1082|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfsd - - - 200 - application/json;+charset=utf-8 1.4837ms 
2023-07-19 09:03:55.1415|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfs - - 
2023-07-19 09:03:55.1415|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.1415|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:55.1415|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:55.1415|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:55.1415|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.943ms 
2023-07-19 09:03:55.1415|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.1415|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddfs - - - 200 - application/json;+charset=utf-8 1.3924ms 
2023-07-19 09:03:55.1701|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddf - - 
2023-07-19 09:03:55.1701|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.1701|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:55.1701|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:55.1701|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:55.1701|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9992ms 
2023-07-19 09:03:55.1701|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.1701|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fddf - - - 200 - application/json;+charset=utf-8 1.4893ms 
2023-07-19 09:03:55.2028|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fdd - - 
2023-07-19 09:03:55.2028|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.2028|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:55.2028|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:55.2028|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:55.2028|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.991ms 
2023-07-19 09:03:55.2028|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.2028|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fdd - - - 200 - application/json;+charset=utf-8 1.5706ms 
2023-07-19 09:03:55.2363|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fd - - 
2023-07-19 09:03:55.2363|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.2363|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:55.2363|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:55.2363|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:55.2363|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0972ms 
2023-07-19 09:03:55.2363|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.2363|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=fd - - - 200 - application/json;+charset=utf-8 1.6374ms 
2023-07-19 09:03:55.2793|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=f - - 
2023-07-19 09:03:55.2793|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.2793|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:55.2793|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:55.2793|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:55.2793|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.8141ms 
2023-07-19 09:03:55.2793|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:55.2793|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=f - - - 200 - application/json;+charset=utf-8 2.7486ms 
2023-07-19 09:03:57.0339|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=e - - 
2023-07-19 09:03:57.0339|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:57.0339|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:57.0339|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:57.0339|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:57.0339|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9363ms 
2023-07-19 09:03:57.0339|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:57.0339|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=e - - - 200 - application/json;+charset=utf-8 1.4944ms 
2023-07-19 09:03:58.6928|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=u - - 
2023-07-19 09:03:58.6928|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:58.6928|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:03:58.6928|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:03:58.6928|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:03:58.6928|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0785ms 
2023-07-19 09:03:58.6928|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:03:58.6928|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=u - - - 200 - application/json;+charset=utf-8 1.7952ms 
2023-07-19 09:04:00.3376|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - 
2023-07-19 09:04:00.3376|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:04:00.3376|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:04:00.3398|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:04:00.3398|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:04:00.3398|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0101ms 
2023-07-19 09:04:00.3398|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:04:00.3398|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - - 200 - application/json;+charset=utf-8 2.4230ms 
2023-07-19 09:16:38.5531|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:16:41.7266|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (37ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:16:41.7663|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:16:41.7663|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:16:41.7663|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:16:41.7915|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:16:41.8089|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:16:41.9751|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:16:41.9751|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:16:41.9751|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:16:41.9751|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:16:41.9751|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:16:42.7904|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:16:42.8873|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:16:42.9055|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:16:42.9393|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:16:42.9393|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 34.3577ms 
2023-07-19 09:16:42.9393|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:16:42.9652|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:16:42.9652|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 178.5833ms 
2023-07-19 09:16:42.9856|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:16:42.9856|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:16:43.2353|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:16:43.5518|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:16:43.5700|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:16:43.6272|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:16:43.6272|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:16:43.7985|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 167.7467ms. 
2023-07-19 09:16:43.7985|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 815.9542ms 
2023-07-19 09:16:43.7985|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:16:43.8432|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 877.9680ms 
2023-07-19 09:16:43.8432|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:16:43.8432|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=TNvVOaVy3A6o10rusPVw6WxkYxPqAjUjJXHyI4m19TE - - 
2023-07-19 09:16:43.8432|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.0833ms 
2023-07-19 09:16:43.8620|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:16:43.8620|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 09:16:43.8620|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=TNvVOaVy3A6o10rusPVw6WxkYxPqAjUjJXHyI4m19TE - - - 200 11910 application/javascript 16.9864ms 
2023-07-19 09:16:43.8957|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 33.7265ms 
2023-07-19 09:16:45.9834|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:16:45.9834|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:16:45.9834|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:16:46.0587|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:16:46.1132|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:16:46.1236|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:16:46.1236|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:16:46.1370|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:16:46.1370|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:16:46.2124|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 66.6569ms. 
2023-07-19 09:16:46.2124|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 221.1849ms 
2023-07-19 09:16:46.2124|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:16:46.2159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 232.6282ms 
2023-07-19 09:16:46.2159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:16:46.2159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - 
2023-07-19 09:16:46.2159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4266ms 
2023-07-19 09:16:46.2159|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/invitetolunchgroup.js was not modified 
2023-07-19 09:16:46.2159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - - 304 - application/javascript 1.7892ms 
2023-07-19 09:16:46.2354|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:16:46.2354|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.2497ms 
2023-07-19 09:16:59.7185|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:16:59.7185|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:16:59.7185|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:16:59.7185|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:16:59.7185|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:16:59.7185|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:16:59.7185|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:16:59.7337|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 8.6401ms. 
2023-07-19 09:16:59.7337|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 13.7469ms 
2023-07-19 09:16:59.7337|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:16:59.7337|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 18.4143ms 
2023-07-19 09:17:00.3098|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - 
2023-07-19 09:17:00.3098|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=TNvVOaVy3A6o10rusPVw6WxkYxPqAjUjJXHyI4m19TE - - 
2023-07-19 09:17:00.3098|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 09:17:00.3098|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\site.css' 
2023-07-19 09:17:00.3098|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - - 200 989 text/css 1.4302ms 
2023-07-19 09:17:00.3098|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=TNvVOaVy3A6o10rusPVw6WxkYxPqAjUjJXHyI4m19TE - - - 200 11910 application/javascript 1.3349ms 
2023-07-19 09:17:00.3098|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-07-19 09:17:00.3325|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/LunchGroupDetails.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\LunchGroupDetails.css' 
2023-07-19 09:17:00.3325|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - 
2023-07-19 09:17:00.3325|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 200 575 text/css 8.5467ms 
2023-07-19 09:17:00.3325|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - 
2023-07-19 09:17:00.3325|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/InviteToLunchGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\InviteToLunchGroup.css' 
2023-07-19 09:17:00.3325|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - - 200 500 text/css 2.0981ms 
2023-07-19 09:17:00.3325|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/invitetolunchgroup.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\invitetolunchgroup.js' 
2023-07-19 09:17:00.3325|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - - 200 1050 application/javascript 1.3052ms 
2023-07-19 09:17:00.3488|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - 
2023-07-19 09:17:00.3488|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=eMbMplCOERiAbRihgWyy-gR8klC6w1-0EpMfiVXzYOw - - 
2023-07-19 09:17:00.3488|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/createevent.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\createevent.js' 
2023-07-19 09:17:00.3488|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/CreateLunchEventForGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\CreateLunchEventForGroup.css' 
2023-07-19 09:17:00.3488|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=eMbMplCOERiAbRihgWyy-gR8klC6w1-0EpMfiVXzYOw - - - 200 9318 application/javascript 2.4113ms 
2023-07-19 09:17:00.3488|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - - 200 899 text/css 2.6496ms 
2023-07-19 09:17:00.4667|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:17:00.4667|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2909ms 
2023-07-19 09:17:01.7340|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:17:01.7340|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.2359ms 
2023-07-19 09:18:31.8898|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:18:33.8566|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:18:33.8986|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:18:33.8986|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:18:33.8986|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:18:33.9242|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:18:33.9432|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:18:34.1143|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:18:34.1143|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:18:34.1143|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:18:34.1143|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:18:34.1143|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:18:34.9531|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:18:35.0531|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:18:35.0717|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:18:35.1040|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:18:35.1077|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 32.6894ms 
2023-07-19 09:18:35.1077|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:18:35.1268|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:18:35.1268|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 178.4539ms 
2023-07-19 09:18:35.1608|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:18:35.1608|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:18:35.4052|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:18:35.7176|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:18:35.7363|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:18:35.7958|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:18:35.7958|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:18:35.9444|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 143.795ms. 
2023-07-19 09:18:35.9444|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 787.2544ms 
2023-07-19 09:18:35.9503|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:18:35.9848|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 858.0346ms 
2023-07-19 09:18:35.9848|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=TNvVOaVy3A6o10rusPVw6WxkYxPqAjUjJXHyI4m19TE - - 
2023-07-19 09:18:35.9848|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:18:35.9848|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 3.6738ms 
2023-07-19 09:18:35.9848|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 09:18:35.9848|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=TNvVOaVy3A6o10rusPVw6WxkYxPqAjUjJXHyI4m19TE - - - 304 - application/javascript 5.7425ms 
2023-07-19 09:18:35.9848|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:18:36.0114|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 16.4531ms 
2023-07-19 09:18:37.5697|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:18:37.5743|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:18:37.5743|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:18:37.6475|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:18:37.7032|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (41ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:18:37.7032|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:18:37.7226|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:18:37.7226|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:18:37.7357|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:18:37.8083|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 72.9527ms. 
2023-07-19 09:18:37.8084|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 231.3312ms 
2023-07-19 09:18:37.8084|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:18:37.8084|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 241.9801ms 
2023-07-19 09:18:37.8084|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:18:37.8084|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3798ms 
2023-07-19 09:18:37.8290|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:18:37.8290|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.5666ms 
2023-07-19 09:19:17.2693|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:19:17.2693|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:19:17.2693|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:17.2798|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:19:17.2798|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:19:17.2798|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:19:17.2798|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:19:17.2957|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 14.3476ms. 
2023-07-19 09:19:17.2957|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 19.6235ms 
2023-07-19 09:19:17.2957|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:19:17.2957|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 30.2494ms 
2023-07-19 09:19:17.2957|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=T1ncOSyGwzB7FAiZeqUSRCjnRxlfz3CI8m0rAnPdTkg - - 
2023-07-19 09:19:17.2957|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:19:17.2957|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2912ms 
2023-07-19 09:19:17.2957|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - 
2023-07-19 09:19:17.2957|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/invitetolunchgroup.js was not modified 
2023-07-19 09:19:17.2957|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - - 304 - application/javascript 0.4904ms 
2023-07-19 09:19:17.3140|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 09:19:17.3140|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=T1ncOSyGwzB7FAiZeqUSRCjnRxlfz3CI8m0rAnPdTkg - - - 200 11755 application/javascript 9.5292ms 
2023-07-19 09:19:17.3140|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:19:17.3140|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.7365ms 
2023-07-19 09:19:26.6507|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:19:28.5340|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (34ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:19:28.5780|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:19:28.5780|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:19:28.5780|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:19:28.6055|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:19:28.6245|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:19:28.7991|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:19:28.7991|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:19:28.7991|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:19:28.7991|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:19:28.7991|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:19:29.3679|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:19:29.4764|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:19:29.4963|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:19:29.5352|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:19:29.5352|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 39.1783ms 
2023-07-19 09:19:29.5352|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:19:29.5603|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:19:29.5603|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 195.2494ms 
2023-07-19 09:19:29.5603|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:19:29.5603|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:29.8261|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:19:30.1527|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:19:30.1702|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:19:30.2300|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:19:30.2381|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:19:30.3779|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 144.0309ms. 
2023-07-19 09:19:30.3779|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 808.4571ms 
2023-07-19 09:19:30.3779|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:19:30.4147|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 854.4410ms 
2023-07-19 09:19:30.4183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:19:30.4183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=T1ncOSyGwzB7FAiZeqUSRCjnRxlfz3CI8m0rAnPdTkg - - 
2023-07-19 09:19:30.4183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.4393ms 
2023-07-19 09:19:30.4183|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 09:19:30.4183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=T1ncOSyGwzB7FAiZeqUSRCjnRxlfz3CI8m0rAnPdTkg - - - 304 - application/javascript 6.8532ms 
2023-07-19 09:19:30.4183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:19:30.4466|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 13.9858ms 
2023-07-19 09:19:31.2953|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:19:31.2953|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:19:31.2953|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:31.3746|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:19:31.4349|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (42ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:19:31.4349|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:19:31.4547|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:19:31.4547|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:19:31.4783|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:19:31.5586|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 80.8575ms. 
2023-07-19 09:19:31.5586|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 254.9934ms 
2023-07-19 09:19:31.5586|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:19:31.5586|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 267.3476ms 
2023-07-19 09:19:31.5586|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=T1ncOSyGwzB7FAiZeqUSRCjnRxlfz3CI8m0rAnPdTkg - - 
2023-07-19 09:19:31.5586|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 09:19:31.5586|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=T1ncOSyGwzB7FAiZeqUSRCjnRxlfz3CI8m0rAnPdTkg - - - 304 - application/javascript 0.6507ms 
2023-07-19 09:19:31.5586|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:19:31.5586|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.5283ms 
2023-07-19 09:19:31.5851|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:19:31.5851|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.5033ms 
2023-07-19 09:19:34.3883|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=h - - 
2023-07-19 09:19:34.3883|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.3883|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:34.4093|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:34.4093|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:34.4394|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 48.6698ms 
2023-07-19 09:19:34.4394|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.4394|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=h - - - 200 - application/json;+charset=utf-8 51.3983ms 
2023-07-19 09:19:34.4394|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=h - - 
2023-07-19 09:19:34.4394|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.4394|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:34.4394|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:34.4394|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:34.4394|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 3.8925ms 
2023-07-19 09:19:34.4394|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.4394|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=h - - - 200 - application/json;+charset=utf-8 4.7310ms 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hg - - 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:34.7067|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1036ms 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hg - - - 200 - application/json;+charset=utf-8 1.6823ms 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hg - - 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:34.7067|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8925ms 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.7067|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hg - - - 200 - application/json;+charset=utf-8 1.3736ms 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hgh - - 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghf - - 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:34.9149|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9626ms 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hgh - - - 200 - application/json;+charset=utf-8 1.5427ms 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hgh - - 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.9149|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:34.9184|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:34.9184|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9582ms 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 3.2385ms 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hgh - - - 200 - application/json;+charset=utf-8 1.4875ms 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghf - - - 200 - application/json;+charset=utf-8 3.8617ms 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghf - - 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:34.9184|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8656ms 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:34.9184|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghf - - - 200 - application/json;+charset=utf-8 1.3277ms 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghff - - 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.0812|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9689ms 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghff - - - 200 - application/json;+charset=utf-8 1.4860ms 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghff - - 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.0812|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8286ms 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.0812|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghff - - - 200 - application/json;+charset=utf-8 1.2803ms 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffg - - 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.0921|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8948ms 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffg - - - 200 - application/json;+charset=utf-8 1.3420ms 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffg - - 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.0921|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.7698ms 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.0921|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffg - - - 200 - application/json;+charset=utf-8 1.1808ms 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffgh - - 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.1589|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.938ms 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffgh - - - 200 - application/json;+charset=utf-8 1.4290ms 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffgh - - 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.1589|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8753ms 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.1589|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffgh - - - 200 - application/json;+charset=utf-8 1.2751ms 
2023-07-19 09:19:35.6517|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghf - - 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.6521|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9788ms 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghf - - - 200 - application/json;+charset=utf-8 1.6517ms 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghf - - 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.6521|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9167ms 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghf - - - 200 - application/json;+charset=utf-8 1.3317ms 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfg - - 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.6521|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9272ms 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfg - - - 200 - application/json;+charset=utf-8 1.5052ms 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfg - - 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.6521|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.807ms 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.6521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfg - - - 200 - application/json;+charset=utf-8 1.2291ms 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfgh - - 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.8265|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9766ms 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfgh - - - 200 - application/json;+charset=utf-8 1.6539ms 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfgh - - 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.8265|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0447ms 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.8265|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfgh - - - 200 - application/json;+charset=utf-8 1.5311ms 
2023-07-19 09:19:35.9616|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfghf - - 
2023-07-19 09:19:35.9616|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.9616|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.9616|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.9616|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.9616|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1045ms 
2023-07-19 09:19:35.9616|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.9616|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfghf - - - 200 - application/json;+charset=utf-8 1.8819ms 
2023-07-19 09:19:35.9616|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfghf - - 
2023-07-19 09:19:35.9616|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.9616|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.9652|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.9652|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.9652|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8017ms 
2023-07-19 09:19:35.9652|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.9652|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfghf - - - 200 - application/json;+charset=utf-8 1.3166ms 
2023-07-19 09:19:35.9652|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfghfg - - 
2023-07-19 09:19:35.9652|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.9652|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.9652|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.9652|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.9652|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.136ms 
2023-07-19 09:19:35.9652|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.9652|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfghfg - - - 200 - application/json;+charset=utf-8 1.7066ms 
2023-07-19 09:19:35.9812|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfghfg - - 
2023-07-19 09:19:35.9812|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.9812|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:19:35.9812|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT CAST(0 AS bit) 
2023-07-19 09:19:35.9812|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:19:35.9812|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8573ms 
2023-07-19 09:19:35.9812|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:19:35.9812|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=hghffghfghfg - - - 200 - application/json;+charset=utf-8 1.2352ms 
2023-07-19 09:26:33.6667|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:26:33.6688|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:26:33.6688|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:26:33.7224|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:26:33.7224|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:26:33.7224|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:26:33.7300|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:26:33.7300|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 14.2211ms. 
2023-07-19 09:26:33.7300|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 75.3844ms 
2023-07-19 09:26:33.7300|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:26:33.7479|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 81.2034ms 
2023-07-19 09:26:33.7479|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:26:33.7479|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:26:33.7479|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1866ms 
2023-07-19 09:26:33.7620|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - 
2023-07-19 09:26:33.7620|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/invitetolunchgroup.js was not modified 
2023-07-19 09:26:33.7620|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=aMnnG9typQXaezJ1YZs13KsNl1nhf8yEuFhYwoN5p8k - - - 304 - application/javascript 0.4742ms 
2023-07-19 09:26:33.7620|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 09:26:33.7620|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 200 10547 application/javascript 9.8508ms 
2023-07-19 09:26:33.7818|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:26:33.7818|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.3382ms 
2023-07-19 09:31:15.9782|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:31:17.8519|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (29ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:31:17.8927|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:31:17.8927|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:31:17.8927|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:31:17.9171|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:31:17.9347|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:31:18.0993|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:31:18.0993|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:31:18.0993|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:31:18.0993|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:31:18.0993|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:31:18.5827|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:31:18.6831|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:31:18.7035|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:31:18.7387|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:31:18.7387|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 35.7052ms 
2023-07-19 09:31:18.7387|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:31:18.7668|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:31:18.7668|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 187.8807ms 
2023-07-19 09:31:18.7668|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:31:18.7776|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:31:19.0295|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:31:19.3640|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:31:19.3813|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:31:19.4407|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:31:19.4407|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:31:19.5800|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 135.6667ms. 
2023-07-19 09:31:19.5800|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 806.2221ms 
2023-07-19 09:31:19.5800|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:31:19.6185|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 851.6371ms 
2023-07-19 09:31:19.6365|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:31:19.6391|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:31:19.6391|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 3.3192ms 
2023-07-19 09:31:19.6391|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 09:31:19.6391|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 304 - application/javascript 6.6113ms 
2023-07-19 09:31:19.6391|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:31:19.6640|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 18.5425ms 
2023-07-19 09:31:34.8175|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:31:34.8175|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:31:34.8250|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:31:34.8941|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:31:34.9477|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (39ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:31:34.9585|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:31:34.9667|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:31:34.9667|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:31:34.9819|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:31:35.0510|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 69.5156ms. 
2023-07-19 09:31:35.0510|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 226.101ms 
2023-07-19 09:31:35.0510|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:31:35.0510|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 239.0592ms 
2023-07-19 09:31:35.0626|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=O7paXtEkOtF1Tgrw-qP_Sw99W0TVfHKOAXEEXUWTAAo - - 
2023-07-19 09:31:35.0626|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:31:35.0626|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4665ms 
2023-07-19 09:31:35.0626|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/invitetolunchgroup.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\invitetolunchgroup.js' 
2023-07-19 09:31:35.0626|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=O7paXtEkOtF1Tgrw-qP_Sw99W0TVfHKOAXEEXUWTAAo - - - 200 1056 application/javascript 9.4465ms 
2023-07-19 09:31:35.0740|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:31:35.0740|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.0933ms 
2023-07-19 09:33:36.9993|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:33:36.9993|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:33:36.9993|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:33:36.9993|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:33:36.9993|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:33:36.9993|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:33:36.9993|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:33:37.0196|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 13.3623ms. 
2023-07-19 09:33:37.0196|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 18.2605ms 
2023-07-19 09:33:37.0196|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:33:37.0196|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 24.1165ms 
2023-07-19 09:33:37.5891|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - 
2023-07-19 09:33:37.5907|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\site.css' 
2023-07-19 09:33:37.5907|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - - 200 989 text/css 1.8058ms 
2023-07-19 09:33:38.1676|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-07-19 09:33:38.1754|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/LunchGroupDetails.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\LunchGroupDetails.css' 
2023-07-19 09:33:38.1754|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 200 575 text/css 7.9545ms 
2023-07-19 09:33:38.4500|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - 
2023-07-19 09:33:38.4500|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/InviteToLunchGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\InviteToLunchGroup.css' 
2023-07-19 09:33:38.4500|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - - 200 500 text/css 1.8118ms 
2023-07-19 09:33:38.4846|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - 
2023-07-19 09:33:38.4846|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/CreateLunchEventForGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\CreateLunchEventForGroup.css' 
2023-07-19 09:33:38.4846|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - - 200 899 text/css 1.5759ms 
2023-07-19 09:33:38.7518|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:33:38.7518|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 09:33:38.7518|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 200 10547 application/javascript 1.6095ms 
2023-07-19 09:33:39.0580|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=O7paXtEkOtF1Tgrw-qP_Sw99W0TVfHKOAXEEXUWTAAo - - 
2023-07-19 09:33:39.0595|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/invitetolunchgroup.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\invitetolunchgroup.js' 
2023-07-19 09:33:39.0595|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=O7paXtEkOtF1Tgrw-qP_Sw99W0TVfHKOAXEEXUWTAAo - - - 200 1056 application/javascript 1.6138ms 
2023-07-19 09:33:39.3911|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=9D1j3HYmLzv8Perh4e8GOcApjD6xoYa4ycA0p7DlBOY - - 
2023-07-19 09:33:39.3911|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/createevent.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\createevent.js' 
2023-07-19 09:33:39.3911|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=9D1j3HYmLzv8Perh4e8GOcApjD6xoYa4ycA0p7DlBOY - - - 200 10373 application/javascript 3.2553ms 
2023-07-19 09:33:54.1092|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:33:55.9761|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (30ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:33:56.0202|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:33:56.0202|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:33:56.0202|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:33:56.0481|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:33:56.0656|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:33:56.2386|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:33:56.2386|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:33:56.2386|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:33:56.2386|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:33:56.2386|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:33:56.9958|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:33:57.0906|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:33:57.1117|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:33:57.1429|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:33:57.1429|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 31.4539ms 
2023-07-19 09:33:57.1429|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:33:57.1670|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:33:57.1670|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 175.2991ms 
2023-07-19 09:33:57.1769|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:33:57.1769|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:33:57.4345|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:33:57.7608|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:33:57.7801|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:33:57.8390|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:33:57.8487|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:33:58.0100|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 167.1272ms. 
2023-07-19 09:33:58.0141|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 836.2103ms 
2023-07-19 09:33:58.0141|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:33:58.0447|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 877.5196ms 
2023-07-19 09:33:58.0447|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:33:58.0447|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.8670ms 
2023-07-19 09:33:58.0605|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:33:58.0763|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.8128ms 
2023-07-19 09:33:59.1708|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:33:59.1708|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:33:59.1708|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:33:59.2496|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:33:59.3061|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (41ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:33:59.3176|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:33:59.3257|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:33:59.3257|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:33:59.3394|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:33:59.4162|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 77.1865ms. 
2023-07-19 09:33:59.4162|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 237.2158ms 
2023-07-19 09:33:59.4162|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:33:59.4199|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 249.1551ms 
2023-07-19 09:33:59.4199|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:33:59.4199|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2697ms 
2023-07-19 09:33:59.4199|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=O7paXtEkOtF1Tgrw-qP_Sw99W0TVfHKOAXEEXUWTAAo - - 
2023-07-19 09:33:59.4199|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=9D1j3HYmLzv8Perh4e8GOcApjD6xoYa4ycA0p7DlBOY - - 
2023-07-19 09:33:59.4360|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/invitetolunchgroup.js was not modified 
2023-07-19 09:33:59.4360|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 09:33:59.4360|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=9D1j3HYmLzv8Perh4e8GOcApjD6xoYa4ycA0p7DlBOY - - - 304 - application/javascript 6.5036ms 
2023-07-19 09:33:59.4360|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=O7paXtEkOtF1Tgrw-qP_Sw99W0TVfHKOAXEEXUWTAAo - - - 304 - application/javascript 6.6207ms 
2023-07-19 09:33:59.4360|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:33:59.4360|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.1971ms 
2023-07-19 09:36:57.4287|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:36:57.4287|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:36:57.4287|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:36:57.4346|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:36:57.4346|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:36:57.4346|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:36:57.4346|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 13.6118ms. 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 18.3747ms 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 24.9749ms 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2241ms 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 304 - application/javascript 0.8576ms 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=O7paXtEkOtF1Tgrw-qP_Sw99W0TVfHKOAXEEXUWTAAo - - 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/invitetolunchgroup.js was not modified 
2023-07-19 09:36:57.4493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=O7paXtEkOtF1Tgrw-qP_Sw99W0TVfHKOAXEEXUWTAAo - - - 304 - application/javascript 0.3980ms 
2023-07-19 09:36:57.4711|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/createevent.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\createevent.js' 
2023-07-19 09:36:57.4711|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 200 9316 application/javascript 9.5522ms 
2023-07-19 09:36:57.4711|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:36:57.4711|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.8861ms 
2023-07-19 09:39:15.0720|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:39:16.8814|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:39:16.9205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:39:16.9205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:39:16.9205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:39:16.9451|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:39:16.9630|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:39:17.1363|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:39:17.1363|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:39:17.1378|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:39:17.1378|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:39:17.1378|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:39:17.6677|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:39:17.7623|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:39:17.7799|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:39:17.8117|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:39:17.8117|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 32.3261ms 
2023-07-19 09:39:17.8117|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:39:17.8365|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:39:17.8365|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 171.5340ms 
2023-07-19 09:39:17.8472|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:39:17.8472|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:39:18.0955|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:39:18.4008|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:39:18.4186|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:39:18.4751|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:39:18.4831|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:39:18.6203|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 141.3147ms. 
2023-07-19 09:39:18.6240|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 775.9175ms 
2023-07-19 09:39:18.6240|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:39:18.6576|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:39:18.6576|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:39:18.6576|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 821.6563ms 
2023-07-19 09:39:18.6576|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 3.7075ms 
2023-07-19 09:39:18.6576|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 09:39:18.6576|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 304 - application/javascript 6.3569ms 
2023-07-19 09:39:18.6704|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:39:18.6851|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 14.7080ms 
2023-07-19 09:39:19.9875|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:39:19.9875|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:39:19.9875|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:39:20.0635|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:39:20.1183|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (41ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:39:20.1284|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:39:20.1284|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:39:20.1402|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:39:20.1402|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:39:20.2207|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 72.1217ms. 
2023-07-19 09:39:20.2207|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 225.2578ms 
2023-07-19 09:39:20.2207|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:39:20.2207|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 237.0738ms 
2023-07-19 09:39:20.2330|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=BN9mhWBOiBFiD-j9XS4ZeRy1zt8QhluCSUqbm8pb-Yc - - 
2023-07-19 09:39:20.2330|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:39:20.2330|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3000ms 
2023-07-19 09:39:20.2330|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:39:20.2330|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 09:39:20.2330|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 304 - application/javascript 0.4370ms 
2023-07-19 09:39:20.2330|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/invitetolunchgroup.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\invitetolunchgroup.js' 
2023-07-19 09:39:20.2330|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=BN9mhWBOiBFiD-j9XS4ZeRy1zt8QhluCSUqbm8pb-Yc - - - 200 1074 application/javascript 9.3842ms 
2023-07-19 09:39:20.2330|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:39:20.2503|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.6974ms 
2023-07-19 09:42:27.9412|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:42:29.7683|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (29ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:42:29.8101|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:42:29.8101|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:42:29.8101|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:42:29.8360|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:42:29.8542|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:42:30.0203|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:42:30.0203|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:42:30.0203|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:42:30.0203|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:42:30.0203|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:42:30.6804|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:42:30.7759|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:42:30.7946|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:42:30.8273|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:42:30.8273|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 32.6341ms 
2023-07-19 09:42:30.8273|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:42:30.8544|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:42:30.8544|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 176.8408ms 
2023-07-19 09:42:30.8692|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:42:30.8692|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:42:31.1218|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:42:31.4373|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:42:31.4550|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:42:31.5173|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:42:31.5173|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:42:31.6660|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 145.1983ms. 
2023-07-19 09:42:31.6696|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 799.5175ms 
2023-07-19 09:42:31.6696|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:42:31.7016|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 847.1138ms 
2023-07-19 09:42:31.7016|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:42:31.7016|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:42:31.7016|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=Hgs-vqzjNH1507IuJozM8PMvdqaXnfHxU-cW_07pYsw - - 
2023-07-19 09:42:31.7016|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.8653ms 
2023-07-19 09:42:31.7016|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 09:42:31.7016|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 304 - application/javascript 7.2688ms 
2023-07-19 09:42:31.7177|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/invitetolunchgroup.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\invitetolunchgroup.js' 
2023-07-19 09:42:31.7177|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=Hgs-vqzjNH1507IuJozM8PMvdqaXnfHxU-cW_07pYsw - - - 200 1041 application/javascript 15.1121ms 
2023-07-19 09:42:31.7177|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:42:31.7340|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 13.0174ms 
2023-07-19 09:42:38.8580|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:42:38.8580|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:42:38.8580|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:42:38.9321|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:42:38.9852|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:42:38.9967|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:42:38.9967|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:42:38.9967|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:42:39.0189|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:42:39.0914|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 72.8781ms. 
2023-07-19 09:42:39.0914|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 225.5177ms 
2023-07-19 09:42:39.0914|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:42:39.0914|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 237.6867ms 
2023-07-19 09:42:39.0914|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=Hgs-vqzjNH1507IuJozM8PMvdqaXnfHxU-cW_07pYsw - - 
2023-07-19 09:42:39.0914|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:42:39.0914|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/invitetolunchgroup.js was not modified 
2023-07-19 09:42:39.0914|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2648ms 
2023-07-19 09:42:39.0914|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=Hgs-vqzjNH1507IuJozM8PMvdqaXnfHxU-cW_07pYsw - - - 304 - application/javascript 0.8228ms 
2023-07-19 09:42:39.0914|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:42:39.0914|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 09:42:39.0914|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 304 - application/javascript 0.4135ms 
2023-07-19 09:42:39.1143|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:42:39.1143|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.2680ms 
2023-07-19 09:43:02.1022|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:43:02.1054|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:43:02.1054|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:43:02.1054|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:43:02.1054|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:43:02.1054|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:43:02.1054|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:43:02.1054|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 9.8767ms. 
2023-07-19 09:43:02.1054|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 14.5307ms 
2023-07-19 09:43:02.1054|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:43:02.1254|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 23.2044ms 
2023-07-19 09:43:02.6886|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - 
2023-07-19 09:43:02.6886|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:43:02.6886|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=Hgs-vqzjNH1507IuJozM8PMvdqaXnfHxU-cW_07pYsw - - 
2023-07-19 09:43:02.6886|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\site.css' 
2023-07-19 09:43:02.6886|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 09:43:02.6886|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 200 10547 application/javascript 1.6208ms 
2023-07-19 09:43:02.6886|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - - 200 989 text/css 1.6400ms 
2023-07-19 09:43:02.6886|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/invitetolunchgroup.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\invitetolunchgroup.js' 
2023-07-19 09:43:02.6886|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=Hgs-vqzjNH1507IuJozM8PMvdqaXnfHxU-cW_07pYsw - - - 200 1041 application/javascript 9.2945ms 
2023-07-19 09:43:02.6886|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-07-19 09:43:02.7010|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/LunchGroupDetails.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\LunchGroupDetails.css' 
2023-07-19 09:43:02.7010|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 200 575 text/css 2.2608ms 
2023-07-19 09:43:02.7010|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - 
2023-07-19 09:43:02.7010|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/InviteToLunchGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\InviteToLunchGroup.css' 
2023-07-19 09:43:02.7010|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - - 200 500 text/css 1.8739ms 
2023-07-19 09:43:02.7222|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - 
2023-07-19 09:43:02.7222|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:43:02.7222|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/CreateLunchEventForGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\CreateLunchEventForGroup.css' 
2023-07-19 09:43:02.7222|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - - 200 899 text/css 1.8283ms 
2023-07-19 09:43:02.7222|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/createevent.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\createevent.js' 
2023-07-19 09:43:02.7222|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 200 9316 application/javascript 1.4485ms 
2023-07-19 09:43:02.8409|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:43:02.8409|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1717ms 
2023-07-19 09:43:04.1081|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:43:04.1081|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.7407ms 
2023-07-19 09:44:29.2810|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:44:31.1638|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (30ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:44:31.2083|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:44:31.2083|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:44:31.2083|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:44:31.2346|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:44:31.2529|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:44:31.4231|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:44:31.4231|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:44:31.4231|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:44:31.4231|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:44:31.4231|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:44:32.0263|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:44:32.1238|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:44:32.1427|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:44:32.1784|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:44:32.1784|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 36.7125ms 
2023-07-19 09:44:32.1784|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:44:32.2036|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:44:32.2036|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 180.5938ms 
2023-07-19 09:44:32.2160|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:44:32.2160|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:44:32.4647|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:44:32.7783|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:44:32.7949|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:44:32.8542|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:44:32.8630|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:44:32.9995|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 141.7855ms. 
2023-07-19 09:44:32.9995|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 786.4209ms 
2023-07-19 09:44:32.9995|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:44:33.0365|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 832.8593ms 
2023-07-19 09:44:33.0365|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=Hgs-vqzjNH1507IuJozM8PMvdqaXnfHxU-cW_07pYsw - - 
2023-07-19 09:44:33.0365|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:44:33.0365|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.2556ms 
2023-07-19 09:44:33.0438|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/invitetolunchgroup.js was not modified 
2023-07-19 09:44:33.0438|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/invitetolunchgroup.js?v=Hgs-vqzjNH1507IuJozM8PMvdqaXnfHxU-cW_07pYsw - - - 304 - application/javascript 7.2906ms 
2023-07-19 09:44:33.0438|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:44:33.0683|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 17.7846ms 
2023-07-19 09:44:35.0480|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:44:35.0480|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:44:35.0480|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:44:35.1245|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:44:35.1820|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (41ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:44:35.1931|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:44:35.2012|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:44:35.2012|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:44:35.2155|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:44:35.2879|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 72.7745ms. 
2023-07-19 09:44:35.2879|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 231.8781ms 
2023-07-19 09:44:35.2879|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:44:35.2879|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 243.5067ms 
2023-07-19 09:44:35.2989|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:44:35.2989|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.5973ms 
2023-07-19 09:44:35.2989|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:44:35.2989|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 09:44:35.2989|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 304 - application/javascript 0.9651ms 
2023-07-19 09:44:35.3099|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:44:35.3099|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.2317ms 
2023-07-19 09:45:22.1562|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:45:23.9877|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (29ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:45:24.0280|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:45:24.0280|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:45:24.0280|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:45:24.0538|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:45:24.0715|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:45:24.2429|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:45:24.2429|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:45:24.2429|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:45:24.2429|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:45:24.2429|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:45:24.8469|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:45:24.9454|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:45:24.9644|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:45:24.9986|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:45:24.9986|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 35.1169ms 
2023-07-19 09:45:24.9986|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:45:25.0237|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:45:25.0237|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 179.9311ms 
2023-07-19 09:45:25.0351|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:45:25.0351|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:45:25.2840|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:45:25.5965|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:45:25.6140|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:45:25.6714|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:45:25.6714|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:45:25.8148|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 139.556ms. 
2023-07-19 09:45:25.8148|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 782.2996ms 
2023-07-19 09:45:25.8148|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:45:25.8502|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:45:25.8502|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:45:25.8502|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 826.9082ms 
2023-07-19 09:45:25.8558|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.4418ms 
2023-07-19 09:45:25.8558|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 09:45:25.8558|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 304 - application/javascript 7.0346ms 
2023-07-19 09:45:25.8558|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:45:25.8822|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.2017ms 
2023-07-19 09:45:33.3209|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:45:33.3255|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:45:33.3255|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:45:33.3981|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:45:33.4511|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:45:33.4511|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:45:33.4698|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:45:33.4698|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:45:33.4834|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:45:33.5499|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 66.8401ms. 
2023-07-19 09:45:33.5499|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 221.2104ms 
2023-07-19 09:45:33.5499|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:45:33.5499|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 232.3355ms 
2023-07-19 09:45:33.5610|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:45:33.5610|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3727ms 
2023-07-19 09:45:33.5610|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:45:33.5610|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 09:45:33.5610|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 304 - application/javascript 0.5433ms 
2023-07-19 09:45:33.5610|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:45:33.5752|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.1553ms 
2023-07-19 09:45:55.4218|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Test - - 
2023-07-19 09:45:55.4218|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:45:55.4218|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:45:55.4419|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:45:55.4419|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:45:55.4699|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 46.1859ms 
2023-07-19 09:45:55.4699|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:45:55.4699|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Test - - - 200 - application/json;+charset=utf-8 48.2605ms 
2023-07-19 09:46:03.5110|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Tes - - 
2023-07-19 09:46:03.5117|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:03.5117|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:46:03.5117|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:46:03.5117|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:46:03.5117|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 4.4129ms 
2023-07-19 09:46:03.5117|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:03.5117|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Tes - - - 200 - application/json;+charset=utf-8 5.5620ms 
2023-07-19 09:46:03.6743|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Te - - 
2023-07-19 09:46:03.6743|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:03.6743|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:46:03.6743|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:46:03.6743|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:46:03.6743|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.5154ms 
2023-07-19 09:46:03.6743|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:03.6743|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Te - - - 200 - application/json;+charset=utf-8 2.3962ms 
2023-07-19 09:46:03.8313|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=T - - 
2023-07-19 09:46:03.8313|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:03.8313|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:46:03.8313|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:46:03.8313|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:46:03.8313|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1542ms 
2023-07-19 09:46:03.8313|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:03.8313|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=T - - - 200 - application/json;+charset=utf-8 1.7515ms 
2023-07-19 09:46:04.8048|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=u - - 
2023-07-19 09:46:04.8048|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:04.8048|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:46:04.8048|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:46:04.8048|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:46:04.8048|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.2416ms 
2023-07-19 09:46:04.8048|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:04.8048|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=u - - - 200 - application/json;+charset=utf-8 2.1299ms 
2023-07-19 09:46:05.1606|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=us - - 
2023-07-19 09:46:05.1606|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:05.1606|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:46:05.1606|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:46:05.1606|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:46:05.1606|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1616ms 
2023-07-19 09:46:05.1606|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:05.1606|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=us - - - 200 - application/json;+charset=utf-8 2.1349ms 
2023-07-19 09:46:05.3814|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=use - - 
2023-07-19 09:46:05.3814|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:05.3814|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:46:05.3814|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:46:05.3814|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:46:05.3814|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8305ms 
2023-07-19 09:46:05.3814|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:05.3814|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=use - - - 200 - application/json;+charset=utf-8 1.2690ms 
2023-07-19 09:46:05.5410|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=user - - 
2023-07-19 09:46:05.5410|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:05.5410|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:46:05.5410|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:46:05.5427|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:46:05.5427|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.2595ms 
2023-07-19 09:46:05.5427|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:05.5427|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=user - - - 200 - application/json;+charset=utf-8 2.0427ms 
2023-07-19 09:46:06.6745|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=useremail@gmail.com - - 
2023-07-19 09:46:06.6745|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:06.6745|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:46:06.6745|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:46:06.6745|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:46:06.6745|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0207ms 
2023-07-19 09:46:06.6745|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:46:06.6745|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=useremail@gmail.com - - - 200 - application/json;+charset=utf-8 1.8341ms 
2023-07-19 09:48:35.3929|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:48:35.3929|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:48:35.3929|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:48:35.3929|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:48:35.3929|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:48:35.3929|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:48:35.3929|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:48:35.4109|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 10.626ms. 
2023-07-19 09:48:35.4109|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 13.4275ms 
2023-07-19 09:48:35.4109|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:48:35.4109|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 22.7311ms 
2023-07-19 09:48:35.9962|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - 
2023-07-19 09:48:35.9962|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:48:35.9962|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\site.css' 
2023-07-19 09:48:35.9962|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 09:48:35.9962|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - - 200 989 text/css 10.4244ms 
2023-07-19 09:48:35.9962|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 200 10547 application/javascript 10.2692ms 
2023-07-19 09:48:36.0134|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-07-19 09:48:36.0134|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - 
2023-07-19 09:48:36.0134|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/InviteToLunchGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\InviteToLunchGroup.css' 
2023-07-19 09:48:36.0134|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/LunchGroupDetails.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\LunchGroupDetails.css' 
2023-07-19 09:48:36.0134|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - - 200 500 text/css 5.0142ms 
2023-07-19 09:48:36.0134|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 200 575 text/css 5.2764ms 
2023-07-19 09:48:36.0134|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - 
2023-07-19 09:48:36.0318|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/CreateLunchEventForGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\CreateLunchEventForGroup.css' 
2023-07-19 09:48:36.0318|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - - 200 899 text/css 7.8173ms 
2023-07-19 09:48:36.0318|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:48:36.0318|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/createevent.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\createevent.js' 
2023-07-19 09:48:36.0318|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 200 9316 application/javascript 1.7104ms 
2023-07-19 09:48:36.1483|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:48:36.1483|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.7098ms 
2023-07-19 09:48:37.4338|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:48:37.4338|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.1834ms 
2023-07-19 09:49:03.7853|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:49:03.7853|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:49:03.7916|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:49:03.7916|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:49:03.7916|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:49:03.7916|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:49:03.7916|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:49:03.7916|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 2.6383ms. 
2023-07-19 09:49:03.7916|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 4.5938ms 
2023-07-19 09:49:03.7916|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:49:03.7916|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 12.3979ms 
2023-07-19 09:49:03.8086|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:49:03.8086|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2616ms 
2023-07-19 09:49:03.8086|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:49:03.8243|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.2914ms 
2023-07-19 09:49:05.0846|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:49:05.0846|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:49:05.0846|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:49:05.0846|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:49:05.0846|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:49:05.0846|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:49:05.0846|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:49:05.0981|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 10.3999ms. 
2023-07-19 09:49:05.0981|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 12.4054ms 
2023-07-19 09:49:05.0981|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:49:05.0981|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 17.7048ms 
2023-07-19 09:49:05.1123|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:49:05.1123|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3141ms 
2023-07-19 09:49:05.1123|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:49:05.1265|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.8806ms 
2023-07-19 09:49:13.8330|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:49:13.8330|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:49:13.8330|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:49:13.8330|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:49:13.8330|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:49:13.8330|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:49:13.8330|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:49:13.8459|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 10.1805ms. 
2023-07-19 09:49:13.8459|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 11.921ms 
2023-07-19 09:49:13.8459|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:49:13.8459|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 16.0128ms 
2023-07-19 09:49:14.4207|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - 
2023-07-19 09:49:14.4207|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:49:14.4207|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\site.css' 
2023-07-19 09:49:14.4207|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - - 200 989 text/css 2.0263ms 
2023-07-19 09:49:14.4207|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 09:49:14.4207|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 200 10547 application/javascript 1.9941ms 
2023-07-19 09:49:14.4331|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-07-19 09:49:14.4331|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/LunchGroupDetails.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\LunchGroupDetails.css' 
2023-07-19 09:49:14.4331|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 200 575 text/css 1.5544ms 
2023-07-19 09:49:14.4331|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - 
2023-07-19 09:49:14.4331|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/InviteToLunchGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\InviteToLunchGroup.css' 
2023-07-19 09:49:14.4331|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - - 200 500 text/css 1.5159ms 
2023-07-19 09:49:14.4567|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - 
2023-07-19 09:49:14.4567|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/CreateLunchEventForGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\CreateLunchEventForGroup.css' 
2023-07-19 09:49:14.4567|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - - 200 899 text/css 1.7596ms 
2023-07-19 09:49:14.4652|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:49:14.4652|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/createevent.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\createevent.js' 
2023-07-19 09:49:14.4652|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 200 9316 application/javascript 1.5303ms 
2023-07-19 09:49:14.5737|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:49:14.5737|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3486ms 
2023-07-19 09:49:15.8337|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:49:15.8337|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.1648ms 
2023-07-19 09:50:07.1189|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/favicon.ico - - 
2023-07-19 09:50:07.1328|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/favicon.ico'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\favicon.ico' 
2023-07-19 09:50:07.1328|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/favicon.ico - - - 200 5430 image/x-icon 14.1260ms 
2023-07-19 09:51:01.8289|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Test - - 
2023-07-19 09:51:01.8289|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:51:01.8289|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:51:01.8401|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:51:01.8401|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:51:01.8401|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 3.8697ms 
2023-07-19 09:51:01.8401|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:51:01.8401|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Test - - - 200 - application/json;+charset=utf-8 11.3838ms 
2023-07-19 09:51:17.6766|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:51:17.6766|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:51:17.6766|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:51:17.6766|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:51:17.6766|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:51:17.6766|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:51:17.6766|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:51:17.6879|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 7.2465ms. 
2023-07-19 09:51:17.6879|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 9.9679ms 
2023-07-19 09:51:17.6879|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:51:17.7041|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 27.5554ms 
2023-07-19 09:51:17.7150|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:51:17.7150|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4425ms 
2023-07-19 09:51:17.7150|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:51:17.7150|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 09:51:17.7150|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 304 - application/javascript 0.3634ms 
2023-07-19 09:51:17.7296|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:51:17.7296|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.4962ms 
2023-07-19 09:51:37.0430|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:51:37.0430|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:51:37.0430|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:51:37.0430|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:51:37.0430|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:51:37.0430|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:51:37.0430|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:51:37.0585|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 9.328ms. 
2023-07-19 09:51:37.0585|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 14.1796ms 
2023-07-19 09:51:37.0585|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:51:37.0585|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 20.9174ms 
2023-07-19 09:51:37.6376|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - 
2023-07-19 09:51:37.6376|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:51:37.6376|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 09:51:37.6376|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\site.css' 
2023-07-19 09:51:37.6376|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 200 10547 application/javascript 3.1452ms 
2023-07-19 09:51:37.6376|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - - 200 989 text/css 6.0462ms 
2023-07-19 09:51:37.6511|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-07-19 09:51:37.6511|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - 
2023-07-19 09:51:37.6511|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/LunchGroupDetails.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\LunchGroupDetails.css' 
2023-07-19 09:51:37.6511|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/InviteToLunchGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\InviteToLunchGroup.css' 
2023-07-19 09:51:37.6511|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 200 575 text/css 2.1600ms 
2023-07-19 09:51:37.6511|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - - 200 500 text/css 2.0627ms 
2023-07-19 09:51:37.6680|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - 
2023-07-19 09:51:37.6680|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/CreateLunchEventForGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\CreateLunchEventForGroup.css' 
2023-07-19 09:51:37.6680|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - - 200 899 text/css 2.3808ms 
2023-07-19 09:51:37.6680|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:51:37.6680|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/createevent.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\createevent.js' 
2023-07-19 09:51:37.6680|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 200 9316 application/javascript 1.7732ms 
2023-07-19 09:51:37.7865|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:51:37.7865|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2712ms 
2023-07-19 09:51:39.0541|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:51:39.0576|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.4412ms 
2023-07-19 09:54:07.3917|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:54:09.2481|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:54:09.2869|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:54:09.2869|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:54:09.2869|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:54:09.3113|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:54:09.3292|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:54:09.4978|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:54:09.4978|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:54:09.4978|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:54:09.4978|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:54:09.4978|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:54:10.1215|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:54:10.2178|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:54:10.2360|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:54:10.2687|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:54:10.2687|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 33.2724ms 
2023-07-19 09:54:10.2687|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:54:10.2952|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:54:10.2952|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 176.3942ms 
2023-07-19 09:54:10.2952|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:54:10.2952|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:54:10.5439|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:54:10.8652|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:54:10.8828|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:54:10.9396|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:54:10.9486|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:54:11.0887|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 144.7917ms. 
2023-07-19 09:54:11.0887|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 787.0407ms 
2023-07-19 09:54:11.0887|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:54:11.1241|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 828.9035ms 
2023-07-19 09:54:11.1241|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:54:11.1241|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:54:11.1241|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.3682ms 
2023-07-19 09:54:11.1241|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 09:54:11.1241|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 304 - application/javascript 7.4724ms 
2023-07-19 09:54:11.1381|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:54:11.1531|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.0541ms 
2023-07-19 09:54:12.1834|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:54:12.1834|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:54:12.1834|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:54:12.2604|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:54:12.3148|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:54:12.3262|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:54:12.3262|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:54:12.3390|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:54:12.3390|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:54:12.4266|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 78.829ms. 
2023-07-19 09:54:12.4266|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 235.7148ms 
2023-07-19 09:54:12.4266|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:54:12.4266|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 246.8053ms 
2023-07-19 09:54:12.4377|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:54:12.4377|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4831ms 
2023-07-19 09:54:12.4377|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:54:12.4377|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 09:54:12.4377|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 304 - application/javascript 0.5757ms 
2023-07-19 09:54:12.4483|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:54:12.4483|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.3959ms 
2023-07-19 09:54:31.5965|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:54:33.5939|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (31ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:54:33.6366|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:54:33.6366|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:54:33.6366|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:54:33.6660|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:54:33.6853|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:54:33.8881|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:54:33.8881|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:54:33.8881|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:54:33.8881|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:54:33.8881|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:54:34.2105|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:54:34.3135|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:54:34.3339|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:54:34.3733|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:54:34.3733|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 39.8805ms 
2023-07-19 09:54:34.3733|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:54:34.3971|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:54:34.3971|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 190.1271ms 
2023-07-19 09:54:34.4072|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:54:34.4072|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:54:34.6710|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:54:35.0068|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:54:35.0246|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:54:35.0830|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:54:35.0906|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:54:35.2284|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 142.1057ms. 
2023-07-19 09:54:35.2324|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 824.2019ms 
2023-07-19 09:54:35.2324|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:54:35.2634|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 866.2150ms 
2023-07-19 09:54:35.2634|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:54:35.2634|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.9245ms 
2023-07-19 09:54:35.2781|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:54:35.2955|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 17.4299ms 
2023-07-19 09:54:41.6369|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:54:41.6369|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:54:41.6369|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:54:41.7146|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:54:41.7733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (41ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:54:41.7847|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:54:41.7926|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:54:41.7926|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:54:41.7926|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:54:41.8794|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 74.7979ms. 
2023-07-19 09:54:41.8794|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 233.974ms 
2023-07-19 09:54:41.8794|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:54:41.8794|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 245.9821ms 
2023-07-19 09:54:41.8910|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:54:41.8910|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3561ms 
2023-07-19 09:54:41.9029|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:54:41.9029|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.9086ms 
2023-07-19 09:54:52.3132|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 346 
2023-07-19 09:54:52.3132|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-07-19 09:54:52.3226|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:54:52.3502|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[GroupId], [t0].[Description], [t0].[GroupName]
FROM (
    SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [Users] AS [u]
    WHERE [u].[UserId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t0] ON [t].[UserId] = [t0].[UsersUserId]
ORDER BY [t].[UserId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-07-19 09:54:52.4743|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-07-19 09:54:52.5323|INFO|Lunch_Tinder.Services.MailService|initiating send mail async method 
2023-07-19 09:54:54.5358|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/DisplayGroups?groupName=Software%20Development. 
2023-07-19 09:54:54.5358|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 2213.3767ms 
2023-07-19 09:54:54.5358|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-07-19 09:54:54.5358|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 346 - 302 0 - 2223.0927ms 
2023-07-19 09:54:54.5358|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:54:54.5358|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:54:54.5358|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:54:54.5426|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:54:54.5426|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:54:54.5426|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:54:54.5426|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:54:54.5426|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 8.1647ms. 
2023-07-19 09:54:54.5426|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 12.5966ms 
2023-07-19 09:54:54.5426|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:54:54.5426|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 16.8196ms 
2023-07-19 09:54:54.5805|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:54:54.5805|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:54:54.5805|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4926ms 
2023-07-19 09:54:54.5805|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.4034ms 
2023-07-19 09:57:04.9119|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:57:06.8592|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (34ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:57:06.9027|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:57:06.9027|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:57:06.9027|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:57:06.9286|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:57:06.9462|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:57:07.1161|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:57:07.1161|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:57:07.1161|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:57:07.1161|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:57:07.1161|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:57:07.4907|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:57:07.5856|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:57:07.6049|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:57:07.6376|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:57:07.6376|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 33.255ms 
2023-07-19 09:57:07.6376|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:57:07.6635|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:57:07.6635|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 175.3381ms 
2023-07-19 09:57:07.6895|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:57:07.6895|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:07.9679|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:57:08.3307|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:57:08.3489|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:57:08.4114|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:57:08.4190|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:57:08.5536|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 138.7947ms. 
2023-07-19 09:57:08.5574|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 866.9045ms 
2023-07-19 09:57:08.5574|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:57:08.5885|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 925.0180ms 
2023-07-19 09:57:08.5885|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:57:08.5885|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:57:08.5885|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.2840ms 
2023-07-19 09:57:08.5885|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 09:57:08.5885|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 304 - application/javascript 6.5616ms 
2023-07-19 09:57:08.6046|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:57:08.6046|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 14.3181ms 
2023-07-19 09:57:09.5456|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:57:09.5456|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:57:09.5456|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:09.6261|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:57:09.6803|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:57:09.6912|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:57:09.6995|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:57:09.6995|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:57:09.7137|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:57:09.7881|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 74.7888ms. 
2023-07-19 09:57:09.7881|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 235.1882ms 
2023-07-19 09:57:09.7881|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:57:09.7920|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 246.3457ms 
2023-07-19 09:57:09.7920|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:57:09.7920|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3482ms 
2023-07-19 09:57:09.7920|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:57:09.7920|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 09:57:09.7920|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 304 - application/javascript 0.7015ms 
2023-07-19 09:57:09.8121|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:57:09.8121|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.2721ms 
2023-07-19 09:57:29.6805|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:57:29.6805|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:57:29.6838|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:29.6838|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:57:29.6838|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:57:29.6838|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:57:29.6838|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:57:29.7134|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 25.305ms. 
2023-07-19 09:57:29.7134|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 29.6239ms 
2023-07-19 09:57:29.7134|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:57:29.7134|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 37.9515ms 
2023-07-19 09:57:29.7134|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:57:29.7134|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:57:29.7134|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3361ms 
2023-07-19 09:57:29.7305|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.1860ms 
2023-07-19 09:57:34.9587|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=i - - 
2023-07-19 09:57:34.9587|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:34.9587|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:34.9807|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:57:34.9807|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:57:35.0071|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 44.6089ms 
2023-07-19 09:57:35.0071|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.0071|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=i - - - 200 - application/json;+charset=utf-8 49.3244ms 
2023-07-19 09:57:35.1932|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iy - - 
2023-07-19 09:57:35.1932|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.1932|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:35.1932|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:57:35.1932|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:57:35.1932|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9954ms 
2023-07-19 09:57:35.1932|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.1932|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iy - - - 200 - application/json;+charset=utf-8 1.5388ms 
2023-07-19 09:57:35.2700|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyu - - 
2023-07-19 09:57:35.2700|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.2700|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:35.2700|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:57:35.2700|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:57:35.2700|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9247ms 
2023-07-19 09:57:35.2700|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.2700|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyu - - - 200 - application/json;+charset=utf-8 1.5312ms 
2023-07-19 09:57:35.3038|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyui - - 
2023-07-19 09:57:35.3038|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.3038|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:35.3038|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:57:35.3038|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:57:35.3038|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9443ms 
2023-07-19 09:57:35.3038|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.3038|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyui - - - 200 - application/json;+charset=utf-8 1.4893ms 
2023-07-19 09:57:35.4105|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyuiu - - 
2023-07-19 09:57:35.4105|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.4105|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:35.4105|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:57:35.4105|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:57:35.4105|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8322ms 
2023-07-19 09:57:35.4105|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.4105|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyuiu - - - 200 - application/json;+charset=utf-8 1.2621ms 
2023-07-19 09:57:35.4838|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyuiuy - - 
2023-07-19 09:57:35.4838|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.4838|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:35.4838|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:57:35.4838|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:57:35.4838|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9593ms 
2023-07-19 09:57:35.4838|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.4838|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyuiuy - - - 200 - application/json;+charset=utf-8 1.4586ms 
2023-07-19 09:57:35.5744|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyuiuyi - - 
2023-07-19 09:57:35.5744|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.5744|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:35.5744|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:57:35.5744|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:57:35.5744|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8677ms 
2023-07-19 09:57:35.5744|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.5744|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyuiuyi - - - 200 - application/json;+charset=utf-8 1.3782ms 
2023-07-19 09:57:35.7116|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyuiuyiy - - 
2023-07-19 09:57:35.7116|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.7116|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:35.7116|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:57:35.7116|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:57:35.7116|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9588ms 
2023-07-19 09:57:35.7116|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.7116|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyuiuyiy - - - 200 - application/json;+charset=utf-8 1.4363ms 
2023-07-19 09:57:35.7282|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyuiuyiyu - - 
2023-07-19 09:57:35.7282|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.7282|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:35.7293|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:57:35.7293|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:57:35.7293|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8638ms 
2023-07-19 09:57:35.7293|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:35.7293|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyuiuyiyu - - - 200 - application/json;+charset=utf-8 1.3266ms 
2023-07-19 09:57:36.7999|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyuiuyiy - - 
2023-07-19 09:57:36.7999|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:36.7999|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:36.7999|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:57:36.7999|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:57:36.7999|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9241ms 
2023-07-19 09:57:36.7999|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:36.7999|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iyuiuyiy - - - 200 - application/json;+charset=utf-8 1.5218ms 
2023-07-19 09:57:49.2288|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:57:49.2299|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:57:49.2299|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:49.2299|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:57:49.2299|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:57:49.2299|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:57:49.2299|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:57:49.2581|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 23.8196ms. 
2023-07-19 09:57:49.2581|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 25.887ms 
2023-07-19 09:57:49.2581|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:57:49.2640|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 35.2897ms 
2023-07-19 09:57:49.2842|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:57:49.2842|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:57:49.2842|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.6116ms 
2023-07-19 09:57:49.2842|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.9445ms 
2023-07-19 09:57:54.8131|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Test - - 
2023-07-19 09:57:54.8131|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:54.8131|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:57:54.8131|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 09:57:54.8131|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 09:57:54.8131|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1977ms 
2023-07-19 09:57:54.8131|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 09:57:54.8131|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Test - - - 200 - application/json;+charset=utf-8 4.7419ms 
2023-07-19 09:58:06.5744|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:58:06.5744|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:58:06.5744|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:58:06.5744|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:58:06.5744|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:58:06.5744|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:58:06.5744|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:58:06.5744|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 7.2657ms. 
2023-07-19 09:58:06.5744|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 10.483ms 
2023-07-19 09:58:06.5744|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:58:06.5903|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 15.9984ms 
2023-07-19 09:58:07.1661|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - 
2023-07-19 09:58:07.1661|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:58:07.1758|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\site.css' 
2023-07-19 09:58:07.1758|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 09:58:07.1758|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - - 200 989 text/css 9.8652ms 
2023-07-19 09:58:07.1758|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 200 10547 application/javascript 9.7994ms 
2023-07-19 09:58:07.1758|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-07-19 09:58:07.1758|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/LunchGroupDetails.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\LunchGroupDetails.css' 
2023-07-19 09:58:07.1758|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 200 575 text/css 1.1266ms 
2023-07-19 09:58:07.1842|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - 
2023-07-19 09:58:07.1842|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/InviteToLunchGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\InviteToLunchGroup.css' 
2023-07-19 09:58:07.1842|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - - 200 500 text/css 8.2674ms 
2023-07-19 09:58:07.2008|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - 
2023-07-19 09:58:07.2008|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/CreateLunchEventForGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\CreateLunchEventForGroup.css' 
2023-07-19 09:58:07.2008|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - - 200 899 text/css 2.1851ms 
2023-07-19 09:58:07.2008|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:58:07.2008|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/createevent.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\createevent.js' 
2023-07-19 09:58:07.2008|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 200 9316 application/javascript 1.8822ms 
2023-07-19 09:58:07.3225|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:58:07.3231|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.7372ms 
2023-07-19 09:58:08.5903|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:58:08.5903|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.5198ms 
2023-07-19 09:58:46.6444|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 09:58:48.4716|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (30ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:58:48.5146|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:58:48.5146|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 09:58:48.5146|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 09:58:48.5398|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 09:58:48.5578|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 09:58:48.7165|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 09:58:48.7165|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 09:58:48.7165|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 09:58:48.7165|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 09:58:48.7165|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 09:58:49.4372|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 09:58:49.5340|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:58:49.5527|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 09:58:49.5846|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 09:58:49.5846|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 32.2504ms 
2023-07-19 09:58:49.5846|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 09:58:49.6099|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 09:58:49.6099|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 176.3254ms 
2023-07-19 09:58:49.6349|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:58:49.6358|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:58:49.8768|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 09:58:50.1856|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:58:50.2028|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 09:58:50.2597|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 09:58:50.2671|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 09:58:50.3979|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 134.8349ms. 
2023-07-19 09:58:50.4016|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 765.7846ms 
2023-07-19 09:58:50.4016|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 09:58:50.4320|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 822.0854ms 
2023-07-19 09:58:50.4329|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:58:50.4329|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.0827ms 
2023-07-19 09:58:50.4329|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:58:50.4584|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 14.2036ms 
2023-07-19 09:58:51.7993|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:58:51.7993|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:58:51.7993|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:58:51.8764|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:58:51.9314|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (41ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:58:51.9422|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 09:58:51.9503|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:58:51.9503|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:58:51.9641|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:58:52.0334|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 69.6772ms. 
2023-07-19 09:58:52.0334|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 226.55ms 
2023-07-19 09:58:52.0334|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:58:52.0334|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 237.5387ms 
2023-07-19 09:58:52.0452|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:58:52.0452|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2838ms 
2023-07-19 09:58:52.0452|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:58:52.0577|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.8975ms 
2023-07-19 09:58:59.7612|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 09:58:59.7612|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:58:59.7612|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 09:58:59.7612|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 09:58:59.7612|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 09:58:59.7612|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 09:58:59.7612|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 09:58:59.7784|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 11.6301ms. 
2023-07-19 09:58:59.7784|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 16.1711ms 
2023-07-19 09:58:59.7784|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 09:58:59.7784|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 20.8170ms 
2023-07-19 09:59:00.3564|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - 
2023-07-19 09:59:00.3564|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 09:59:00.3701|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\site.css' 
2023-07-19 09:59:00.3701|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-07-19 09:59:00.3701|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 09:59:00.3701|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - - 200 989 text/css 13.7703ms 
2023-07-19 09:59:00.3701|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 200 10547 application/javascript 13.5288ms 
2023-07-19 09:59:00.3701|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/LunchGroupDetails.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\LunchGroupDetails.css' 
2023-07-19 09:59:00.3701|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 200 575 text/css 1.1590ms 
2023-07-19 09:59:00.3701|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - 
2023-07-19 09:59:00.3701|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/InviteToLunchGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\InviteToLunchGroup.css' 
2023-07-19 09:59:00.3701|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - - 200 500 text/css 9.2439ms 
2023-07-19 09:59:00.3901|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - 
2023-07-19 09:59:00.3901|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/CreateLunchEventForGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\CreateLunchEventForGroup.css' 
2023-07-19 09:59:00.3901|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - - 200 899 text/css 2.9258ms 
2023-07-19 09:59:00.3901|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 09:59:00.4009|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/createevent.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\createevent.js' 
2023-07-19 09:59:00.4009|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 200 9316 application/javascript 1.6185ms 
2023-07-19 09:59:00.5152|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 09:59:00.5152|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.9739ms 
2023-07-19 09:59:01.7766|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 09:59:01.7766|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.7122ms 
2023-07-19 09:59:06.5755|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/favicon.ico - - 
2023-07-19 09:59:06.5755|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/favicon.ico'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\favicon.ico' 
2023-07-19 09:59:06.5755|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/favicon.ico - - - 200 5430 image/x-icon 2.5421ms 
2023-07-19 10:03:35.6660|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 10:03:37.7550|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (33ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:03:37.8025|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (24ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:03:37.8025|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:03:37.8025|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:03:37.8334|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 10:03:37.8537|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 10:03:38.0488|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 10:03:38.0488|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 10:03:38.0488|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 10:03:38.0488|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 10:03:38.0488|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 10:03:38.6568|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 10:03:38.7658|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:03:38.7870|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 10:03:38.8277|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 10:03:38.8277|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 41.1097ms 
2023-07-19 10:03:38.8277|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:03:38.8547|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 10:03:38.8547|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 201.9744ms 
2023-07-19 10:03:38.8547|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:03:38.8547|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:03:39.1489|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:03:39.5280|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:03:39.5461|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 10:03:39.6086|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 10:03:39.6086|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 10:03:39.7684|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 155.3534ms. 
2023-07-19 10:03:39.7684|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 903.4023ms 
2023-07-19 10:03:39.7684|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:03:39.8057|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 10:03:39.8057|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:03:39.8057|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 951.0647ms 
2023-07-19 10:03:39.8132|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 7.4464ms 
2023-07-19 10:03:39.8132|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 10:03:39.8132|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 304 - application/javascript 11.1854ms 
2023-07-19 10:03:39.8273|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:03:39.8470|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 19.7015ms 
2023-07-19 10:03:42.1454|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:03:42.1454|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:03:42.1533|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:03:42.2409|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:03:42.3169|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (53ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:03:42.3298|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:03:42.3389|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:03:42.3389|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:03:42.3389|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:03:42.4320|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 78.3701ms. 
2023-07-19 10:03:42.4320|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 278.8039ms 
2023-07-19 10:03:42.4320|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:03:42.4320|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 290.4908ms 
2023-07-19 10:03:42.4320|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:03:42.4320|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3828ms 
2023-07-19 10:03:42.4320|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 10:03:42.4320|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 10:03:42.4320|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 304 - application/javascript 0.4095ms 
2023-07-19 10:03:42.4553|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:03:42.4553|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.6318ms 
2023-07-19 10:03:53.4632|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:03:53.4651|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:03:53.4651|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:03:53.4651|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:03:53.4651|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:03:53.4651|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:03:53.4651|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:03:53.4842|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 12.1652ms. 
2023-07-19 10:03:53.4842|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 18.9175ms 
2023-07-19 10:03:53.4842|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:03:53.4842|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 24.2686ms 
2023-07-19 10:03:54.0513|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - 
2023-07-19 10:03:54.0513|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 10:03:54.0639|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 10:03:54.0639|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\site.css' 
2023-07-19 10:03:54.0639|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - - 200 989 text/css 12.8689ms 
2023-07-19 10:03:54.0639|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 200 10547 application/javascript 12.3465ms 
2023-07-19 10:03:54.0639|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-07-19 10:03:54.0639|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/LunchGroupDetails.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\LunchGroupDetails.css' 
2023-07-19 10:03:54.0639|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 200 575 text/css 1.3078ms 
2023-07-19 10:03:54.0639|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - 
2023-07-19 10:03:54.0823|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/InviteToLunchGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\InviteToLunchGroup.css' 
2023-07-19 10:03:54.0823|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - - 200 500 text/css 9.9352ms 
2023-07-19 10:03:54.0883|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - 
2023-07-19 10:03:54.0883|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/CreateLunchEventForGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\CreateLunchEventForGroup.css' 
2023-07-19 10:03:54.0883|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - - 200 899 text/css 2.6016ms 
2023-07-19 10:03:54.0883|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 10:03:54.0883|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/createevent.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\createevent.js' 
2023-07-19 10:03:54.0883|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 200 9316 application/javascript 2.3471ms 
2023-07-19 10:03:54.2069|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:03:54.2069|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3963ms 
2023-07-19 10:03:55.4660|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:03:55.4660|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.1388ms 
2023-07-19 10:07:39.4073|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 10:07:41.5175|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (32ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:07:41.5661|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (25ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:07:41.5661|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:07:41.5661|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:07:41.5953|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 10:07:41.6149|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 10:07:41.7987|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 10:07:41.7987|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 10:07:41.7987|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 10:07:41.7987|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 10:07:41.7987|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 10:07:42.2962|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 10:07:42.4078|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:07:42.4284|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 10:07:42.4654|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 10:07:42.4654|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 37.467ms 
2023-07-19 10:07:42.4654|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:07:42.4943|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 10:07:42.4947|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 201.7787ms 
2023-07-19 10:07:42.5157|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:07:42.5157|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:07:42.7864|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:43.1421|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:07:43.1611|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 10:07:43.2234|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 10:07:43.2314|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 10:07:43.3747|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 147.4043ms. 
2023-07-19 10:07:43.3747|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 862.1306ms 
2023-07-19 10:07:43.3747|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:07:43.4147|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 920.3025ms 
2023-07-19 10:07:43.4147|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 10:07:43.4147|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:07:43.4213|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.4383ms 
2023-07-19 10:07:43.4213|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 10:07:43.4213|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 304 - application/javascript 8.1712ms 
2023-07-19 10:07:43.4213|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:07:43.4425|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.2574ms 
2023-07-19 10:07:44.7474|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:07:44.7474|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:07:44.7474|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:07:44.8269|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:07:44.8845|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (42ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:07:44.8989|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:07:44.9094|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:07:44.9094|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:44.9233|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:07:45.0083|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 86.0074ms. 
2023-07-19 10:07:45.0083|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 253.3505ms 
2023-07-19 10:07:45.0083|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:07:45.0121|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 264.6336ms 
2023-07-19 10:07:45.0121|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:07:45.0121|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4709ms 
2023-07-19 10:07:45.0121|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 10:07:45.0121|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 10:07:45.0121|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 304 - application/javascript 0.7306ms 
2023-07-19 10:07:45.0307|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:07:45.0307|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.3293ms 
2023-07-19 10:07:53.4345|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=d - - 
2023-07-19 10:07:53.4345|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:53.4345|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:07:53.4345|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ds - - 
2023-07-19 10:07:53.4345|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:53.4345|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:07:53.4581|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:07:53.4581|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:07:53.4581|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:07:53.4581|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:07:53.4856|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 49.4556ms 
2023-07-19 10:07:53.4856|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:53.4856|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 39.7852ms 
2023-07-19 10:07:53.4856|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:53.4856|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=d - - - 200 - application/json;+charset=utf-8 51.3577ms 
2023-07-19 10:07:53.4856|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ds - - - 200 - application/json;+charset=utf-8 40.5191ms 
2023-07-19 10:07:53.5646|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsf - - 
2023-07-19 10:07:53.5646|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:53.5646|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:07:53.5646|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:07:53.5646|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:07:53.5646|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1502ms 
2023-07-19 10:07:53.5646|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:53.5646|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsf - - - 200 - application/json;+charset=utf-8 1.8271ms 
2023-07-19 10:07:54.0235|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsfd - - 
2023-07-19 10:07:54.0235|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:54.0235|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:07:54.0235|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:07:54.0235|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:07:54.0235|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9943ms 
2023-07-19 10:07:54.0235|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:54.0235|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsfd - - - 200 - application/json;+charset=utf-8 1.4939ms 
2023-07-19 10:07:54.0378|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsfds - - 
2023-07-19 10:07:54.0378|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:54.0378|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:07:54.0457|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:07:54.0457|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:07:54.0457|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 7.5547ms 
2023-07-19 10:07:54.0457|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:54.0457|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsfds - - - 200 - application/json;+charset=utf-8 8.4033ms 
2023-07-19 10:07:54.2298|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsfdsf - - 
2023-07-19 10:07:54.2298|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:54.2298|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:07:54.2298|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:07:54.2298|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:07:54.2298|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9221ms 
2023-07-19 10:07:54.2298|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:54.2298|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsfdsf - - - 200 - application/json;+charset=utf-8 1.6308ms 
2023-07-19 10:07:54.3813|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsfdsfd - - 
2023-07-19 10:07:54.3813|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:54.3813|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:07:54.3813|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:07:54.3813|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:07:54.3813|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1041ms 
2023-07-19 10:07:54.3813|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:07:54.3813|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsfdsfd - - - 200 - application/json;+charset=utf-8 1.8389ms 
2023-07-19 10:07:55.9396|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 337 
2023-07-19 10:07:55.9396|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-07-19 10:07:55.9502|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:07:55.9796|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[GroupId], [t0].[Description], [t0].[GroupName]
FROM (
    SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [Users] AS [u]
    WHERE [u].[UserId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t0] ON [t].[UserId] = [t0].[UsersUserId]
ORDER BY [t].[UserId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-07-19 10:07:55.9796|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__username_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[UserName] = @__username_0 
2023-07-19 10:07:56.1047|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-07-19 10:07:56.1275|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 337 
2023-07-19 10:07:56.1275|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-07-19 10:07:56.1275|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:07:56.1530|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[GroupId], [t0].[Description], [t0].[GroupName]
FROM (
    SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [Users] AS [u]
    WHERE [u].[UserId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t0] ON [t].[UserId] = [t0].[UsersUserId]
ORDER BY [t].[UserId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-07-19 10:07:56.1530|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__username_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[UserName] = @__username_0 
2023-07-19 10:07:56.1530|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-07-19 10:07:56.2659|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.2659|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.2659|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.2659|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.2780|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.2927|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.2927|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.3590|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.3590|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.3590|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.3590|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.3590|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.3590|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.3590|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.3825|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.3825|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.3825|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.3825|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.3825|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.3825|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.3825|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.3889|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.3889|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.3889|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.3889|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.3889|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.3889|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.3889|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.2352|ERROR|Microsoft.EntityFrameworkCore.Update|An exception occurred in the database while saving changes for context type 'Lunch_Tinder.Data.LunchTinderContext'.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Microsoft.Data.SqlClient.SqlException (0x80131904): Cannot insert the value NULL into column 'UsernameEmail', table 'LunchTinderDB.dbo.InvitesLG'; column does not allow nulls. INSERT fails.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.Read()
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSet(Int32 startCommandIndex, RelationalDataReader reader)
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)
ClientConnectionId:3eb94a88-43f8-427a-9b26-183b784d296e
Error Number:515,State:2,Class:16
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(StateManager stateManager, Boolean acceptAllChangesOnSuccess)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess) {"Type":"Microsoft.EntityFrameworkCore.DbUpdateException", "Entries":[{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":[], "Events":[]}], "Vote":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":[{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":[], "Events":[]}], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"04fd22a8-840e-494d-b777-48922e5050b1", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482647, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482647, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":["Lunch_Tinder.Models.Vote"]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":["Lunch_Tinder.Models.Vote"]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"04fd22a8-840e-494d-b777-48922e5050b1", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482647, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482647, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482647, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482647, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}}], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":["Lunch_Tinder.Models.Vote"]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":["Lunch_Tinder.Models.Vote"]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"04fd22a8-840e-494d-b777-48922e5050b1", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482647, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482647, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482647, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482647, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}}], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":["Lunch_Tinder.Models.Vote"]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":["Lunch_Tinder.Models.Vote"]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"04fd22a8-840e-494d-b777-48922e5050b1", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "IsReadOnly":false}, "IsKeySet":false}}], "IsKeySet":false}], "Message":"An error occurred while saving the entity changes. See the inner exception for details.", "Source":"Microsoft.EntityFrameworkCore.Relational", "HResult":-2146233088, "StackTrace":"   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(StateManager stateManager, Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)"}
2023-07-19 10:07:56.5718|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.5718|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.5718|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.5718|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.5718|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.5733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.5926|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.5926|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.5926|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.5926|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.5926|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.5926|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.5926|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.2352|ERROR|Microsoft.EntityFrameworkCore.Update|An exception occurred in the database while saving changes for context type 'Lunch_Tinder.Data.LunchTinderContext'.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Microsoft.Data.SqlClient.SqlException (0x80131904): Cannot insert the value NULL into column 'UsernameEmail', table 'LunchTinderDB.dbo.InvitesLG'; column does not allow nulls. INSERT fails.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.Read()
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSet(Int32 startCommandIndex, RelationalDataReader reader)
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)
ClientConnectionId:3eb94a88-43f8-427a-9b26-183b784d296e
Error Number:515,State:2,Class:16
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(StateManager stateManager, Boolean acceptAllChangesOnSuccess)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess) {"Type":"Microsoft.EntityFrameworkCore.DbUpdateException", "Entries":[{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":[], "Events":[]}], "Vote":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":[{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":[], "Events":[]}], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482646, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482646, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":["Lunch_Tinder.Models.Vote"]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":["Lunch_Tinder.Models.Vote"]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482646, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482646, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482646, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482646, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}}], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":["Lunch_Tinder.Models.Vote"]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":["Lunch_Tinder.Models.Vote"]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482646, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482646, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482646, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482646, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}}], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":["Lunch_Tinder.Models.Vote"]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":["Lunch_Tinder.Models.Vote"]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "IsReadOnly":false}, "IsKeySet":false}}], "IsKeySet":false}], "Message":"An error occurred while saving the entity changes. See the inner exception for details.", "Source":"Microsoft.EntityFrameworkCore.Relational", "HResult":-2146233088, "StackTrace":"   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(StateManager stateManager, Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)"}
2023-07-19 10:07:56.5926|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (24ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.6875|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.6987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.5733|ERROR|Lunch_Tinder.Data.LunchTinderContext|Failed to add the invite to the lunch group {"Type":"Microsoft.EntityFrameworkCore.DbUpdateException", "Entries":[{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":[], "Events":[]}], "Vote":[{"VoteId":6, "UserVoteID":2, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":[{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[{"VoteId":6, "UserVoteID":2, "RestaurantVoteID":1, "Restaurant":"Lunch_Tinder.Models.Restaurant", "EventVoteID":30, "Event":"Lunch_Tinder.Models.Event"}]}], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30}]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":[], "Events":[]}], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"04fd22a8-840e-494d-b777-48922e5050b1", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482647, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482647, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":["Lunch_Tinder.Models.Vote"]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":["Lunch_Tinder.Models.Vote"]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"04fd22a8-840e-494d-b777-48922e5050b1", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482647, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482647, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482647, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482647, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}}], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":["Lunch_Tinder.Models.Vote"]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":["Lunch_Tinder.Models.Vote"]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"04fd22a8-840e-494d-b777-48922e5050b1", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482647, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482647, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482647, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482647, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"04fd22a8-840e-494d-b777-48922e5050b1:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}}], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482647} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":["Lunch_Tinder.Models.Vote"]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":["Lunch_Tinder.Models.Vote"]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\n  InviteID: -2147482647 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482647} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"04fd22a8-840e-494d-b777-48922e5050b1", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "IsReadOnly":false}, "IsKeySet":false}}], "IsKeySet":false}], "Message":"An error occurred while saving the entity changes. See the inner exception for details.", "Source":"Microsoft.EntityFrameworkCore.Relational", "HResult":-2146233088, "StackTrace":"   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(StateManager stateManager, Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Lunch_Tinder.Data.LunchTinderContext.AddInviteToLunchGroup(InviteToLunchGroup invite) in C:\\Users\\ewalsh\\source\\repos\\Lunch Tinder\\Lunch Tinder\\Lunch Tinder\\Data\\LunchGroupServices.cs:line 136"}
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.7187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.7383|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.7383|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.7449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.7449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.7449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.7449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.7449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.7449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-07-19 10:07:56.7449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-07-19 10:07:56.7449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:07:56.7449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.7449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-07-19 10:07:56.7449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-07-19 10:07:56.7449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-07-19 10:07:56.6875|ERROR|Lunch_Tinder.Data.LunchTinderContext|Failed to add the invite to the lunch group {"Type":"Microsoft.EntityFrameworkCore.DbUpdateException", "Entries":[{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":[], "Events":[]}], "Vote":[{"VoteId":6, "UserVoteID":2, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":[{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[{"VoteId":6, "UserVoteID":2, "RestaurantVoteID":1, "Restaurant":"Lunch_Tinder.Models.Restaurant", "EventVoteID":30, "Event":"Lunch_Tinder.Models.Event"}]}], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30}]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":[], "Events":[]}], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482646, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "DebugView":{"LongView":"InviteID PK", "ShortView":"InviteID PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482646, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":["Lunch_Tinder.Models.Vote"]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":["Lunch_Tinder.Models.Vote"]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482646, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482646, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482646, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482646, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}}], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":["Lunch_Tinder.Models.Vote"]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":["Lunch_Tinder.Models.Vote"]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482646, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482646, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":true, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "OriginalValue":-2147482646, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false}, "CurrentValue":-2147482646, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "OriginalValue":"Software Development", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false}, "CurrentValue":"Software Development", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}, "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae:0"}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: InviteToLunchGroup"}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}}], "References":[], "Collections":[], "IsKeySet":false, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: InviteToLunchGroup", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: InviteToLunchGroup.InviteID PK"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"}, "Name":"InviteID", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"LunchGroupName (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupName (string) Required"}, "Name":"LunchGroupName", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.String]"}, "DebugView":{"LongView":"UsernameEmail (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsernameEmail (string) Required"}, "Name":"UsernameEmail", "IsReadOnly":false}], "EntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}}, "DebugView":{"LongView":"InviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>", "ShortView":"InviteToLunchGroup {InviteID: -2147482646} Added"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "OriginalValue":"Pending", "Metadata":{"DeclaringEntityType":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.InviteToLunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    LunchGroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Status (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsernameEmail (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    InviteID PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: InvitesLG\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: InviteToLunchGroup\r\n  Properties: \r\n    InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    LunchGroupName (string) Required\r\n    Status (string) Required\r\n    UsernameEmail (string) Required\r\n  Keys: \r\n    InviteID PK"}, "IsReadOnly":false}, "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"nvarchar(max)", "StoreTypeNameBase":"nvarchar", "DbType":"String", "IsUnicode":true, "IsFixedLength":false, "ClrType":"System.String", "Comparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.String", "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.String,System.String,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"NodeType":"Equal", "Type":"System.Boolean", "CanReduce":false, "Right":"v2", "Left":"v1", "Method":"Boolean op_Equality(System.String, System.String)", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.String,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"ArgumentCount":0, "NodeType":"Call", "Type":"System.Int32", "Method":"Int32 GetHashCode()", "Object":"Convert(v, Object)", "Arguments":[], "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.String,System.String]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.String", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.String", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"Status (string) Required\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"Status (string) Required"}, "Name":"Status", "IsReadOnly":false}, "CurrentValue":"Pending", "EntityEntry":{"Entity":{"InviteID":0, "LunchGroupName":"Software Development", "Status":"Pending"}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW", "UserType":"USER", "LunchGroups":[], "Vote":[]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"], "Vote":["Lunch_Tinder.Models.Vote"]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We code", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":29, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,Delish Cafe", "EventStartTime":"2023-07-12 20:30:00 +01:00", "EventEndTime":"2023-07-12 20:00:00 +01:00", "VotingStartTime":"2023-07-12 18:30:00 +01:00", "VotingEndTime":"2023-07-12 20:00:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":["Lunch_Tinder.Models.Vote"]},{"EventId":31, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick", "EventStartTime":"2023-07-13 18:00:00 +01:00", "EventEndTime":"2023-07-13 17:30:00 +01:00", "VotingStartTime":"2023-07-13 16:00:00 +01:00", "VotingEndTime":"2023-07-13 17:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":32, "Name":"Staff Lunch", "Description":"Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe", "EventStartTime":"2023-07-17 12:00:00 +01:00", "EventEndTime":"2023-07-17 11:30:00 +01:00", "VotingStartTime":"2023-07-17 10:00:00 +01:00", "VotingEndTime":"2023-07-17 11:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]},{"EventId":33, "Name":"Staff Lunch", "Description":"Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-29 14:00:00 +01:00", "EventEndTime":"2023-07-29 13:30:00 +01:00", "VotingStartTime":"2023-07-29 12:00:00 +01:00", "VotingEndTime":"2023-07-29 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}], "Restaurants":[{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]},{"RestaurantID":2, "RestaurantName":"La Cucina Limerick", "RestaurantDescription":"Italian pizza and European dishes", "Events":[]},{"RestaurantID":3, "RestaurantName":"Delish Cafe", "RestaurantDescription":"Sandwhiches, Salads,Breakfast Foods", "Events":[]},{"RestaurantID":4, "RestaurantName":"McLaughlins Restaurant", "RestaurantDescription":"Hotel, Traditional Food", "Events":[]}], "Votes":[{"VoteId":6, "UserVoteID":2, "User":{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W", "UserType":"ADMIN", "LunchGroups":[], "Vote":[]}, "RestaurantVoteID":1, "Restaurant":{"RestaurantID":1, "RestaurantName":"Locke Burger Castletroy", "RestaurantDescription":"We don’t do burgers, we do Locke burgers.", "Events":[]}, "EventVoteID":30, "Event":{"EventId":30, "Name":"Staff Lunch", "Description":"Event at La Cucina Limerick,Locke Burger Castletroy", "EventStartTime":"2023-07-12 14:00:00 +01:00", "EventEndTime":"2023-07-12 13:30:00 +01:00", "VotingStartTime":"2023-07-12 12:00:00 +01:00", "VotingEndTime":"2023-07-12 13:30:00 +01:00", "Status":"Open", "VenueWinner":" ", "LunchGroups":[], "RestaurantOptions":[], "Votes":[]}}], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmai", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 29} Unchanged\r\n  EventId: 29 PK\r\n  Description: 'Event at Locke Burger Castletroy,Delish Cafe'\r\n  EventEndTime: '12/07/2023 20:00:00 +01:00'\r\n  EventStartTime: '12/07/2023 20:30:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 20:00:00 +01:00'\r\n  VotingStartTime: '12/07/2023 18:30:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 30} Unchanged\r\n  EventId: 30 PK\r\n  Description: 'Event at La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '12/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '12/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '12/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '12/07/2023 12:00:00 +01:00'\r\n  Votes: [{VoteId: 6}]\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 31} Unchanged\r\n  EventId: 31 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick'\r\n  EventEndTime: '13/07/2023 17:30:00 +01:00'\r\n  EventStartTime: '13/07/2023 18:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '13/07/2023 17:30:00 +01:00'\r\n  VotingStartTime: '13/07/2023 16:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 32} Unchanged\r\n  EventId: 32 PK\r\n  Description: 'Event at Locke Burger Castletroy,La Cucina Limerick,Delish Cafe'\r\n  EventEndTime: '17/07/2023 11:30:00 +01:00'\r\n  EventStartTime: '17/07/2023 12:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '17/07/2023 11:30:00 +01:00'\r\n  VotingStartTime: '17/07/2023 10:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nEvent {EventId: 33} Unchanged\r\n  EventId: 33 PK\r\n  Description: 'Event at Delish Cafe,La Cucina Limerick,Locke Burger Castletroy'\r\n  EventEndTime: '29/07/2023 13:30:00 +01:00'\r\n  EventStartTime: '29/07/2023 14:00:00 +01:00'\r\n  Name: 'Staff Lunch'\r\n  Status: 'Open'\r\n  VenueWinner: ' '\r\n  VotingEndTime: '29/07/2023 13:30:00 +01:00'\r\n  VotingStartTime: '29/07/2023 12:00:00 +01:00'\r\n  Votes: []\r\n  LunchGroups: []\r\n  RestaurantOptions: []\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\n  InviteID: -2147482646 PK Temporary\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: <null>\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmai'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We code'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 2}]\r\nRestaurant {RestaurantID: 1} Unchanged\r\n  RestaurantID: 1 PK\r\n  RestaurantDescription: 'We don’t do burgers, we do Locke burgers.'\r\n  RestaurantName: 'Locke Burger Castletroy'\r\n  Events: []\r\nRestaurant {RestaurantID: 2} Unchanged\r\n  RestaurantID: 2 PK\r\n  RestaurantDescription: 'Italian pizza and European dishes'\r\n  RestaurantName: 'La Cucina Limerick'\r\n  Events: []\r\nRestaurant {RestaurantID: 3} Unchanged\r\n  RestaurantID: 3 PK\r\n  RestaurantDescription: 'Sandwhiches, Salads,Breakfast Foods'\r\n  RestaurantName: 'Delish Cafe'\r\n  Events: []\r\nRestaurant {RestaurantID: 4} Unchanged\r\n  RestaurantID: 4 PK\r\n  RestaurantDescription: 'Hotel, Traditional Food'\r\n  RestaurantName: 'McLaughlins Restaurant'\r\n  Events: []\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$BHEptRXCsOxpCVYtsVHl5eSPrzLEGxrugo0mmHcwxXBDLIKkwB2GW'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: []\r\n  LunchGroups: []\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$mkBoTZ8dd38.836QKNfD/.nBO/v46rFjMugbAX/mgQgVEuQBHZE9W'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: [{VoteId: 6}]\r\n  LunchGroups: [{GroupId: 1}]\r\nVote {VoteId: 6} Unchanged\r\n  VoteId: 6 PK\r\n  EventVoteID: 30 FK\r\n  RestaurantVoteID: 1 FK\r\n  UserVoteID: 2 FK\r\n  Event: {EventId: 30}\r\n  Restaurant: {RestaurantID: 1}\r\n  User: {UserId: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 2 PK FK\r\n", "ShortView":"Event {EventId: 29} Unchanged\r\nEvent {EventId: 30} Unchanged\r\nEvent {EventId: 31} Unchanged\r\nEvent {EventId: 32} Unchanged\r\nEvent {EventId: 33} Unchanged\r\nInviteToLunchGroup {InviteID: -2147482646} Added\r\nInviteToLunchGroup {InviteID: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nRestaurant {RestaurantID: 1} Unchanged\r\nRestaurant {RestaurantID: 2} Unchanged\r\nRestaurant {RestaurantID: 3} Unchanged\r\nRestaurant {RestaurantID: 4} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nVote {VoteId: 6} Unchanged FK {EventVoteID: 30} FK {RestaurantVoteID: 1} FK {UserVoteID: 2}\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 2} Unchanged FK {LunchGroupsGroupId: 1} FK {UsersUserId: 2}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"8e428e90-c9b0-4a0e-bc4d-e2510c5d9cae", "Lease":0}}, "Metadata":{"Name":"Lunch_Tinder.Models.InviteToLunchGroup", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventRestaurant\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EventStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VenueWinner (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingEndTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      VotingStartTime (DateTimeOffset) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: EventRestaurant (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      RestaurantOptionsRestaurantID (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, RestaurantOptionsRestaurantID PK\r\n    Foreign keys: \r\n      EventRestaurant (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventRestaurant (Dictionary<string, object>) {'RestaurantOptionsRestaurantID'} -> Restaurant {'RestaurantID'} Cascade\r\n    Indexes: \r\n      RestaurantOptionsRestaurantID\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EventEndTime (DateTimeOffset) Required\r\n      EventStartTime (DateTimeOffset) Required\r\n      Name (string) Required\r\n      Status (string) Required\r\n      VenueWinner (string) Required\r\n      VotingEndTime (DateTimeOffset) Required\r\n      VotingStartTime (DateTimeOffset) Required\r\n    Navigations: \r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n      RestaurantOptions (ICollection<Restaurant>) CollectionRestaurant Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: RestaurantOptions\r\n    Keys: \r\n      RestaurantID PK\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (ICollection<Vote>) Collection ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID"}, "IsReadOnly":false}, "IsReadOnly":false}, "IsKeySet":false}}], "IsKeySet":false}], "Message":"An error occurred while saving the entity changes. See the inner exception for details.", "Source":"Microsoft.EntityFrameworkCore.Relational", "HResult":-2146233088, "StackTrace":"   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(StateManager stateManager, Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Lunch_Tinder.Data.LunchTinderContext.AddInviteToLunchGroup(InviteToLunchGroup invite) in C:\\Users\\ewalsh\\source\\repos\\Lunch Tinder\\Lunch Tinder\\Lunch Tinder\\Data\\LunchGroupServices.cs:line 136"}
2023-07-19 10:07:56.7449|INFO|Lunch_Tinder.Services.MailService|initiating send mail async method 
2023-07-19 10:07:56.7449|INFO|Lunch_Tinder.Services.MailService|initiating send mail async method 
2023-07-19 10:07:56.9114|ERROR|Lunch_Tinder.Services.MailService|Failed to Send Email {"Type":"System.ArgumentNullException", "Message":"Value cannot be null. (Parameter 'address')", "ParamName":"address", "TargetSite":"Void .ctor(System.Text.Encoding, System.String, System.String)", "Data":{}, "Source":"MimeKit", "HResult":-2147467261, "StackTrace":"   at MimeKit.MailboxAddress..ctor(Encoding encoding, String name, String address)\r\n   at Lunch_Tinder.Services.MailService.SendMailAsync(MailData mailData) in C:\\Users\\ewalsh\\source\\repos\\Lunch Tinder\\Lunch Tinder\\Lunch Tinder\\Services\\MailService.cs:line 41"}
2023-07-19 10:07:56.9114|ERROR|Lunch_Tinder.Services.MailService|Failed to Send Email {"Type":"System.ArgumentNullException", "Message":"Value cannot be null. (Parameter 'address')", "ParamName":"address", "TargetSite":"Void .ctor(System.Text.Encoding, System.String, System.String)", "Data":{}, "Source":"MimeKit", "HResult":-2147467261, "StackTrace":"   at MimeKit.MailboxAddress..ctor(Encoding encoding, String name, String address)\r\n   at Lunch_Tinder.Services.MailService.SendMailAsync(MailData mailData) in C:\\Users\\ewalsh\\source\\repos\\Lunch Tinder\\Lunch Tinder\\Lunch Tinder\\Services\\MailService.cs:line 41"}
2023-07-19 10:07:56.9199|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/DisplayGroups?groupName=Software%20Development. 
2023-07-19 10:07:56.9199|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/DisplayGroups?groupName=Software%20Development. 
2023-07-19 10:07:56.9199|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 969.7232ms 
2023-07-19 10:07:56.9199|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 791.6277ms 
2023-07-19 10:07:56.9199|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-07-19 10:07:56.9199|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-07-19 10:07:56.9199|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 337 - 0 - - 980.5111ms 
2023-07-19 10:07:56.9199|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 337 - 302 0 - 792.8376ms 
2023-07-19 10:07:56.9199|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:07:56.9199|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:07:56.9199|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:07:56.9199|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:07:56.9199|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:07:56.9199|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:07:56.9199|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:07:56.9410|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 9.1692ms. 
2023-07-19 10:07:56.9410|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 11.2456ms 
2023-07-19 10:07:56.9410|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:07:56.9410|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 15.9499ms 
2023-07-19 10:07:57.5180|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - 
2023-07-19 10:07:57.5180|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 10:07:57.5285|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-07-19 10:07:57.5285|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\site.css' 
2023-07-19 10:07:57.5285|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 200 10547 application/javascript 10.3868ms 
2023-07-19 10:07:57.5285|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - - 200 989 text/css 10.6856ms 
2023-07-19 10:07:57.5285|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-07-19 10:07:57.5285|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - 
2023-07-19 10:07:57.5285|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/LunchGroupDetails.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\LunchGroupDetails.css' 
2023-07-19 10:07:57.5285|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/InviteToLunchGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\InviteToLunchGroup.css' 
2023-07-19 10:07:57.5285|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 200 575 text/css 9.3385ms 
2023-07-19 10:07:57.5285|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/InviteToLunchGroup.css?v=GoyjKHcK-4wpJ4t7ijTpMPwv8AenVquSCo_MbFx5wdo - - - 200 500 text/css 4.0131ms 
2023-07-19 10:07:57.5536|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - 
2023-07-19 10:07:57.5536|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/CreateLunchEventForGroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\CreateLunchEventForGroup.css' 
2023-07-19 10:07:57.5536|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/CreateLunchEventForGroup.css?v=qwtxdXIaG-sQkufzKkFHHZ6cUXSUzzCXKHSqksu9vcE - - - 200 899 text/css 1.9786ms 
2023-07-19 10:07:57.5625|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 10:07:57.5625|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/createevent.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\createevent.js' 
2023-07-19 10:07:57.5625|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 200 9316 application/javascript 1.9400ms 
2023-07-19 10:07:57.6710|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:07:57.6710|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2389ms 
2023-07-19 10:07:58.9302|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:07:58.9349|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.7478ms 
2023-07-19 10:08:31.5619|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 10:08:33.6585|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (34ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:08:33.7101|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (25ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:08:33.7101|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:08:33.7139|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:08:33.7408|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 10:08:33.7606|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 10:08:33.9503|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 10:08:33.9503|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 10:08:33.9503|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 10:08:33.9503|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 10:08:33.9503|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 10:08:34.7851|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 10:08:34.8933|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:08:34.9138|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 10:08:34.9517|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 10:08:34.9517|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 38.2926ms 
2023-07-19 10:08:34.9517|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:08:34.9750|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 10:08:34.9750|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 194.7402ms 
2023-07-19 10:08:34.9859|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:08:34.9859|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:08:35.2549|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:08:35.6048|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:08:35.6222|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 10:08:35.6895|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 10:08:35.7013|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 10:08:35.8613|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 165.8136ms. 
2023-07-19 10:08:35.8613|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 879.0618ms 
2023-07-19 10:08:35.8613|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:08:35.8990|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:08:35.8990|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 924.3461ms 
2023-07-19 10:08:35.9035|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.4354ms 
2023-07-19 10:08:35.9035|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:08:35.9266|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.5289ms 
2023-07-19 10:08:58.5482|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:08:58.5482|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:08:58.5482|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:08:58.6266|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:08:58.6821|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:08:58.6936|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:08:58.7017|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:08:58.7017|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:08:58.7159|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:08:58.7914|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 75.9252ms. 
2023-07-19 10:08:58.7915|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 235.0745ms 
2023-07-19 10:08:58.7915|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:08:58.7915|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 248.0583ms 
2023-07-19 10:08:58.7915|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:08:58.7915|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2667ms 
2023-07-19 10:08:58.8089|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:08:58.8089|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.7076ms 
2023-07-19 10:09:05.0189|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Test - - 
2023-07-19 10:09:05.0189|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:05.0189|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:05.0388|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:05.0388|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:05.0671|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 46.5161ms 
2023-07-19 10:09:05.0671|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:05.0671|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Test - - - 200 - application/json;+charset=utf-8 48.3531ms 
2023-07-19 10:09:10.2747|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Tes - - 
2023-07-19 10:09:10.2747|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:10.2747|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:10.2787|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:10.2787|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:10.2787|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 3.5767ms 
2023-07-19 10:09:10.2787|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:10.2787|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Tes - - - 200 - application/json;+charset=utf-8 4.4994ms 
2023-07-19 10:09:10.4703|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Te - - 
2023-07-19 10:09:10.4703|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:10.4703|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:10.4703|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:10.4703|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:10.4703|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0886ms 
2023-07-19 10:09:10.4703|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:10.4703|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Te - - - 200 - application/json;+charset=utf-8 1.8869ms 
2023-07-19 10:09:10.6319|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=T - - 
2023-07-19 10:09:10.6319|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:10.6319|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:10.6319|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:10.6319|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:10.6319|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.6023ms 
2023-07-19 10:09:10.6319|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:10.6319|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=T - - - 200 - application/json;+charset=utf-8 2.1940ms 
2023-07-19 10:09:11.4401|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=d - - 
2023-07-19 10:09:11.4401|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:11.4401|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:11.4401|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:11.4401|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:11.4401|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.3868ms 
2023-07-19 10:09:11.4401|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:11.4401|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=d - - - 200 - application/json;+charset=utf-8 2.2824ms 
2023-07-19 10:09:11.5599|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ds - - 
2023-07-19 10:09:11.5599|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:11.5599|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:11.5599|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:11.5599|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:11.5599|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1015ms 
2023-07-19 10:09:11.5599|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:11.5599|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ds - - - 200 - application/json;+charset=utf-8 1.7816ms 
2023-07-19 10:09:11.6739|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsd - - 
2023-07-19 10:09:11.6739|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:11.6739|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:11.6739|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:11.6739|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:11.6739|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.2933ms 
2023-07-19 10:09:11.6739|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:11.6739|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsd - - - 200 - application/json;+charset=utf-8 1.8080ms 
2023-07-19 10:09:11.6901|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsds - - 
2023-07-19 10:09:11.6901|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:11.6901|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:11.6901|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:11.6901|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:11.6901|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.3595ms 
2023-07-19 10:09:11.6901|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:11.6901|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsds - - - 200 - application/json;+charset=utf-8 2.1668ms 
2023-07-19 10:09:11.8492|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdss - - 
2023-07-19 10:09:11.8492|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:11.8492|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:11.8492|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:11.8492|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:11.8492|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9321ms 
2023-07-19 10:09:11.8492|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:11.8492|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdss - - - 200 - application/json;+charset=utf-8 1.4178ms 
2023-07-19 10:09:11.9627|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssg - - 
2023-07-19 10:09:11.9627|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:11.9627|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:11.9638|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:11.9638|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:11.9638|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8891ms 
2023-07-19 10:09:11.9638|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:11.9638|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssg - - - 200 - application/json;+charset=utf-8 1.3352ms 
2023-07-19 10:09:13.1367|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgs - - 
2023-07-19 10:09:13.1367|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:13.1367|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:13.1367|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:13.1367|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:13.1367|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9502ms 
2023-07-19 10:09:13.1367|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:13.1367|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgs - - - 200 - application/json;+charset=utf-8 1.7844ms 
2023-07-19 10:09:13.1576|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsd - - 
2023-07-19 10:09:13.1576|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:13.1576|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:13.1576|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:13.1576|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:13.1576|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9894ms 
2023-07-19 10:09:13.1576|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:13.1576|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsd - - - 200 - application/json;+charset=utf-8 1.7014ms 
2023-07-19 10:09:13.6516|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsdd - - 
2023-07-19 10:09:13.6516|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:13.6516|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:13.6516|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:13.6516|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:13.6516|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9489ms 
2023-07-19 10:09:13.6516|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:13.6516|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsdd - - - 200 - application/json;+charset=utf-8 1.5012ms 
2023-07-19 10:09:13.7094|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsddf - - 
2023-07-19 10:09:13.7094|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:13.7094|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:13.7094|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:13.7094|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:13.7094|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9729ms 
2023-07-19 10:09:13.7094|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:13.7094|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsddf - - - 200 - application/json;+charset=utf-8 1.5560ms 
2023-07-19 10:09:13.8079|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsddfs - - 
2023-07-19 10:09:13.8079|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:13.8079|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:13.8079|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:13.8079|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:13.8079|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8839ms 
2023-07-19 10:09:13.8079|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:13.8079|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsddfs - - - 200 - application/json;+charset=utf-8 1.4101ms 
2023-07-19 10:09:14.8623|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsddf - - 
2023-07-19 10:09:14.8623|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:14.8623|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:14.8623|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:14.8623|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:14.8623|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.2683ms 
2023-07-19 10:09:14.8623|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:14.8623|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsddf - - - 200 - application/json;+charset=utf-8 2.0276ms 
2023-07-19 10:09:15.3712|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsdd - - 
2023-07-19 10:09:15.3712|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.3712|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:15.3712|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:15.3712|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:15.3712|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0646ms 
2023-07-19 10:09:15.3712|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.3712|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsdd - - - 200 - application/json;+charset=utf-8 1.6554ms 
2023-07-19 10:09:15.4024|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsd - - 
2023-07-19 10:09:15.4024|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.4024|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:15.4024|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:15.4024|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:15.4024|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9506ms 
2023-07-19 10:09:15.4024|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.4024|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgsd - - - 200 - application/json;+charset=utf-8 1.5785ms 
2023-07-19 10:09:15.4346|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgs - - 
2023-07-19 10:09:15.4346|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.4346|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:15.4346|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:15.4346|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:15.4346|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0069ms 
2023-07-19 10:09:15.4346|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.4346|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssgs - - - 200 - application/json;+charset=utf-8 1.6671ms 
2023-07-19 10:09:15.4634|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssg - - 
2023-07-19 10:09:15.4634|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.4634|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:15.4645|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:15.4645|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:15.4645|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8774ms 
2023-07-19 10:09:15.4645|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.4645|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdssg - - - 200 - application/json;+charset=utf-8 1.4178ms 
2023-07-19 10:09:15.4981|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdss - - 
2023-07-19 10:09:15.4981|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.4981|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:15.4981|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:15.4981|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:15.4981|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.871ms 
2023-07-19 10:09:15.4981|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.4981|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsdss - - - 200 - application/json;+charset=utf-8 1.3531ms 
2023-07-19 10:09:15.5277|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsds - - 
2023-07-19 10:09:15.5277|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.5277|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:15.5277|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:15.5277|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:15.5277|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9238ms 
2023-07-19 10:09:15.5277|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.5277|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsds - - - 200 - application/json;+charset=utf-8 1.5445ms 
2023-07-19 10:09:15.5741|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsd - - 
2023-07-19 10:09:15.5741|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.5741|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:15.5741|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:15.5741|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:15.5741|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9795ms 
2023-07-19 10:09:15.5741|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.5741|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dsd - - - 200 - application/json;+charset=utf-8 1.6442ms 
2023-07-19 10:09:15.6049|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ds - - 
2023-07-19 10:09:15.6049|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.6049|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:15.6049|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:15.6049|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:15.6049|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.2267ms 
2023-07-19 10:09:15.6049|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.6049|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ds - - - 200 - application/json;+charset=utf-8 1.7354ms 
2023-07-19 10:09:15.6350|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=d - - 
2023-07-19 10:09:15.6354|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.6354|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:09:15.6354|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:09:15.6354|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:09:15.6354|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0203ms 
2023-07-19 10:09:15.6354|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:09:15.6354|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=d - - - 200 - application/json;+charset=utf-8 1.6025ms 
2023-07-19 10:12:03.0658|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=useremail@gmail.com - - 
2023-07-19 10:12:03.0658|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:12:03.0658|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:12:03.0658|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:12:03.0658|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:12:03.0658|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.6803ms 
2023-07-19 10:12:03.0658|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:12:03.0658|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=useremail@gmail.com - - - 200 - application/json;+charset=utf-8 6.5675ms 
2023-07-19 10:13:01.4449|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 10:13:03.3368|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:13:03.3792|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:13:03.3792|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:13:03.3792|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:13:03.4037|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 10:13:03.4210|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 10:13:03.5847|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 10:13:03.5847|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 10:13:03.5847|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 10:13:03.5847|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 10:13:03.5847|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 10:13:04.0713|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 10:13:04.1690|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:13:04.1872|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 10:13:04.2191|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 10:13:04.2191|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 32.33ms 
2023-07-19 10:13:04.2191|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:13:04.2433|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 173.8921ms 
2023-07-19 10:13:04.2433|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 10:13:04.2542|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:13:04.2542|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:04.5059|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:13:04.8221|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:13:04.8401|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 10:13:04.8976|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 10:13:04.9050|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 10:13:05.0414|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 140.3837ms. 
2023-07-19 10:13:05.0414|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 789.8559ms 
2023-07-19 10:13:05.0414|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:13:05.0758|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 832.4249ms 
2023-07-19 10:13:05.0758|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 10:13:05.0758|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:13:05.0758|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.2790ms 
2023-07-19 10:13:05.0758|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 10:13:05.0758|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 304 - application/javascript 7.3080ms 
2023-07-19 10:13:05.0887|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:13:05.0887|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 13.5903ms 
2023-07-19 10:13:06.7603|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:13:06.7603|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:13:06.7603|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:06.8363|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:13:06.8913|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:13:06.9015|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:13:06.9015|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:13:06.9015|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:13:06.9241|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:13:06.9938|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 70.0418ms. 
2023-07-19 10:13:06.9938|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 226.3741ms 
2023-07-19 10:13:06.9938|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:13:06.9972|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 236.8591ms 
2023-07-19 10:13:06.9972|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:13:06.9972|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 10:13:06.9972|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.5217ms 
2023-07-19 10:13:06.9972|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 10:13:06.9972|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 304 - application/javascript 0.4422ms 
2023-07-19 10:13:07.0117|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:13:07.0117|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.5245ms 
2023-07-19 10:13:10.6239|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Test - - 
2023-07-19 10:13:10.6239|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:10.6239|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:10.6432|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:10.6432|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:10.6699|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 44.5141ms 
2023-07-19 10:13:10.6699|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:10.6699|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Test - - - 200 - application/json;+charset=utf-8 46.4913ms 
2023-07-19 10:13:14.7847|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testi - - 
2023-07-19 10:13:14.7847|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:14.7847|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:14.7847|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:14.7847|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:14.7847|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 3.4655ms 
2023-07-19 10:13:14.7847|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:14.7847|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testi - - - 200 - application/json;+charset=utf-8 4.3589ms 
2023-07-19 10:13:15.3017|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testii - - 
2023-07-19 10:13:15.3017|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:15.3017|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:15.3017|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:15.3017|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:15.3017|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9578ms 
2023-07-19 10:13:15.3017|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:15.3017|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testii - - - 200 - application/json;+charset=utf-8 1.5347ms 
2023-07-19 10:13:15.4471|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiii - - 
2023-07-19 10:13:15.4471|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:15.4471|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:15.4482|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:15.4482|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:15.4482|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9029ms 
2023-07-19 10:13:15.4482|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:15.4482|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiii - - - 200 - application/json;+charset=utf-8 1.3275ms 
2023-07-19 10:13:15.6040|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiiii - - 
2023-07-19 10:13:15.6040|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:15.6045|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:15.6045|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:15.6045|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:15.6045|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.974ms 
2023-07-19 10:13:15.6045|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:15.6045|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiiii - - - 200 - application/json;+charset=utf-8 1.5790ms 
2023-07-19 10:13:15.8778|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiiiii - - 
2023-07-19 10:13:15.8778|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:15.8778|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:15.8778|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:15.8778|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:15.8778|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.966ms 
2023-07-19 10:13:15.8778|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:15.8778|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiiiii - - - 200 - application/json;+charset=utf-8 1.8501ms 
2023-07-19 10:13:16.1728|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiiiii= - - 
2023-07-19 10:13:16.1728|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:16.1728|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:16.1728|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:16.1728|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:16.1728|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8611ms 
2023-07-19 10:13:16.1728|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:16.1728|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiiiii= - - - 200 - application/json;+charset=utf-8 1.2915ms 
2023-07-19 10:13:19.1186|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiiiii - - 
2023-07-19 10:13:19.1186|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:19.1186|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:19.1199|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:19.1199|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:19.1199|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.949ms 
2023-07-19 10:13:19.1199|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:19.1199|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiiiii - - - 200 - application/json;+charset=utf-8 1.5707ms 
2023-07-19 10:13:19.2889|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiiii - - 
2023-07-19 10:13:19.2889|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:19.2889|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:19.2889|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:19.2889|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:19.2889|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8995ms 
2023-07-19 10:13:19.2889|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:19.2889|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiiii - - - 200 - application/json;+charset=utf-8 1.4158ms 
2023-07-19 10:13:19.4326|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiii - - 
2023-07-19 10:13:19.4326|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:19.4326|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:19.4326|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:19.4326|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:19.4326|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.876ms 
2023-07-19 10:13:19.4326|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:19.4326|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testiii - - - 200 - application/json;+charset=utf-8 1.3967ms 
2023-07-19 10:13:19.5869|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testii - - 
2023-07-19 10:13:19.5869|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:19.5869|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:19.5881|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:19.5881|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:19.5881|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8735ms 
2023-07-19 10:13:19.5881|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:19.5881|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testii - - - 200 - application/json;+charset=utf-8 1.4460ms 
2023-07-19 10:13:19.7531|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testi - - 
2023-07-19 10:13:19.7531|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:19.7531|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:19.7531|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:19.7531|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:19.7531|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0169ms 
2023-07-19 10:13:19.7531|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:19.7531|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Testi - - - 200 - application/json;+charset=utf-8 1.6292ms 
2023-07-19 10:13:19.9282|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Test - - 
2023-07-19 10:13:19.9282|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:19.9282|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:13:19.9282|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:13:19.9282|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:13:19.9282|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9215ms 
2023-07-19 10:13:19.9282|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:13:19.9282|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=Test - - - 200 - application/json;+charset=utf-8 1.4543ms 
2023-07-19 10:18:50.3376|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 10:18:50.3431|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:18:50.3431|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:18:50.3431|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:18:50.3431|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 10:18:50.3541|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 10:18:50.3541|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 10:18:50.3541|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 6.6264ms. 
2023-07-19 10:18:50.3541|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 17.7567ms 
2023-07-19 10:18:50.3541|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:18:50.3541|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 27.2765ms 
2023-07-19 10:18:50.3744|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 10:18:50.3744|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 10:18:50.3744|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 304 - application/javascript 3.0018ms 
2023-07-19 10:18:50.3744|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:18:50.3744|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 1.0423ms 
2023-07-19 10:18:50.3744|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:18:50.3887|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.4192ms 
2023-07-19 10:21:14.6881|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 10:21:16.5767|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (30ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:21:16.6183|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:21:16.6209|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:21:16.6209|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:21:16.6486|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 10:21:16.6677|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 10:21:16.8688|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 10:21:16.8688|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 10:21:16.8704|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 10:21:16.8704|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 10:21:16.8704|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 10:21:17.3729|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 10:21:17.4707|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:21:17.4903|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 10:21:17.5211|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 10:21:17.5211|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 31.345ms 
2023-07-19 10:21:17.5211|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:21:17.5449|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 10:21:17.5449|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 175.0079ms 
2023-07-19 10:21:17.5449|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:21:17.5577|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:17.8333|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:21:18.1706|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:21:18.1876|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 10:21:18.2459|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 10:21:18.2459|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 10:21:18.3874|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 138.0005ms. 
2023-07-19 10:21:18.3874|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 833.3121ms 
2023-07-19 10:21:18.3874|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:21:18.4237|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 878.8212ms 
2023-07-19 10:21:18.4237|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:21:18.4237|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.8120ms 
2023-07-19 10:21:18.4384|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:21:18.4535|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.0244ms 
2023-07-19 10:21:23.5696|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:21:23.5757|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:21:23.5757|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:23.6453|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:21:23.7006|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:21:23.7006|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:21:23.7199|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:21:23.7199|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:21:23.7346|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:21:23.8060|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 71.8178ms. 
2023-07-19 10:21:23.8060|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 227.3893ms 
2023-07-19 10:21:23.8060|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:21:23.8104|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 240.7968ms 
2023-07-19 10:21:23.8104|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:21:23.8104|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3865ms 
2023-07-19 10:21:23.8104|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 10:21:23.8231|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 10:21:23.8231|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 304 - application/javascript 5.7367ms 
2023-07-19 10:21:23.8231|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:21:23.8231|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.7048ms 
2023-07-19 10:21:26.9975|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=i - - 
2023-07-19 10:21:26.9975|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:26.9975|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:27.0191|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:27.0191|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:27.0459|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 46.4642ms 
2023-07-19 10:21:27.0459|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:27.0459|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=i - - - 200 - application/json;+charset=utf-8 48.6781ms 
2023-07-19 10:21:27.0803|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ij - - 
2023-07-19 10:21:27.0803|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:27.0803|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:27.0803|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:27.0803|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:27.0803|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 3.1237ms 
2023-07-19 10:21:27.0803|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:27.0803|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ij - - - 200 - application/json;+charset=utf-8 3.9208ms 
2023-07-19 10:21:28.0726|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iju - - 
2023-07-19 10:21:28.0730|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:28.0730|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:28.0730|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:28.0730|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:28.0730|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0008ms 
2023-07-19 10:21:28.0730|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:28.0730|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iju - - - 200 - application/json;+charset=utf-8 1.6199ms 
2023-07-19 10:21:28.1201|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ijuo - - 
2023-07-19 10:21:28.1201|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:28.1201|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:28.1201|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:28.1201|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:28.1201|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9563ms 
2023-07-19 10:21:28.1201|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:28.1201|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ijuo - - - 200 - application/json;+charset=utf-8 1.4325ms 
2023-07-19 10:21:28.2044|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ijuoi - - 
2023-07-19 10:21:28.2044|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:28.2044|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:28.2044|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:28.2044|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:28.2044|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8579ms 
2023-07-19 10:21:28.2044|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:28.2044|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ijuoi - - - 200 - application/json;+charset=utf-8 1.3268ms 
2023-07-19 10:21:28.3419|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ijuoiu - - 
2023-07-19 10:21:28.3419|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:28.3419|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:28.3419|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:28.3419|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:28.3419|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9139ms 
2023-07-19 10:21:28.3419|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:28.3419|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ijuoiu - - - 200 - application/json;+charset=utf-8 1.4745ms 
2023-07-19 10:21:29.0202|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ijuoi - - 
2023-07-19 10:21:29.0202|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:29.0202|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:29.0202|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:29.0202|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:29.0202|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9734ms 
2023-07-19 10:21:29.0202|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:29.0202|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ijuoi - - - 200 - application/json;+charset=utf-8 1.4661ms 
2023-07-19 10:21:29.5310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ijuo - - 
2023-07-19 10:21:29.5310|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:29.5310|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:29.5310|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:29.5310|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:29.5310|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1228ms 
2023-07-19 10:21:29.5310|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:29.5310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ijuo - - - 200 - application/json;+charset=utf-8 2.0735ms 
2023-07-19 10:21:29.5613|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iju - - 
2023-07-19 10:21:29.5613|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:29.5613|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:29.5613|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:29.5613|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:29.5613|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9548ms 
2023-07-19 10:21:29.5613|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:29.5613|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=iju - - - 200 - application/json;+charset=utf-8 1.4930ms 
2023-07-19 10:21:29.5914|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ij - - 
2023-07-19 10:21:29.5914|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:29.5914|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:29.5914|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:29.5914|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:29.5914|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.9566ms 
2023-07-19 10:21:29.5914|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:29.5914|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ij - - - 200 - application/json;+charset=utf-8 2.4398ms 
2023-07-19 10:21:29.6231|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=i - - 
2023-07-19 10:21:29.6231|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:29.6231|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:29.6231|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:29.6231|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:29.6231|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 2.0932ms 
2023-07-19 10:21:29.6231|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:29.6231|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=i - - - 200 - application/json;+charset=utf-8 2.6265ms 
2023-07-19 10:21:30.6488|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=i - - 
2023-07-19 10:21:30.6488|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:30.6488|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:30.6515|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:30.6515|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:30.6515|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 2.3224ms 
2023-07-19 10:21:30.6515|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:30.6515|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=i - - - 200 - application/json;+charset=utf-8 3.1042ms 
2023-07-19 10:21:31.3302|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ii - - 
2023-07-19 10:21:31.3302|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:31.3302|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:31.3302|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:31.3302|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:31.3302|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 2.2714ms 
2023-07-19 10:21:31.3302|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:31.3302|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=ii - - - 200 - application/json;+charset=utf-8 2.9000ms 
2023-07-19 10:21:31.9428|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=i - - 
2023-07-19 10:21:31.9428|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:31.9428|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:31.9428|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:31.9428|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:31.9428|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 2.3971ms 
2023-07-19 10:21:31.9428|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:31.9428|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=i - - - 200 - application/json;+charset=utf-8 3.1958ms 
2023-07-19 10:21:33.4198|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=u - - 
2023-07-19 10:21:33.4198|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:33.4198|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:33.4198|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:33.4198|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:33.4198|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 2.5374ms 
2023-07-19 10:21:33.4198|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:33.4198|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=u - - - 200 - application/json;+charset=utf-8 3.3563ms 
2023-07-19 10:21:33.5683|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=us - - 
2023-07-19 10:21:33.5683|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:33.5683|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:33.5683|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:33.5683|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:33.5683|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 2.613ms 
2023-07-19 10:21:33.5683|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:33.5683|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=us - - - 200 - application/json;+charset=utf-8 3.3140ms 
2023-07-19 10:21:34.4089|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=useremail@gmail.com - - 
2023-07-19 10:21:34.4089|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:34.4089|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:21:34.4089|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:21:34.4089|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:21:34.4089|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 2.9215ms 
2023-07-19 10:21:34.4089|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:21:34.4089|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=useremail@gmail.com - - - 200 - application/json;+charset=utf-8 3.6073ms 
2023-07-19 10:22:53.6581|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 10:22:55.5282|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (30ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:22:55.5745|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:22:55.5745|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:22:55.5745|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:22:55.6012|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 10:22:55.6196|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 10:22:55.8159|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 10:22:55.8159|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 10:22:55.8159|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 10:22:55.8159|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 10:22:55.8159|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 10:22:56.3255|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 10:22:56.4254|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:22:56.4461|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 10:22:56.4810|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 10:22:56.4810|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 35.4144ms 
2023-07-19 10:22:56.4810|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:22:56.5048|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 10:22:56.5048|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 182.6274ms 
2023-07-19 10:22:56.5241|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:22:56.5241|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:22:56.7786|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:22:57.0957|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:22:57.1139|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 10:22:57.1731|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 10:22:57.1731|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 10:22:57.3170|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 140.2696ms. 
2023-07-19 10:22:57.3170|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 795.9694ms 
2023-07-19 10:22:57.3170|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:22:57.3521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 847.3612ms 
2023-07-19 10:22:57.3521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:22:57.3578|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.2376ms 
2023-07-19 10:22:57.3578|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:22:57.3792|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 16.7448ms 
2023-07-19 10:23:01.0174|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Event/DisplayEvent?eventid=33 - - 
2023-07-19 10:23:01.0174|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder)' 
2023-07-19 10:23:01.0174|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayEvent", controller = "Event"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayEvent(Int32) on controller Lunch_Tinder.Controllers.EventController (Lunch Tinder). 
2023-07-19 10:23:01.1420|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[EventId], [t].[Description], [t].[EventEndTime], [t].[EventStartTime], [t].[Name], [t].[Status], [t].[VenueWinner], [t].[VotingEndTime], [t].[VotingStartTime], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[RestaurantID], [t0].[RestaurantDescription], [t0].[RestaurantName]
FROM (
    SELECT TOP(1) [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
    FROM [Events] AS [e]
    WHERE [e].[EventId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [e0].[EventsEventId], [e0].[RestaurantOptionsRestaurantID], [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [EventRestaurant] AS [e0]
    INNER JOIN [Restaurants] AS [r] ON [e0].[RestaurantOptionsRestaurantID] = [r].[RestaurantID]
) AS [t0] ON [t].[EventId] = [t0].[EventsEventId]
ORDER BY [t].[EventId], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 10:23:01.1641|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[GroupId], [t0].[Description], [t0].[GroupName]
FROM (
    SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [Users] AS [u]
    WHERE [u].[UserId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t0] ON [t].[UserId] = [t0].[UsersUserId]
ORDER BY [t].[UserId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-07-19 10:23:01.1641|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LunchGroupEvent.cshtml. 
2023-07-19 10:23:01.1979|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LunchGroupEvent.cshtml executed in 33.2052ms. 
2023-07-19 10:23:01.1980|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder) in 175.6269ms 
2023-07-19 10:23:01.1980|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder)' 
2023-07-19 10:23:01.1980|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Event/DisplayEvent?eventid=33 - - - 200 - text/html;+charset=utf-8 182.2932ms 
2023-07-19 10:23:01.1980|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:23:01.1980|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2946ms 
2023-07-19 10:23:01.2156|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:23:01.2156|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.4690ms 
2023-07-19 10:23:07.1781|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Event/EditEvent application/x-www-form-urlencoded 661 
2023-07-19 10:23:07.1781|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.EventController.EditEvent (Lunch Tinder)' 
2023-07-19 10:23:07.1897|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "EditEvent", controller = "Event"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] EditEvent(Lunch_Tinder.ViewModels.VMEventPage) on controller Lunch_Tinder.Controllers.EventController (Lunch Tinder). 
2023-07-19 10:23:07.2151|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[EventId], [t].[Description], [t].[EventEndTime], [t].[EventStartTime], [t].[Name], [t].[Status], [t].[VenueWinner], [t].[VotingEndTime], [t].[VotingStartTime], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[RestaurantID], [t0].[RestaurantDescription], [t0].[RestaurantName]
FROM (
    SELECT TOP(1) [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
    FROM [Events] AS [e]
    WHERE [e].[EventId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [e0].[EventsEventId], [e0].[RestaurantOptionsRestaurantID], [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [EventRestaurant] AS [e0]
    INNER JOIN [Restaurants] AS [r] ON [e0].[RestaurantOptionsRestaurantID] = [r].[RestaurantID]
) AS [t0] ON [t].[EventId] = [t0].[EventsEventId]
ORDER BY [t].[EventId], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 10:23:07.2151|INFO|Lunch_Tinder.Controllers.EventController|BEFORE::EVENT START DATE TIME: 29/07/2023 14:00:00 +01:00 
2023-07-19 10:23:07.2151|INFO|Lunch_Tinder.Controllers.EventController|BEFORE::EVENT END DATE TIME: 29/07/2023 13:30:00 +01:00 
2023-07-19 10:23:07.2151|INFO|Lunch_Tinder.Controllers.EventController|BEFORE::VOTE START DATE TIME: 29/07/2023 12:00:00 +01:00 
2023-07-19 10:23:07.2151|INFO|Lunch_Tinder.Controllers.EventController|BEFORE::VOTE END DATE TIME: 29/07/2023 13:30:00 +01:00 
2023-07-19 10:23:07.2151|INFO|Lunch_Tinder.Controllers.EventController|AFTER::EVENT START DATE TIME: 19/07/2023 14:00:00 +01:00 
2023-07-19 10:23:07.2151|INFO|Lunch_Tinder.Controllers.EventController|AFTER::EVENT END DATE TIME: 19/07/2023 13:30:00 +01:00 
2023-07-19 10:23:07.2151|INFO|Lunch_Tinder.Controllers.EventController|AFTER::VOTE START DATE TIME: 19/07/2023 12:00:00 +01:00 
2023-07-19 10:23:07.2151|INFO|Lunch_Tinder.Controllers.EventController|AFTER::VOTE END DATE TIME: 19/07/2023 13:30:00 +01:00 
2023-07-19 10:23:07.3023|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@p8='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (DbType = DateTimeOffset), @p2='?' (DbType = DateTimeOffset), @p3='?' (Size = 4000), @p4='?' (Size = 4000), @p5='?' (Size = 4000), @p6='?' (DbType = DateTimeOffset), @p7='?' (DbType = DateTimeOffset)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [Events] SET [Description] = @p0, [EventEndTime] = @p1, [EventStartTime] = @p2, [Name] = @p3, [Status] = @p4, [VenueWinner] = @p5, [VotingEndTime] = @p6, [VotingStartTime] = @p7
OUTPUT 1
WHERE [EventId] = @p8; 
2023-07-19 10:23:11.2506|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Event/DisplayEvent?eventId=33. 
2023-07-19 10:23:11.2506|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.EventController.EditEvent (Lunch Tinder) in 4061.1467ms 
2023-07-19 10:23:11.2506|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.EventController.EditEvent (Lunch Tinder)' 
2023-07-19 10:23:11.2506|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Event/EditEvent application/x-www-form-urlencoded 661 - 302 0 - 4073.1131ms 
2023-07-19 10:23:11.2506|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Event/DisplayEvent?eventId=33 - - 
2023-07-19 10:23:11.2506|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder)' 
2023-07-19 10:23:11.2506|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayEvent", controller = "Event"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayEvent(Int32) on controller Lunch_Tinder.Controllers.EventController (Lunch Tinder). 
2023-07-19 10:23:11.2506|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[EventId], [t].[Description], [t].[EventEndTime], [t].[EventStartTime], [t].[Name], [t].[Status], [t].[VenueWinner], [t].[VotingEndTime], [t].[VotingStartTime], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[RestaurantID], [t0].[RestaurantDescription], [t0].[RestaurantName]
FROM (
    SELECT TOP(1) [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
    FROM [Events] AS [e]
    WHERE [e].[EventId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [e0].[EventsEventId], [e0].[RestaurantOptionsRestaurantID], [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [EventRestaurant] AS [e0]
    INNER JOIN [Restaurants] AS [r] ON [e0].[RestaurantOptionsRestaurantID] = [r].[RestaurantID]
) AS [t0] ON [t].[EventId] = [t0].[EventsEventId]
ORDER BY [t].[EventId], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 10:23:11.2506|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[GroupId], [t0].[Description], [t0].[GroupName]
FROM (
    SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [Users] AS [u]
    WHERE [u].[UserId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t0] ON [t].[UserId] = [t0].[UsersUserId]
ORDER BY [t].[UserId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-07-19 10:23:11.2506|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LunchGroupEvent.cshtml. 
2023-07-19 10:23:11.2641|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LunchGroupEvent.cshtml executed in 7.1936ms. 
2023-07-19 10:23:11.2641|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder) in 9.3639ms 
2023-07-19 10:23:11.2641|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder)' 
2023-07-19 10:23:11.2641|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Event/DisplayEvent?eventId=33 - - - 200 - text/html;+charset=utf-8 11.9839ms 
2023-07-19 10:23:11.2641|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:23:11.2641|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:23:11.2641|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2407ms 
2023-07-19 10:23:11.2775|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.4338ms 
2023-07-19 10:23:15.7195|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 10:23:15.7195|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:23:15.7195|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:23:15.7195|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:23:15.7195|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 10:23:15.7195|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 10:23:15.7195|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 10:23:15.7195|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 3.0666ms. 
2023-07-19 10:23:15.7195|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 5.3251ms 
2023-07-19 10:23:15.7195|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:23:15.7195|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 9.2585ms 
2023-07-19 10:23:15.7380|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:23:15.7380|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:23:15.7380|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3352ms 
2023-07-19 10:23:15.7380|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.8825ms 
2023-07-19 10:23:16.9031|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:23:16.9031|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:23:16.9031|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:23:16.9176|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:23:16.9176|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:23:16.9372|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:23:16.9372|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:23:16.9473|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:23:16.9473|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:23:17.0042|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 56.6839ms. 
2023-07-19 10:23:17.0042|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 97.5724ms 
2023-07-19 10:23:17.0042|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:23:17.0042|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 105.0016ms 
2023-07-19 10:23:17.0146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:23:17.0146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2685ms 
2023-07-19 10:23:17.0146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:23:17.0146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.3338ms 
2023-07-19 10:23:55.7751|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Event/CreateEvent application/x-www-form-urlencoded 603 
2023-07-19 10:23:55.7810|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.EventController.CreateEvent (Lunch Tinder)' 
2023-07-19 10:23:55.7810|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CreateEvent", controller = "Event"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CreateEvent(Lunch_Tinder.ViewModels.VMLunchEventForGroupModel) on controller Lunch_Tinder.Controllers.EventController (Lunch Tinder). 
2023-07-19 10:23:55.7999|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:23:55.8126|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[RestaurantID], [t].[RestaurantDescription], [t].[RestaurantName], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM (
    SELECT TOP(1) [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [Restaurants] AS [r]
    WHERE [r].[RestaurantName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[RestaurantOptionsRestaurantID], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventRestaurant] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[RestaurantID] = [t0].[RestaurantOptionsRestaurantID]
ORDER BY [t].[RestaurantID], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 10:23:55.8126|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[RestaurantID], [t].[RestaurantDescription], [t].[RestaurantName], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM (
    SELECT TOP(1) [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [Restaurants] AS [r]
    WHERE [r].[RestaurantName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[RestaurantOptionsRestaurantID], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventRestaurant] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[RestaurantID] = [t0].[RestaurantOptionsRestaurantID]
ORDER BY [t].[RestaurantID], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 10:23:55.9007|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (DbType = DateTimeOffset), @p2='?' (DbType = DateTimeOffset), @p3='?' (Size = 4000), @p4='?' (Size = 4000), @p5='?' (Size = 4000), @p6='?' (DbType = DateTimeOffset), @p7='?' (DbType = DateTimeOffset), @p10='?' (DbType = Int32), @p8='?' (Size = 4000), @p9='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Events] ([Description], [EventEndTime], [EventStartTime], [Name], [Status], [VenueWinner], [VotingEndTime], [VotingStartTime])
OUTPUT INSERTED.[EventId]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7);
UPDATE [LunchGroups] SET [Description] = @p8, [GroupName] = @p9
OUTPUT 1
WHERE [GroupId] = @p10; 
2023-07-19 10:23:55.9271|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@p11='?' (DbType = Int32), @p12='?' (DbType = Int32), @p13='?' (DbType = Int32), @p14='?' (DbType = Int32), @p15='?' (DbType = Int32), @p16='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [EventLunchGroup] ([EventsEventId], [LunchGroupsGroupId])
VALUES (@p11, @p12);
INSERT INTO [EventRestaurant] ([EventsEventId], [RestaurantOptionsRestaurantID])
VALUES (@p13, @p14),
(@p15, @p16); 
2023-07-19 10:23:55.9646|INFO|Lunch_Tinder.Services.MailService|initiating send mail async method 
2023-07-19 10:23:58.0280|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/DisplayGroups?groupName=Software%20Development. 
2023-07-19 10:23:58.0280|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.EventController.CreateEvent (Lunch Tinder) in 2244.9094ms 
2023-07-19 10:23:58.0280|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.EventController.CreateEvent (Lunch Tinder)' 
2023-07-19 10:23:58.0280|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Event/CreateEvent application/x-www-form-urlencoded 603 - 302 0 - 2253.6422ms 
2023-07-19 10:23:58.0280|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:23:58.0280|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:23:58.0280|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:23:58.0280|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:23:58.0280|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:23:58.0280|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:23:58.0280|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:23:58.0492|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 9.09ms. 
2023-07-19 10:23:58.0492|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 16.5115ms 
2023-07-19 10:23:58.0492|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:23:58.0492|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 22.0076ms 
2023-07-19 10:23:58.0595|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:23:58.0595|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2183ms 
2023-07-19 10:23:58.0595|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:23:58.0595|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.2159ms 
2023-07-19 10:23:59.3052|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 10:23:59.3052|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:23:59.3052|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:23:59.3075|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:23:59.3075|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 10:23:59.3075|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 10:23:59.3075|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 10:23:59.3075|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 3.705ms. 
2023-07-19 10:23:59.3075|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 13.955ms 
2023-07-19 10:23:59.3075|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:23:59.3075|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 16.5645ms 
2023-07-19 10:23:59.3311|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:23:59.3311|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:23:59.3311|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4079ms 
2023-07-19 10:23:59.3311|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.3861ms 
2023-07-19 10:24:06.2009|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Event/DisplayEvent?eventid=34 - - 
2023-07-19 10:24:06.2009|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder)' 
2023-07-19 10:24:06.2009|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayEvent", controller = "Event"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayEvent(Int32) on controller Lunch_Tinder.Controllers.EventController (Lunch Tinder). 
2023-07-19 10:24:06.2009|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[EventId], [t].[Description], [t].[EventEndTime], [t].[EventStartTime], [t].[Name], [t].[Status], [t].[VenueWinner], [t].[VotingEndTime], [t].[VotingStartTime], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[RestaurantID], [t0].[RestaurantDescription], [t0].[RestaurantName]
FROM (
    SELECT TOP(1) [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
    FROM [Events] AS [e]
    WHERE [e].[EventId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [e0].[EventsEventId], [e0].[RestaurantOptionsRestaurantID], [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [EventRestaurant] AS [e0]
    INNER JOIN [Restaurants] AS [r] ON [e0].[RestaurantOptionsRestaurantID] = [r].[RestaurantID]
) AS [t0] ON [t].[EventId] = [t0].[EventsEventId]
ORDER BY [t].[EventId], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 10:24:06.2009|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[GroupId], [t0].[Description], [t0].[GroupName]
FROM (
    SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [Users] AS [u]
    WHERE [u].[UserId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t0] ON [t].[UserId] = [t0].[UsersUserId]
ORDER BY [t].[UserId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-07-19 10:24:06.2009|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LunchGroupEvent.cshtml. 
2023-07-19 10:24:06.2009|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LunchGroupEvent.cshtml executed in 5.6075ms. 
2023-07-19 10:24:06.2138|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder) in 11.8137ms 
2023-07-19 10:24:06.2138|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder)' 
2023-07-19 10:24:06.2138|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Event/DisplayEvent?eventid=34 - - - 200 - text/html;+charset=utf-8 14.3981ms 
2023-07-19 10:24:06.2138|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - 
2023-07-19 10:24:06.2138|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:24:06.2138|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1690ms 
2023-07-19 10:24:06.2302|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-07-19 10:24:06.2302|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=KWTh8V48XSy_4t2o0cI_Y9nLDV6C1N4VLJyqyi_dklE - - - 304 - application/javascript 6.6035ms 
2023-07-19 10:24:06.2302|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:24:06.2302|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.3742ms 
2023-07-19 10:24:53.3191|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:24:53.3310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 11.9030ms 
2023-07-19 10:24:56.0074|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:24:56.0074|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:24:56.0074|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:24:56.0163|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:24:56.0163|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:24:56.0163|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:24:56.0163|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:24:56.0318|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 8.448ms. 
2023-07-19 10:24:56.0318|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 23.2701ms 
2023-07-19 10:24:56.0318|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:24:56.0318|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 29.0670ms 
2023-07-19 10:24:56.0437|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:24:56.0437|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2524ms 
2023-07-19 10:24:56.0437|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:24:56.0437|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.7268ms 
2023-07-19 10:25:21.0994|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Event/CreateEvent application/x-www-form-urlencoded 610 
2023-07-19 10:25:21.1123|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.EventController.CreateEvent (Lunch Tinder)' 
2023-07-19 10:25:21.1123|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CreateEvent", controller = "Event"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CreateEvent(Lunch_Tinder.ViewModels.VMLunchEventForGroupModel) on controller Lunch_Tinder.Controllers.EventController (Lunch Tinder). 
2023-07-19 10:25:21.1123|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:25:21.1123|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[RestaurantID], [t].[RestaurantDescription], [t].[RestaurantName], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM (
    SELECT TOP(1) [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [Restaurants] AS [r]
    WHERE [r].[RestaurantName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[RestaurantOptionsRestaurantID], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventRestaurant] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[RestaurantID] = [t0].[RestaurantOptionsRestaurantID]
ORDER BY [t].[RestaurantID], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 10:25:21.1123|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[RestaurantID], [t].[RestaurantDescription], [t].[RestaurantName], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM (
    SELECT TOP(1) [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [Restaurants] AS [r]
    WHERE [r].[RestaurantName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[RestaurantOptionsRestaurantID], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventRestaurant] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[RestaurantID] = [t0].[RestaurantOptionsRestaurantID]
ORDER BY [t].[RestaurantID], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 10:25:21.1196|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (DbType = DateTimeOffset), @p2='?' (DbType = DateTimeOffset), @p3='?' (Size = 4000), @p4='?' (Size = 4000), @p5='?' (Size = 4000), @p6='?' (DbType = DateTimeOffset), @p7='?' (DbType = DateTimeOffset), @p10='?' (DbType = Int32), @p8='?' (Size = 4000), @p9='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Events] ([Description], [EventEndTime], [EventStartTime], [Name], [Status], [VenueWinner], [VotingEndTime], [VotingStartTime])
OUTPUT INSERTED.[EventId]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7);
UPDATE [LunchGroups] SET [Description] = @p8, [GroupName] = @p9
OUTPUT 1
WHERE [GroupId] = @p10; 
2023-07-19 10:25:21.1196|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p11='?' (DbType = Int32), @p12='?' (DbType = Int32), @p13='?' (DbType = Int32), @p14='?' (DbType = Int32), @p15='?' (DbType = Int32), @p16='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [EventLunchGroup] ([EventsEventId], [LunchGroupsGroupId])
VALUES (@p11, @p12);
INSERT INTO [EventRestaurant] ([EventsEventId], [RestaurantOptionsRestaurantID])
VALUES (@p13, @p14),
(@p15, @p16); 
2023-07-19 10:25:21.1196|INFO|Lunch_Tinder.Services.MailService|initiating send mail async method 
2023-07-19 10:25:22.8355|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/DisplayGroups?groupName=Software%20Development. 
2023-07-19 10:25:22.8355|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.EventController.CreateEvent (Lunch Tinder) in 1723.4321ms 
2023-07-19 10:25:22.8355|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.EventController.CreateEvent (Lunch Tinder)' 
2023-07-19 10:25:22.8355|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Event/CreateEvent application/x-www-form-urlencoded 610 - 302 0 - 1737.0845ms 
2023-07-19 10:25:22.8392|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:25:22.8392|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:25:22.8392|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:25:22.8392|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:25:22.8392|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:25:22.8392|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:25:22.8392|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:25:22.8392|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 7.9997ms. 
2023-07-19 10:25:22.8392|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 10.557ms 
2023-07-19 10:25:22.8392|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:25:22.8546|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 15.4160ms 
2023-07-19 10:25:22.8546|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:25:22.8546|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2402ms 
2023-07-19 10:25:22.8546|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:25:22.8696|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 2.9886ms 
2023-07-19 10:25:24.4040|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 10:25:24.4040|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:25:24.4040|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:25:24.4040|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:25:24.4040|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 10:25:24.4040|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 10:25:24.4040|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 10:25:24.4189|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 3.3949ms. 
2023-07-19 10:25:24.4189|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 13.8605ms 
2023-07-19 10:25:24.4189|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:25:24.4189|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 16.4822ms 
2023-07-19 10:25:24.4189|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:25:24.4189|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:25:24.4189|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3944ms 
2023-07-19 10:25:24.4352|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.6911ms 
2023-07-19 10:25:30.3797|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Event/DisplayEvent?eventid=35 - - 
2023-07-19 10:25:30.3797|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder)' 
2023-07-19 10:25:30.3797|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayEvent", controller = "Event"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayEvent(Int32) on controller Lunch_Tinder.Controllers.EventController (Lunch Tinder). 
2023-07-19 10:25:30.3797|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[EventId], [t].[Description], [t].[EventEndTime], [t].[EventStartTime], [t].[Name], [t].[Status], [t].[VenueWinner], [t].[VotingEndTime], [t].[VotingStartTime], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[RestaurantID], [t0].[RestaurantDescription], [t0].[RestaurantName]
FROM (
    SELECT TOP(1) [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
    FROM [Events] AS [e]
    WHERE [e].[EventId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [e0].[EventsEventId], [e0].[RestaurantOptionsRestaurantID], [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [EventRestaurant] AS [e0]
    INNER JOIN [Restaurants] AS [r] ON [e0].[RestaurantOptionsRestaurantID] = [r].[RestaurantID]
) AS [t0] ON [t].[EventId] = [t0].[EventsEventId]
ORDER BY [t].[EventId], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 10:25:30.3870|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[GroupId], [t0].[Description], [t0].[GroupName]
FROM (
    SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [Users] AS [u]
    WHERE [u].[UserId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t0] ON [t].[UserId] = [t0].[UsersUserId]
ORDER BY [t].[UserId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-07-19 10:25:30.3870|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__eventid_0='?' (DbType = Int32), @__userid_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v]
WHERE [v].[EventVoteID] = @__eventid_0 AND [v].[UserVoteID] = @__userid_1 
2023-07-19 10:25:30.3870|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LunchGroupEvent.cshtml. 
2023-07-19 10:25:30.4027|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LunchGroupEvent.cshtml executed in 4.9732ms. 
2023-07-19 10:25:30.4027|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder) in 22.0209ms 
2023-07-19 10:25:30.4027|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder)' 
2023-07-19 10:25:30.4027|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Event/DisplayEvent?eventid=35 - - - 200 - text/html;+charset=utf-8 24.6614ms 
2023-07-19 10:25:30.4027|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:25:30.4027|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1603ms 
2023-07-19 10:25:30.4183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:25:30.4183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.2510ms 
2023-07-19 10:25:33.7783|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Event/VoteInEvent application/x-www-form-urlencoded;+charset=UTF-8 25 
2023-07-19 10:25:33.7783|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.EventController.VoteInEvent (Lunch Tinder)' 
2023-07-19 10:25:33.7783|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "VoteInEvent", controller = "Event"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult VoteInEvent(Int32, Int32) on controller Lunch_Tinder.Controllers.EventController (Lunch Tinder). 
2023-07-19 10:25:33.7981|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__eventid_0='?' (DbType = Int32), @__userid_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Votes] AS [v]
        WHERE [v].[EventVoteID] = @__eventid_0 AND [v].[UserVoteID] = @__userid_1) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:25:54.4409|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Event/VoteInEvent application/x-www-form-urlencoded;+charset=UTF-8 25 
2023-07-19 10:25:54.4409|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.EventController.VoteInEvent (Lunch Tinder)' 
2023-07-19 10:25:54.4409|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "VoteInEvent", controller = "Event"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult VoteInEvent(Int32, Int32) on controller Lunch_Tinder.Controllers.EventController (Lunch Tinder). 
2023-07-19 10:25:54.4409|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__eventid_0='?' (DbType = Int32), @__userid_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Votes] AS [v]
        WHERE [v].[EventVoteID] = @__eventid_0 AND [v].[UserVoteID] = @__userid_1) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:25:57.0434|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Votes] ([EventVoteID], [RestaurantVoteID], [UserVoteID])
OUTPUT INSERTED.[VoteId]
VALUES (@p0, @p1, @p2); 
2023-07-19 10:25:57.0434|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Votes] ([EventVoteID], [RestaurantVoteID], [UserVoteID])
OUTPUT INSERTED.[VoteId]
VALUES (@p0, @p1, @p2); 
2023-07-19 10:26:02.9611|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[EventId], [t].[Description], [t].[EventEndTime], [t].[EventStartTime], [t].[Name], [t].[Status], [t].[VenueWinner], [t].[VotingEndTime], [t].[VotingStartTime], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[RestaurantID], [t0].[RestaurantDescription], [t0].[RestaurantName]
FROM (
    SELECT TOP(1) [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
    FROM [Events] AS [e]
    WHERE [e].[EventId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [e0].[EventsEventId], [e0].[RestaurantOptionsRestaurantID], [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [EventRestaurant] AS [e0]
    INNER JOIN [Restaurants] AS [r] ON [e0].[RestaurantOptionsRestaurantID] = [r].[RestaurantID]
) AS [t0] ON [t].[EventId] = [t0].[EventsEventId]
ORDER BY [t].[EventId], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 10:26:02.9611|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[EventId], [t].[Description], [t].[EventEndTime], [t].[EventStartTime], [t].[Name], [t].[Status], [t].[VenueWinner], [t].[VotingEndTime], [t].[VotingStartTime], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[RestaurantID], [t0].[RestaurantDescription], [t0].[RestaurantName]
FROM (
    SELECT TOP(1) [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
    FROM [Events] AS [e]
    WHERE [e].[EventId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [e0].[EventsEventId], [e0].[RestaurantOptionsRestaurantID], [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [EventRestaurant] AS [e0]
    INNER JOIN [Restaurants] AS [r] ON [e0].[RestaurantOptionsRestaurantID] = [r].[RestaurantID]
) AS [t0] ON [t].[EventId] = [t0].[EventsEventId]
ORDER BY [t].[EventId], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 10:26:05.1299|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p8='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (DbType = DateTimeOffset), @p2='?' (DbType = DateTimeOffset), @p3='?' (Size = 4000), @p4='?' (Size = 4000), @p5='?' (Size = 4000), @p6='?' (DbType = DateTimeOffset), @p7='?' (DbType = DateTimeOffset)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [Events] SET [Description] = @p0, [EventEndTime] = @p1, [EventStartTime] = @p2, [Name] = @p3, [Status] = @p4, [VenueWinner] = @p5, [VotingEndTime] = @p6, [VotingStartTime] = @p7
OUTPUT 1
WHERE [EventId] = @p8; 
2023-07-19 10:26:05.1299|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p8='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (DbType = DateTimeOffset), @p2='?' (DbType = DateTimeOffset), @p3='?' (Size = 4000), @p4='?' (Size = 4000), @p5='?' (Size = 4000), @p6='?' (DbType = DateTimeOffset), @p7='?' (DbType = DateTimeOffset)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [Events] SET [Description] = @p0, [EventEndTime] = @p1, [EventStartTime] = @p2, [Name] = @p3, [Status] = @p4, [VenueWinner] = @p5, [VotingEndTime] = @p6, [VotingStartTime] = @p7
OUTPUT 1
WHERE [EventId] = @p8; 
2023-07-19 10:26:10.2695|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 200 
2023-07-19 10:26:10.2695|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 200 
2023-07-19 10:26:10.2695|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.EventController.VoteInEvent (Lunch Tinder) in 15828.0108ms 
2023-07-19 10:26:10.2695|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.EventController.VoteInEvent (Lunch Tinder) in 36489.8978ms 
2023-07-19 10:26:10.2695|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.EventController.VoteInEvent (Lunch Tinder)' 
2023-07-19 10:26:10.2695|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.EventController.VoteInEvent (Lunch Tinder)' 
2023-07-19 10:26:10.2695|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Event/VoteInEvent application/x-www-form-urlencoded;+charset=UTF-8 25 - 200 0 - 36491.9493ms 
2023-07-19 10:26:10.2695|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Event/VoteInEvent application/x-www-form-urlencoded;+charset=UTF-8 25 - 200 0 - 15829.3646ms 
2023-07-19 10:26:16.7865|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:26:16.7865|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2991ms 
2023-07-19 10:26:18.7166|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Event/DisplayEvent?eventid=35 - - 
2023-07-19 10:26:18.7166|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder)' 
2023-07-19 10:26:18.7166|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayEvent", controller = "Event"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayEvent(Int32) on controller Lunch_Tinder.Controllers.EventController (Lunch Tinder). 
2023-07-19 10:26:18.7166|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[EventId], [t].[Description], [t].[EventEndTime], [t].[EventStartTime], [t].[Name], [t].[Status], [t].[VenueWinner], [t].[VotingEndTime], [t].[VotingStartTime], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID], [t0].[RestaurantID], [t0].[RestaurantDescription], [t0].[RestaurantName]
FROM (
    SELECT TOP(1) [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
    FROM [Events] AS [e]
    WHERE [e].[EventId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [e0].[EventsEventId], [e0].[RestaurantOptionsRestaurantID], [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
    FROM [EventRestaurant] AS [e0]
    INNER JOIN [Restaurants] AS [r] ON [e0].[RestaurantOptionsRestaurantID] = [r].[RestaurantID]
) AS [t0] ON [t].[EventId] = [t0].[EventsEventId]
ORDER BY [t].[EventId], [t0].[EventsEventId], [t0].[RestaurantOptionsRestaurantID] 
2023-07-19 10:26:18.7166|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[GroupId], [t0].[Description], [t0].[GroupName]
FROM (
    SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [Users] AS [u]
    WHERE [u].[UserId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t0] ON [t].[UserId] = [t0].[UsersUserId]
ORDER BY [t].[UserId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-07-19 10:26:18.7166|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__eventid_0='?' (DbType = Int32), @__userid_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v]
WHERE [v].[EventVoteID] = @__eventid_0 AND [v].[UserVoteID] = @__userid_1 
2023-07-19 10:26:18.7166|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LunchGroupEvent.cshtml. 
2023-07-19 10:26:18.7310|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LunchGroupEvent.cshtml executed in 4.91ms. 
2023-07-19 10:26:18.7310|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder) in 13.3428ms 
2023-07-19 10:26:18.7310|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.EventController.DisplayEvent (Lunch Tinder)' 
2023-07-19 10:26:18.7310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Event/DisplayEvent?eventid=35 - - - 200 - text/html;+charset=utf-8 18.1870ms 
2023-07-19 10:26:18.7310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:26:18.7310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:26:18.7310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4147ms 
2023-07-19 10:26:18.7471|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.0053ms 
2023-07-19 10:26:20.4116|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Event/VoteInEvent application/x-www-form-urlencoded;+charset=UTF-8 25 
2023-07-19 10:26:20.4116|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.EventController.VoteInEvent (Lunch Tinder)' 
2023-07-19 10:26:20.4116|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "VoteInEvent", controller = "Event"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult VoteInEvent(Int32, Int32) on controller Lunch_Tinder.Controllers.EventController (Lunch Tinder). 
2023-07-19 10:26:22.8680|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__eventid_0='?' (DbType = Int32), @__userid_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Votes] AS [v]
        WHERE [v].[EventVoteID] = @__eventid_0 AND [v].[UserVoteID] = @__userid_1) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:22.8680|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__eventid_0='?' (DbType = Int32), @__userid_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v]
WHERE [v].[EventVoteID] = @__eventid_0 AND [v].[UserVoteID] = @__userid_1 
2023-07-19 10:26:22.8718|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [Votes] SET [EventVoteID] = @p0, [RestaurantVoteID] = @p1, [UserVoteID] = @p2
OUTPUT 1
WHERE [VoteId] = @p3; 
2023-07-19 10:26:22.8718|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 200 
2023-07-19 10:26:22.8718|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.EventController.VoteInEvent (Lunch Tinder) in 2459.725ms 
2023-07-19 10:26:22.8718|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.EventController.VoteInEvent (Lunch Tinder)' 
2023-07-19 10:26:22.8718|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Event/VoteInEvent application/x-www-form-urlencoded;+charset=UTF-8 25 - 200 0 - 2460.5305ms 
2023-07-19 10:26:41.1193|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-07-19 10:26:43.0643|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (32ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:26:43.1097|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:26:43.1097|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-07-19 10:26:43.1097|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-07-19 10:26:43.1370|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-07-19 10:26:43.1579|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-07-19 10:26:43.3283|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-07-19 10:26:43.3283|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-07-19 10:26:43.3283|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-07-19 10:26:43.3283|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-07-19 10:26:43.3283|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-07-19 10:26:43.8084|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-07-19 10:26:43.9078|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:26:43.9262|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login(System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-07-19 10:26:43.9581|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-07-19 10:26:43.9581|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 32.2751ms 
2023-07-19 10:26:43.9581|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-07-19 10:26:43.9819|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-07-19 10:26:43.9819|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 176.3636ms 
2023-07-19 10:26:43.9964|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:26:43.9964|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:44.2485|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EventEndTime], [e].[EventStartTime], [e].[Name], [e].[Status], [e].[VenueWinner], [e].[VotingEndTime], [e].[VotingStartTime]
FROM [Events] AS [e] 
2023-07-19 10:26:44.5617|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:26:44.5795|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime]
FROM [LunchGroups] AS [l]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t] ON [l].[GroupId] = [t].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [l].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [l].[GroupId], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[UserId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId] 
2023-07-19 10:26:44.6372|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType], [t].[LunchGroupsGroupId], [t].[UsersUserId], [t].[GroupId], [t].[Description], [t].[GroupName]
FROM [Users] AS [u]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t] ON [u].[UserId] = [t].[UsersUserId]
ORDER BY [u].[UserId], [t].[LunchGroupsGroupId], [t].[UsersUserId] 
2023-07-19 10:26:44.6372|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-07-19 10:26:44.7829|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 141.1794ms. 
2023-07-19 10:26:44.7829|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 789.161ms 
2023-07-19 10:26:44.7829|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-07-19 10:26:44.8177|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 835.7328ms 
2023-07-19 10:26:44.8177|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:26:44.8236|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.6129ms 
2023-07-19 10:26:44.8236|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:26:44.8453|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 13.9723ms 
2023-07-19 10:26:47.9986|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:26:47.9986|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:26:47.9986|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:48.0803|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:26:48.1344|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (39ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:26:48.1458|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-07-19 10:26:48.1554|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:26:48.1554|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:26:48.1684|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:26:48.2421|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 74.1095ms. 
2023-07-19 10:26:48.2421|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 234.6429ms 
2023-07-19 10:26:48.2421|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:26:48.2459|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 247.2386ms 
2023-07-19 10:26:48.2459|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:26:48.2459|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - 
2023-07-19 10:26:48.2459|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.5619ms 
2023-07-19 10:26:48.2616|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/createevent.js was not modified 
2023-07-19 10:26:48.2616|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/createevent.js?v=jZRjReXXNeM6qaHrdx4LZ6MDSuHdNjOTklcJPYaAWGU - - - 304 - application/javascript 7.5083ms 
2023-07-19 10:26:48.2616|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:26:48.2616|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.1108ms 
2023-07-19 10:26:50.5048|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=d - - 
2023-07-19 10:26:50.5048|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:50.5048|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:50.5263|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:50.5263|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:50.5567|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 50.0574ms 
2023-07-19 10:26:50.5567|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:50.5573|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=d - - - 200 - application/json;+charset=utf-8 52.5269ms 
2023-07-19 10:26:50.6803|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=df - - 
2023-07-19 10:26:50.6803|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:50.6803|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:50.6839|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:50.6839|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:50.6839|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 3.4485ms 
2023-07-19 10:26:50.6839|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:50.6839|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=df - - - 200 - application/json;+charset=utf-8 4.0205ms 
2023-07-19 10:26:50.8714|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dfd - - 
2023-07-19 10:26:50.8714|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:50.8714|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:50.8714|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:50.8714|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:50.8714|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.3175ms 
2023-07-19 10:26:50.8714|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:50.8714|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dfd - - - 200 - application/json;+charset=utf-8 1.8818ms 
2023-07-19 10:26:51.0679|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dfdf - - 
2023-07-19 10:26:51.0679|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:51.0679|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:51.0679|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:51.0679|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:51.0679|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.5701ms 
2023-07-19 10:26:51.0679|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:51.0679|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dfdf - - - 200 - application/json;+charset=utf-8 2.3586ms 
2023-07-19 10:26:51.7859|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dfdfd - - 
2023-07-19 10:26:51.7859|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:51.7859|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:51.7859|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:51.7859|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:51.7859|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.5932ms 
2023-07-19 10:26:51.7859|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:51.7859|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dfdfd - - - 200 - application/json;+charset=utf-8 2.4919ms 
2023-07-19 10:26:53.1254|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dfdf - - 
2023-07-19 10:26:53.1254|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:53.1254|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:53.1254|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:53.1254|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:53.1254|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.3628ms 
2023-07-19 10:26:53.1254|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:53.1254|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dfdf - - - 200 - application/json;+charset=utf-8 2.1234ms 
2023-07-19 10:26:53.6310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dfd - - 
2023-07-19 10:26:53.6310|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:53.6310|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:53.6310|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:53.6310|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:53.6310|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0573ms 
2023-07-19 10:26:53.6310|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:53.6310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=dfd - - - 200 - application/json;+charset=utf-8 1.5720ms 
2023-07-19 10:26:53.6634|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=df - - 
2023-07-19 10:26:53.6634|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:53.6634|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:53.6634|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:53.6634|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:53.6634|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9167ms 
2023-07-19 10:26:53.6634|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:53.6634|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=df - - - 200 - application/json;+charset=utf-8 1.5038ms 
2023-07-19 10:26:53.6955|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=d - - 
2023-07-19 10:26:53.6955|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:53.6955|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:53.6955|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:53.6955|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:53.6955|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0795ms 
2023-07-19 10:26:53.6955|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:53.6955|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=d - - - 200 - application/json;+charset=utf-8 1.7004ms 
2023-07-19 10:26:54.5118|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=u - - 
2023-07-19 10:26:54.5118|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:54.5118|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:54.5118|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:54.5118|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:54.5118|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0855ms 
2023-07-19 10:26:54.5118|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:54.5118|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=u - - - 200 - application/json;+charset=utf-8 1.9337ms 
2023-07-19 10:26:54.6503|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=us - - 
2023-07-19 10:26:54.6503|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:54.6509|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:54.6509|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:54.6509|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:54.6509|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.3907ms 
2023-07-19 10:26:54.6509|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:54.6509|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=us - - - 200 - application/json;+charset=utf-8 2.2588ms 
2023-07-19 10:26:54.8748|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=use - - 
2023-07-19 10:26:54.8748|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:54.8748|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:54.8748|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:54.8748|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:54.8748|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9571ms 
2023-07-19 10:26:54.8748|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:54.8748|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=use - - - 200 - application/json;+charset=utf-8 1.4187ms 
2023-07-19 10:26:55.0082|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=user - - 
2023-07-19 10:26:55.0082|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:55.0082|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:55.0082|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:55.0082|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:55.0082|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.2282ms 
2023-07-19 10:26:55.0082|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:55.0100|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=user - - - 200 - application/json;+charset=utf-8 1.8208ms 
2023-07-19 10:26:56.1432|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=useremail@gmail.com - - 
2023-07-19 10:26:56.1432|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:56.1432|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:56.1432|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__emailusername_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[UserName] = @__emailusername_0 OR [u].[EmailAddress] = @__emailusername_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-07-19 10:26:56.1432|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType1`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-07-19 10:26:56.1432|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.2726ms 
2023-07-19 10:26:56.1432|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-07-19 10:26:56.1432|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?emailusername=useremail@gmail.com - - - 200 - application/json;+charset=utf-8 2.1270ms 
2023-07-19 10:26:58.3549|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-07-19 10:26:58.3549|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-07-19 10:26:58.3549|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:26:58.3918|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[UserId], [t].[EmailAddress], [t].[Password], [t].[UserName], [t].[UserType], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[GroupId], [t0].[Description], [t0].[GroupName]
FROM (
    SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [Users] AS [u]
    WHERE [u].[UserId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [l].[LunchGroupsGroupId], [l].[UsersUserId], [l0].[GroupId], [l0].[Description], [l0].[GroupName]
    FROM [LunchGroupUser] AS [l]
    INNER JOIN [LunchGroups] AS [l0] ON [l].[LunchGroupsGroupId] = [l0].[GroupId]
) AS [t0] ON [t].[UserId] = [t0].[UsersUserId]
ORDER BY [t].[UserId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-07-19 10:26:58.5009|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-07-19 10:26:58.5481|INFO|Lunch_Tinder.Services.MailService|initiating send mail async method 
2023-07-19 10:27:00.5359|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/DisplayGroups?groupName=Software%20Development. 
2023-07-19 10:27:00.5359|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 2171.2602ms 
2023-07-19 10:27:00.5359|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-07-19 10:27:00.5359|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 302 0 - 2181.5602ms 
2023-07-19 10:27:00.5359|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-07-19 10:27:00.5359|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:27:00.5359|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-07-19 10:27:00.5419|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__name_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType], [t1].[EventsEventId], [t1].[LunchGroupsGroupId], [t1].[EventId], [t1].[Description], [t1].[EventEndTime], [t1].[EventStartTime], [t1].[Name], [t1].[Status], [t1].[VenueWinner], [t1].[VotingEndTime], [t1].[VotingStartTime]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupName] = @__name_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t1].[EventsEventId], [t1].[LunchGroupsGroupId] 
2023-07-19 10:27:00.5419|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__groupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EventEndTime], [t0].[EventStartTime], [t0].[Name], [t0].[Status], [t0].[VenueWinner], [t0].[VotingEndTime], [t0].[VotingStartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__groupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EventEndTime], [e0].[EventStartTime], [e0].[Name], [e0].[Status], [e0].[VenueWinner], [e0].[VotingEndTime], [e0].[VotingStartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-07-19 10:27:00.5419|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[RestaurantDescription], [r].[RestaurantName]
FROM [Restaurants] AS [r] 
2023-07-19 10:27:00.5419|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-07-19 10:27:00.5419|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 8.7456ms. 
2023-07-19 10:27:00.5419|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 11.3053ms 
2023-07-19 10:27:00.5419|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-07-19 10:27:00.5419|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 15.4804ms 
2023-07-19 10:27:00.5617|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-07-19 10:27:00.5617|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-07-19 10:27:00.5617|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4557ms 
2023-07-19 10:27:00.5617|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.6093ms 
