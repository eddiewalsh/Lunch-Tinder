2023-06-15 09:14:52.9987|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 09:14:57.9183|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:14:57.9588|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:14:57.9588|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:14:57.9588|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:14:57.9840|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 09:14:58.0013|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 09:14:58.3511|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 09:14:58.3511|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 09:14:58.3529|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 09:14:58.3529|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 09:14:58.3529|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 09:14:59.0361|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 09:14:59.1541|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:14:59.1541|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 09:14:59.1778|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 09:14:59.4314|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 256.5595ms. 
2023-06-15 09:14:59.4314|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 270.0582ms 
2023-06-15 09:14:59.4314|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:14:59.5630|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/lib/bootstrap/dist/css/bootstrap.min.css - - 
2023-06-15 09:14:59.5630|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:14:59.5630|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 533.1335ms 
2023-06-15 09:14:59.5630|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 3.8912ms 
2023-06-15 09:14:59.5630|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /lib/bootstrap/dist/css/bootstrap.min.css was not modified 
2023-06-15 09:14:59.5630|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/lib/bootstrap/dist/css/bootstrap.min.css - - - 304 - text/css 7.1721ms 
2023-06-15 09:14:59.5823|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:14:59.6199|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 37.5957ms 
2023-06-15 09:15:05.9261|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 
2023-06-15 09:15:05.9261|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:15:05.9406|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 09:15:06.2547|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:15:06.4291|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:15:06.5678|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 09:15:06.5678|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 09:15:06.5678|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 628.121ms 
2023-06-15 09:15:06.5678|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:15:06.5717|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 09:15:06.5717|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 - 302 0 - 650.3839ms 
2023-06-15 09:15:06.5717|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:15:06.5717|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:15:06.6188|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 09:15:06.6381|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:15:06.6381|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:15:06.6494|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 09:15:06.6749|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 25.8523ms. 
2023-06-15 09:15:06.6749|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 97.5912ms 
2023-06-15 09:15:06.6749|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:15:06.6749|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 104.8820ms 
2023-06-15 09:15:06.6913|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:15:06.6913|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4031ms 
2023-06-15 09:15:06.6913|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - 
2023-06-15 09:15:06.6913|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/site.css was not modified 
2023-06-15 09:15:06.6913|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/site.css?v=DCYbtMtBGubm-VvPIQkAacWcbAqPwaD8d0W4nXWnuqY - - - 304 - text/css 0.5199ms 
2023-06-15 09:15:06.6913|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/AdminHome.css?v=F2KrEDiClOWB4ilhngcxQStMPXrsXhQivzE1yTjnAAc - - 
2023-06-15 09:15:06.6913|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/AdminHome.css was not modified 
2023-06-15 09:15:06.6913|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/AdminHome.css?v=F2KrEDiClOWB4ilhngcxQStMPXrsXhQivzE1yTjnAAc - - - 304 - text/css 0.2570ms 
2023-06-15 09:15:06.6990|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:15:06.6990|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.0400ms 
2023-06-15 09:16:26.5771|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:16:26.5771|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:16:26.5771|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:16:26.5937|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:16:26.8646|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 09:16:26.9420|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (58ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:16:26.9497|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:16:26.9864|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 37.0275ms. 
2023-06-15 09:16:26.9864|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 399.4652ms 
2023-06-15 09:16:26.9864|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:16:26.9864|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 417.4938ms 
2023-06-15 09:16:27.0006|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:16:27.0006|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:16:27.0006|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2383ms 
2023-06-15 09:16:27.0006|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-06-15 09:16:27.0120|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:16:27.0120|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/LunchGroupDetails.css was not modified 
2023-06-15 09:16:27.0120|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 304 - text/css 5.2014ms 
2023-06-15 09:16:27.0120|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.0467ms 
2023-06-15 09:16:27.0120|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-06-15 09:16:27.0120|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 200 9813 application/javascript 18.5356ms 
2023-06-15 09:16:31.1436|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - 
2023-06-15 09:16:31.1436|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:16:31.1436|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:16:31.1664|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:16:31.1664|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:16:31.1953|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 49.5382ms 
2023-06-15 09:16:31.1953|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:16:31.1953|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - - 200 - application/json;+charset=utf-8 51.8919ms 
2023-06-15 09:16:32.0859|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 09:16:32.0859|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:16:32.0932|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:16:32.2094|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 09:16:32.2341|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:16:32.2341|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 4.9086ms. 
2023-06-15 09:16:32.2341|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 145.8109ms 
2023-06-15 09:16:32.2341|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:16:32.2341|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 155.3122ms 
2023-06-15 09:16:32.2499|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:16:32.2499|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:16:32.2499|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3866ms 
2023-06-15 09:16:32.2499|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.6298ms 
2023-06-15 09:17:11.8775|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 09:17:13.6140|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:17:13.6531|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:17:13.6531|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:17:13.6531|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:17:13.6774|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 09:17:13.6944|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 09:17:13.8557|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 09:17:13.8557|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 09:17:13.8557|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 09:17:13.8557|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 09:17:13.8557|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 09:17:14.5220|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 09:17:14.6180|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:17:14.6308|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 09:17:14.6539|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 09:17:14.6539|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 23.212ms 
2023-06-15 09:17:14.6539|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:17:14.6787|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 09:17:14.6787|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 159.4452ms 
2023-06-15 09:17:14.7037|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:17:14.7037|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:17:14.9486|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 09:17:14.9974|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:17:15.0118|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:17:15.0286|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 09:17:15.1623|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 137.8622ms. 
2023-06-15 09:17:15.1660|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 461.3508ms 
2023-06-15 09:17:15.1660|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:17:15.1976|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:17:15.1976|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 520.4012ms 
2023-06-15 09:17:15.1976|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.0278ms 
2023-06-15 09:17:15.1976|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:17:15.2223|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.1759ms 
2023-06-15 09:17:16.3237|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:17:16.3237|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:17:16.3237|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:17:16.3893|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:17:16.6755|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 09:17:16.7349|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:17:16.7349|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:17:16.7828|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 40.5306ms. 
2023-06-15 09:17:16.7828|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 446.276ms 
2023-06-15 09:17:16.7828|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:17:16.7828|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 460.9979ms 
2023-06-15 09:17:16.7921|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:17:16.7921|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:17:16.7921|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4508ms 
2023-06-15 09:17:16.7921|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:17:16.7921|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 6.1837ms 
2023-06-15 09:17:16.7921|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:17:16.8076|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 8.0061ms 
2023-06-15 09:17:19.5741|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - 
2023-06-15 09:17:19.5741|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:17:19.5741|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:17:19.5965|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:17:19.5965|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:17:19.6235|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 47.7344ms 
2023-06-15 09:17:19.6235|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:17:19.6235|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - - 200 - application/json;+charset=utf-8 50.2609ms 
2023-06-15 09:17:20.5061|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 09:17:20.5061|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:17:20.5167|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:17:20.6556|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 09:17:20.6818|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:17:20.6818|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 5.4769ms. 
2023-06-15 09:17:20.6818|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 170.5761ms 
2023-06-15 09:17:20.6818|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:17:20.6818|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 183.2008ms 
2023-06-15 09:17:20.6818|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:17:20.6818|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:17:20.6818|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3406ms 
2023-06-15 09:17:20.7009|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.9410ms 
2023-06-15 09:18:34.5467|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 09:18:36.3567|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (26ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:18:36.3986|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:18:36.4013|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:18:36.4013|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:18:36.4248|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 09:18:36.4442|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 09:18:36.6224|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 09:18:36.6224|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 09:18:36.6224|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 09:18:36.6224|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 09:18:36.6224|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 09:18:37.3530|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 09:18:37.4469|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:18:37.4469|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 09:18:37.4818|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 09:18:37.4818|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 23.8598ms 
2023-06-15 09:18:37.4818|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:18:37.5049|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 09:18:37.5049|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 155.6715ms 
2023-06-15 09:18:37.5131|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:18:37.5131|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:18:37.7662|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 09:18:37.8159|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:18:37.8306|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:18:37.8488|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 09:18:37.9951|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 150.8296ms. 
2023-06-15 09:18:37.9951|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 484.7251ms 
2023-06-15 09:18:37.9951|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:18:38.0301|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:18:38.0301|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 525.4271ms 
2023-06-15 09:18:38.0301|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.3114ms 
2023-06-15 09:18:38.0301|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:18:38.0550|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 16.5391ms 
2023-06-15 09:18:38.9300|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:18:38.9342|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:18:38.9342|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:18:39.0008|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:18:39.2928|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 09:18:39.3536|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (41ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:18:39.3536|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:18:39.4061|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 44.4763ms. 
2023-06-15 09:18:39.4061|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 462.9737ms 
2023-06-15 09:18:39.4061|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:18:39.4061|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 478.1628ms 
2023-06-15 09:18:39.4180|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:18:39.4180|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:18:39.4180|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.5073ms 
2023-06-15 09:18:39.4180|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:18:39.4180|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 6.8763ms 
2023-06-15 09:18:39.4180|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:18:39.4306|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.3688ms 
2023-06-15 09:18:42.6144|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - 
2023-06-15 09:18:42.6144|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:18:42.6144|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:18:42.6367|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:18:42.6367|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:18:42.6671|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 50.8759ms 
2023-06-15 09:18:42.6671|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:18:42.6671|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - - 200 - application/json;+charset=utf-8 52.8719ms 
2023-06-15 09:18:43.3789|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 09:18:43.3789|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:18:43.3877|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:18:43.5331|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 09:18:43.5597|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:18:43.5597|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 5.5299ms. 
2023-06-15 09:18:43.5597|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 177.5026ms 
2023-06-15 09:18:43.5597|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:18:43.5597|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 188.1912ms 
2023-06-15 09:18:43.5750|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:18:43.5750|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:18:43.5750|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4144ms 
2023-06-15 09:18:43.5750|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 8.0021ms 
2023-06-15 09:19:49.0247|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 09:19:50.8277|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (30ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:19:50.8682|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:19:50.8707|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:19:50.8707|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:19:50.8931|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 09:19:50.9119|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 09:19:51.0719|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 09:19:51.0719|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 09:19:51.0719|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 09:19:51.0719|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 09:19:51.0719|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 09:19:51.6387|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 09:19:51.7317|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:19:51.7317|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 09:19:51.7649|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 09:19:51.7649|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 22.8395ms 
2023-06-15 09:19:51.7649|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:19:51.7874|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 09:19:51.7874|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 151.4420ms 
2023-06-15 09:19:51.7948|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:19:51.7948|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:19:52.0658|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 09:19:52.1153|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:19:52.1289|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:19:52.1448|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 09:19:52.2687|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 127.9715ms. 
2023-06-15 09:19:52.2687|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 476.3678ms 
2023-06-15 09:19:52.2687|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:19:52.3027|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:19:52.3027|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 516.2544ms 
2023-06-15 09:19:52.3076|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.8371ms 
2023-06-15 09:19:52.3076|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:19:52.3296|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.2490ms 
2023-06-15 09:20:01.2194|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:20:01.2194|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:20:01.2324|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:20:01.2842|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:20:01.5581|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 09:20:01.6147|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (38ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:20:01.6226|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:20:01.6625|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 40.2818ms. 
2023-06-15 09:20:01.6625|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 430.1877ms 
2023-06-15 09:20:01.6625|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:20:01.6669|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 447.5691ms 
2023-06-15 09:20:01.6669|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:20:01.6669|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:20:01.6669|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4277ms 
2023-06-15 09:20:01.6669|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:20:01.6669|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 5.7866ms 
2023-06-15 09:20:01.6669|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:20:01.6863|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.7438ms 
2023-06-15 09:20:04.4899|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - 
2023-06-15 09:20:04.4899|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:20:04.4899|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:20:04.5129|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:20:04.5129|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:20:04.5399|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 47.7252ms 
2023-06-15 09:20:04.5399|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:20:04.5399|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - - 200 - application/json;+charset=utf-8 50.2935ms 
2023-06-15 09:20:07.8280|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - 
2023-06-15 09:20:07.8280|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:20:07.8280|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:20:07.8280|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:20:07.8280|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:20:07.8280|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 3.0384ms 
2023-06-15 09:20:07.8280|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:20:07.8280|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - - 200 - application/json;+charset=utf-8 3.7154ms 
2023-06-15 09:21:37.5629|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 09:21:39.3107|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:21:39.3512|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:21:39.3537|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:21:39.3537|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:21:39.3761|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 09:21:39.3941|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 09:21:39.5526|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 09:21:39.5526|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 09:21:39.5526|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 09:21:39.5526|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 09:21:39.5526|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 09:21:39.9273|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 09:21:40.0179|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:21:40.0287|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 09:21:40.0498|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 09:21:40.0498|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 21.4787ms 
2023-06-15 09:21:40.0498|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:21:40.0724|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 09:21:40.0724|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 147.8378ms 
2023-06-15 09:21:40.0724|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:21:40.0724|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:21:40.3148|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 09:21:40.3666|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:21:40.3807|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:21:40.3967|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 09:21:40.5267|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 133.9641ms. 
2023-06-15 09:21:40.5267|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 448.1675ms 
2023-06-15 09:21:40.5267|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:21:40.5605|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:21:40.5605|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 488.9163ms 
2023-06-15 09:21:40.5605|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.7652ms 
2023-06-15 09:21:40.5605|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:21:40.5893|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 18.4225ms 
2023-06-15 09:21:41.5201|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:21:41.5250|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:21:41.5250|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:21:41.5919|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:21:41.8587|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 09:21:41.9159|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (39ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:21:41.9159|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:21:41.9651|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 41.6752ms. 
2023-06-15 09:21:41.9651|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 431.4007ms 
2023-06-15 09:21:41.9651|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:21:41.9651|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 446.7592ms 
2023-06-15 09:21:41.9651|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:21:41.9651|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:21:41.9651|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4074ms 
2023-06-15 09:21:41.9801|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:21:41.9801|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 6.0850ms 
2023-06-15 09:21:41.9801|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:21:41.9801|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.9516ms 
2023-06-15 09:21:44.4827|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - 
2023-06-15 09:21:44.4827|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:21:44.4827|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:21:44.5049|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:21:44.5049|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:21:44.5339|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 49.5111ms 
2023-06-15 09:21:44.5339|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:21:44.5339|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - - 200 - application/json;+charset=utf-8 51.3373ms 
2023-06-15 09:24:52.5545|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 09:24:54.3144|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:24:54.3549|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:24:54.3549|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:24:54.3549|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:24:54.3797|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 09:24:54.3974|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 09:24:54.5571|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 09:24:54.5571|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 09:24:54.5571|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 09:24:54.5571|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 09:24:54.5571|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 09:24:55.2883|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 09:24:55.3848|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:24:55.3848|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 09:24:55.4210|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 09:24:55.4210|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 24.1621ms 
2023-06-15 09:24:55.4210|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:24:55.4445|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 09:24:55.4445|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 158.8830ms 
2023-06-15 09:24:55.4548|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:24:55.4548|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:24:55.6999|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 09:24:55.7517|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:24:55.7666|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:24:55.7827|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 09:24:55.9069|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 128.1038ms. 
2023-06-15 09:24:55.9069|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 456.4347ms 
2023-06-15 09:24:55.9069|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:24:55.9455|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 500.6667ms 
2023-06-15 09:24:55.9455|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:24:55.9499|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.3131ms 
2023-06-15 09:24:55.9499|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:24:55.9773|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 21.6816ms 
2023-06-15 09:24:57.4508|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:24:57.4508|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:24:57.4647|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:24:57.5186|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:24:57.7995|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 09:24:57.8570|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (38ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:24:57.8570|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:24:57.9090|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 44.2815ms. 
2023-06-15 09:24:57.9090|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 444.3273ms 
2023-06-15 09:24:57.9090|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:24:57.9090|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 459.9072ms 
2023-06-15 09:24:57.9183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:24:57.9183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:24:57.9183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3893ms 
2023-06-15 09:24:57.9183|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:24:57.9183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 5.3281ms 
2023-06-15 09:24:57.9183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:24:57.9328|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.4876ms 
2023-06-15 09:25:48.6183|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 09:25:50.3951|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:25:50.4345|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:25:50.4345|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:25:50.4345|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:25:50.4594|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 09:25:50.4767|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 09:25:50.6380|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 09:25:50.6380|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 09:25:50.6380|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 09:25:50.6380|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 09:25:50.6380|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 09:25:51.3977|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 09:25:51.4955|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:25:51.4955|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 09:25:51.5290|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 09:25:51.5290|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 22.7878ms 
2023-06-15 09:25:51.5290|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:25:51.5559|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 09:25:51.5559|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 161.8776ms 
2023-06-15 09:25:51.5559|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:25:51.5559|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:25:51.8443|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 09:25:51.8944|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:25:51.9087|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:25:51.9277|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 09:25:52.0566|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 134.8634ms. 
2023-06-15 09:25:52.0566|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 494.724ms 
2023-06-15 09:25:52.0566|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:25:52.0929|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 537.0157ms 
2023-06-15 09:25:52.0929|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:25:52.0929|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.2506ms 
2023-06-15 09:25:52.0929|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:25:52.1160|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.0167ms 
2023-06-15 09:25:53.4276|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:25:53.4320|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:25:53.4320|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:25:53.4928|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:25:53.7681|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 09:25:53.8263|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (38ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:25:53.8263|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:25:53.8765|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 42.8065ms. 
2023-06-15 09:25:53.8765|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 435.1926ms 
2023-06-15 09:25:53.8765|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:25:53.8765|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 451.0924ms 
2023-06-15 09:25:53.8871|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:25:53.8871|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3118ms 
2023-06-15 09:25:53.8871|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:25:53.8871|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.5963ms 
2023-06-15 09:27:25.6023|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 09:27:27.4532|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (32ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:27:27.4986|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:27:27.4986|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:27:27.4986|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:27:27.5248|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 09:27:27.5427|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 09:27:27.7130|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 09:27:27.7130|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 09:27:27.7130|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 09:27:27.7130|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 09:27:27.7130|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 09:27:28.3492|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 09:27:28.4527|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:27:28.4647|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 09:27:28.4893|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 09:27:28.4938|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 24.8402ms 
2023-06-15 09:27:28.4938|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:27:28.5153|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 168.0591ms 
2023-06-15 09:27:28.5153|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 09:27:28.5153|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:27:28.5243|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:27:28.7785|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 09:27:28.8287|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:27:28.8453|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:27:28.8636|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 09:27:28.9956|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 137.2457ms. 
2023-06-15 09:27:28.9956|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 475.6392ms 
2023-06-15 09:27:28.9956|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:27:29.0337|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:27:29.0337|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 521.8662ms 
2023-06-15 09:27:29.0337|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 3.8085ms 
2023-06-15 09:27:29.0460|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:27:29.0614|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.4329ms 
2023-06-15 09:27:30.2068|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:27:30.2068|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:27:30.2210|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:27:30.2769|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:27:30.5603|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 09:27:30.6281|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (45ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:27:30.6370|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:27:30.6840|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 47.5082ms. 
2023-06-15 09:27:30.6840|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 463.088ms 
2023-06-15 09:27:30.6840|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:27:30.6840|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 479.2383ms 
2023-06-15 09:27:30.6840|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:27:30.6840|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:27:30.6840|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3955ms 
2023-06-15 09:27:30.7004|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:27:30.7004|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 5.9160ms 
2023-06-15 09:27:30.7004|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:27:30.7004|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 9.3276ms 
2023-06-15 09:28:23.8856|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:28:23.8856|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:28:23.8856|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:28:23.8856|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:28:23.8856|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:28:23.8856|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:28:23.9130|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 15.9614ms. 
2023-06-15 09:28:23.9130|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 21.501ms 
2023-06-15 09:28:23.9130|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:28:23.9171|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 31.4585ms 
2023-06-15 09:28:23.9171|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:28:23.9171|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:28:23.9171|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3546ms 
2023-06-15 09:28:23.9171|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.4813ms 
2023-06-15 09:28:23.9629|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/favicon.ico - - 
2023-06-15 09:28:23.9629|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /favicon.ico was not modified 
2023-06-15 09:28:23.9629|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/favicon.ico - - - 304 - image/x-icon 0.6051ms 
2023-06-15 09:28:39.7624|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:28:39.7624|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:28:39.7624|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:28:39.7624|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:28:39.7624|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:28:39.7624|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:28:39.7827|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 16.3345ms. 
2023-06-15 09:28:39.7827|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 18.5182ms 
2023-06-15 09:28:39.7827|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:28:39.7827|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 25.3603ms 
2023-06-15 09:28:39.7950|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:28:39.7950|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 3.4434ms 
2023-06-15 09:28:39.7950|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:28:39.7950|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.6909ms 
2023-06-15 09:29:36.3918|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 09:29:38.1449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:29:38.1870|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:29:38.1870|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:29:38.1870|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:29:38.2144|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 09:29:38.2328|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 09:29:38.4045|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 09:29:38.4045|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 09:29:38.4045|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 09:29:38.4045|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 09:29:38.4045|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 09:29:39.1851|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 09:29:39.2794|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:29:39.2904|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 09:29:39.3134|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 09:29:39.3134|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 23.6242ms 
2023-06-15 09:29:39.3134|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:29:39.3377|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 09:29:39.3377|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 155.5799ms 
2023-06-15 09:29:39.3377|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:29:39.3377|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:29:39.5923|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 09:29:39.6418|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:29:39.6553|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:29:39.6714|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 09:29:39.8015|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 134.2207ms. 
2023-06-15 09:29:39.8015|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 458.6508ms 
2023-06-15 09:29:39.8057|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:29:39.8357|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:29:39.8357|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 499.3891ms 
2023-06-15 09:29:39.8397|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.0322ms 
2023-06-15 09:29:39.8397|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:29:39.8598|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 14.4871ms 
2023-06-15 09:29:41.0011|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:29:41.0011|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:29:41.0143|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:29:41.0687|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:29:41.3386|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 09:29:41.3953|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (38ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:29:41.4032|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:29:41.4475|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 44.6283ms. 
2023-06-15 09:29:41.4475|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 433.2284ms 
2023-06-15 09:29:41.4475|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:29:41.4475|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 448.2386ms 
2023-06-15 09:29:41.4475|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:29:41.4475|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:29:41.4475|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4852ms 
2023-06-15 09:29:41.4641|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:29:41.4641|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 5.6711ms 
2023-06-15 09:29:41.4641|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:29:41.4641|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.4985ms 
2023-06-15 09:29:59.8181|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:29:59.8181|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:29:59.8181|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:29:59.8244|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:29:59.8244|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:29:59.8244|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:29:59.8432|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 15.5743ms. 
2023-06-15 09:29:59.8432|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 22.42ms 
2023-06-15 09:29:59.8432|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:29:59.8432|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 28.9182ms 
2023-06-15 09:29:59.8432|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:29:59.8432|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:29:59.8432|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3888ms 
2023-06-15 09:29:59.8554|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.7346ms 
2023-06-15 09:30:19.3045|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:30:19.3056|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:30:19.3056|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:30:19.3056|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:30:19.3056|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:30:19.3056|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:30:19.3266|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 18.1307ms. 
2023-06-15 09:30:19.3266|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 19.9893ms 
2023-06-15 09:30:19.3266|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:30:19.3266|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 26.0451ms 
2023-06-15 09:30:19.3266|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:30:19.3266|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:30:19.3266|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3577ms 
2023-06-15 09:30:19.3389|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.0571ms 
2023-06-15 09:30:50.7935|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:30:50.7935|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:30:50.7935|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:30:50.7935|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:30:50.7935|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:30:50.7935|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:30:50.8169|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 15.3165ms. 
2023-06-15 09:30:50.8169|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 17.7162ms 
2023-06-15 09:30:50.8169|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:30:50.8215|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 27.9359ms 
2023-06-15 09:30:50.8215|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:30:50.8215|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:30:50.8215|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.4373ms 
2023-06-15 09:30:50.8215|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.7071ms 
2023-06-15 09:32:51.1353|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:32:51.1353|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:32:51.1353|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:32:51.1353|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:32:51.1353|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:32:51.1353|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:32:51.1598|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 15.7299ms. 
2023-06-15 09:32:51.1598|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 17.0133ms 
2023-06-15 09:32:51.1598|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:32:51.1598|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 26.4948ms 
2023-06-15 09:32:51.1699|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:32:51.1699|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:32:51.1699|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:32:51.1699|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2013ms 
2023-06-15 09:32:51.1699|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 3.5292ms 
2023-06-15 09:32:51.1699|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:32:51.1699|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.1213ms 
2023-06-15 09:34:12.0226|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:34:12.0226|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:34:12.0251|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:34:12.0251|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:34:12.0251|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:34:12.0251|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:34:12.0457|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 18.8056ms. 
2023-06-15 09:34:12.0457|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 20.6525ms 
2023-06-15 09:34:12.0457|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:34:12.0457|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 24.9395ms 
2023-06-15 09:34:12.0565|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:34:12.0565|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:34:12.0565|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3997ms 
2023-06-15 09:34:12.0565|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.7718ms 
2023-06-15 09:34:25.6966|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:34:25.6977|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:34:25.6977|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:34:25.6977|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:34:25.6977|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:34:25.6977|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:34:25.7163|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 15.9731ms. 
2023-06-15 09:34:25.7163|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 17.547ms 
2023-06-15 09:34:25.7163|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:34:25.7163|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 21.6530ms 
2023-06-15 09:34:25.7163|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:34:25.7163|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:34:25.7163|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2118ms 
2023-06-15 09:34:25.7311|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.6336ms 
2023-06-15 09:34:41.7723|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:34:41.7723|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:34:41.7748|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:34:41.7748|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:34:41.7748|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:34:41.7748|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:34:41.7939|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 17.4305ms. 
2023-06-15 09:34:41.7939|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 19.1077ms 
2023-06-15 09:34:41.7939|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:34:41.7939|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 23.3707ms 
2023-06-15 09:34:41.7939|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:34:41.7939|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:34:41.7939|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3687ms 
2023-06-15 09:34:41.8100|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.5049ms 
2023-06-15 09:34:59.8111|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:34:59.8111|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:34:59.8111|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:34:59.8111|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:34:59.8111|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:34:59.8111|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:34:59.8318|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 16.5712ms. 
2023-06-15 09:34:59.8318|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 18.5479ms 
2023-06-15 09:34:59.8318|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:34:59.8676|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 56.4482ms 
2023-06-15 09:34:59.8682|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:34:59.8682|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:34:59.8682|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 0.4159ms 
2023-06-15 09:34:59.8682|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:34:59.8682|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1390ms 
2023-06-15 09:34:59.8682|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:34:59.8682|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.6829ms 
2023-06-15 09:36:43.7734|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:36:43.7785|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:36:43.7785|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:36:43.7785|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:36:43.7785|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:36:43.7785|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:36:43.7965|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 15.8341ms. 
2023-06-15 09:36:43.7965|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 17.1395ms 
2023-06-15 09:36:43.7965|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:36:43.7965|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 27.3225ms 
2023-06-15 09:36:43.8110|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:36:43.8110|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:36:43.8110|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3880ms 
2023-06-15 09:36:43.8110|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.4073ms 
2023-06-15 09:37:42.7782|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:37:42.7782|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:37:42.7782|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:37:42.7782|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:37:42.7782|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:37:42.7782|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:37:42.7993|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 17.2569ms. 
2023-06-15 09:37:42.7993|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 19.0448ms 
2023-06-15 09:37:42.7993|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:37:42.7993|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 25.4843ms 
2023-06-15 09:37:42.8153|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:37:42.8153|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:37:42.8153|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3572ms 
2023-06-15 09:37:42.8153|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:37:42.8153|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 0.3206ms 
2023-06-15 09:37:42.8153|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:37:42.8218|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.0892ms 
2023-06-15 09:38:32.4433|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:38:32.4433|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:38:32.4433|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:38:32.4472|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:38:32.4472|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:38:32.4472|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:38:32.4643|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 16.5821ms. 
2023-06-15 09:38:32.4643|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 18.6747ms 
2023-06-15 09:38:32.4643|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:38:32.4643|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 25.0436ms 
2023-06-15 09:38:32.4806|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:38:32.4806|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:38:32.4806|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3404ms 
2023-06-15 09:38:32.4806|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.1407ms 
2023-06-15 09:38:56.8311|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:38:56.8311|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:38:56.8311|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:38:56.8311|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:38:56.8311|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:38:56.8311|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:38:56.8520|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 15.9658ms. 
2023-06-15 09:38:56.8520|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 17.2524ms 
2023-06-15 09:38:56.8520|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:38:56.8540|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 22.9294ms 
2023-06-15 09:38:56.8540|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:38:56.8540|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:38:56.8682|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 1.9061ms 
2023-06-15 09:38:56.8682|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.8211ms 
2023-06-15 09:39:28.4210|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:39:28.4210|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:39:28.4210|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:28.4210|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:39:28.4210|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:39:28.4210|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:39:28.4455|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 16.3991ms. 
2023-06-15 09:39:28.4455|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 17.6682ms 
2023-06-15 09:39:28.4455|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:39:28.4474|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 26.4947ms 
2023-06-15 09:39:28.4474|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:39:28.4474|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:39:28.4474|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3706ms 
2023-06-15 09:39:28.4474|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.5969ms 
2023-06-15 09:39:31.9117|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=g - - 
2023-06-15 09:39:31.9117|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:31.9117|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:31.9341|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:31.9341|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:31.9609|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 45.8453ms 
2023-06-15 09:39:31.9609|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:31.9609|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=g - - - 200 - application/json;+charset=utf-8 49.3262ms 
2023-06-15 09:39:32.0451|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gf - - 
2023-06-15 09:39:32.0451|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.0451|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:32.0451|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:32.0451|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:32.0451|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.2254ms 
2023-06-15 09:39:32.0451|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.0451|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gf - - - 200 - application/json;+charset=utf-8 1.7502ms 
2023-06-15 09:39:32.4515|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gff - - 
2023-06-15 09:39:32.4515|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.4515|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:32.4515|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:32.4515|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:32.4515|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0509ms 
2023-06-15 09:39:32.4515|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.4515|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gff - - - 200 - application/json;+charset=utf-8 1.5177ms 
2023-06-15 09:39:32.5043|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffd - - 
2023-06-15 09:39:32.5043|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.5043|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:32.5043|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:32.5043|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:32.5043|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8971ms 
2023-06-15 09:39:32.5043|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.5043|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffd - - - 200 - application/json;+charset=utf-8 1.2683ms 
2023-06-15 09:39:32.7090|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdg - - 
2023-06-15 09:39:32.7090|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.7090|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:32.7090|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:32.7090|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:32.7090|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1433ms 
2023-06-15 09:39:32.7090|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.7090|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdg - - - 200 - application/json;+charset=utf-8 1.6968ms 
2023-06-15 09:39:32.7532|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgf - - 
2023-06-15 09:39:32.7532|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.7532|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:32.7532|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:32.7532|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:32.7532|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8741ms 
2023-06-15 09:39:32.7532|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.7532|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgf - - - 200 - application/json;+charset=utf-8 1.3165ms 
2023-06-15 09:39:32.8769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfg - - 
2023-06-15 09:39:32.8769|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.8769|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:32.8769|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:32.8769|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:32.8769|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9842ms 
2023-06-15 09:39:32.8769|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.8769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfg - - - 200 - application/json;+charset=utf-8 1.5130ms 
2023-06-15 09:39:32.9833|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgd - - 
2023-06-15 09:39:32.9833|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.9833|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:32.9833|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:32.9833|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:32.9833|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9095ms 
2023-06-15 09:39:32.9833|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:32.9833|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgd - - - 200 - application/json;+charset=utf-8 1.5266ms 
2023-06-15 09:39:33.0111|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdf - - 
2023-06-15 09:39:33.0111|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.0111|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:33.0111|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:33.0111|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:33.0111|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8611ms 
2023-06-15 09:39:33.0111|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.0111|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdf - - - 200 - application/json;+charset=utf-8 1.2315ms 
2023-06-15 09:39:33.1315|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfg - - 
2023-06-15 09:39:33.1315|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.1315|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:33.1315|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:33.1315|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:33.1315|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9169ms 
2023-06-15 09:39:33.1315|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.1315|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfg - - - 200 - application/json;+charset=utf-8 1.3099ms 
2023-06-15 09:39:33.2403|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgf - - 
2023-06-15 09:39:33.2403|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfd - - 
2023-06-15 09:39:33.2403|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.2403|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.2403|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:33.2429|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:33.2429|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:33.2429|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:33.2429|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 2.0345ms 
2023-06-15 09:39:33.2429|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.2429|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfd - - - 200 - application/json;+charset=utf-8 4.5557ms 
2023-06-15 09:39:33.2429|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:33.2429|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:33.2429|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 6.1678ms 
2023-06-15 09:39:33.2429|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.2429|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgf - - - 200 - application/json;+charset=utf-8 7.1861ms 
2023-06-15 09:39:33.3388|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdg - - 
2023-06-15 09:39:33.3388|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.3388|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:33.3388|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:33.3388|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:33.3388|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.035ms 
2023-06-15 09:39:33.3388|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.3388|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdg - - - 200 - application/json;+charset=utf-8 1.4894ms 
2023-06-15 09:39:33.4191|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgf - - 
2023-06-15 09:39:33.4191|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.4191|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:33.4191|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:33.4191|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:33.4191|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9274ms 
2023-06-15 09:39:33.4191|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.4191|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgf - - - 200 - application/json;+charset=utf-8 1.4642ms 
2023-06-15 09:39:33.4351|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfd - - 
2023-06-15 09:39:33.4351|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.4351|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:33.4351|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:33.4351|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:33.4351|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1695ms 
2023-06-15 09:39:33.4351|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.4351|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfd - - - 200 - application/json;+charset=utf-8 1.7305ms 
2023-06-15 09:39:33.5774|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdg - - 
2023-06-15 09:39:33.5774|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.5774|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:33.5774|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:33.5774|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:33.5774|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8896ms 
2023-06-15 09:39:33.5774|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.5774|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdg - - - 200 - application/json;+charset=utf-8 1.2528ms 
2023-06-15 09:39:33.5933|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgf - - 
2023-06-15 09:39:33.5933|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.5933|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:33.5933|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:33.5933|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:33.5933|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1999ms 
2023-06-15 09:39:33.5933|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.5933|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgf - - - 200 - application/json;+charset=utf-8 1.8110ms 
2023-06-15 09:39:33.6489|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfd - - 
2023-06-15 09:39:33.6489|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.6489|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:33.6499|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:33.6499|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:33.6499|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8877ms 
2023-06-15 09:39:33.6499|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.6499|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfd - - - 200 - application/json;+charset=utf-8 1.2598ms 
2023-06-15 09:39:33.7628|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdg - - 
2023-06-15 09:39:33.7628|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.7628|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:33.7628|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:33.7628|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:33.7628|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9029ms 
2023-06-15 09:39:33.7628|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.7628|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdg - - - 200 - application/json;+charset=utf-8 1.4205ms 
2023-06-15 09:39:33.9525|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgf - - 
2023-06-15 09:39:33.9525|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.9525|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:33.9525|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:33.9525|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:33.9525|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8687ms 
2023-06-15 09:39:33.9525|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:33.9525|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgf - - - 200 - application/json;+charset=utf-8 1.2320ms 
2023-06-15 09:39:34.1536|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgff - - 
2023-06-15 09:39:34.1536|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:34.1536|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:34.1536|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:34.1536|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:34.1536|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9329ms 
2023-06-15 09:39:34.1536|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:34.1536|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgff - - - 200 - application/json;+charset=utf-8 1.5625ms 
2023-06-15 09:39:34.1711|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffg - - 
2023-06-15 09:39:34.1711|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:34.1711|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:34.1711|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:34.1711|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:34.1711|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0269ms 
2023-06-15 09:39:34.1711|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:34.1711|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffg - - - 200 - application/json;+charset=utf-8 1.4047ms 
2023-06-15 09:39:34.3789|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffgf - - 
2023-06-15 09:39:34.3789|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:34.3789|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:34.3789|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:34.3789|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:34.3789|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8752ms 
2023-06-15 09:39:34.3789|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:34.3789|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffgf - - - 200 - application/json;+charset=utf-8 1.2547ms 
2023-06-15 09:39:34.5985|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffgff - - 
2023-06-15 09:39:34.5985|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:34.5985|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:34.5985|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:34.5985|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:34.5985|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0455ms 
2023-06-15 09:39:34.5985|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:34.5985|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffgff - - - 200 - application/json;+charset=utf-8 1.6443ms 
2023-06-15 09:39:34.6164|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffgffd - - 
2023-06-15 09:39:34.6164|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:34.6164|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:34.6164|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:34.6164|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:34.6164|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9203ms 
2023-06-15 09:39:34.6164|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:34.6164|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffgffd - - - 200 - application/json;+charset=utf-8 1.3704ms 
2023-06-15 09:39:35.3437|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffgff - - 
2023-06-15 09:39:35.3437|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:35.3437|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:35.3437|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:35.3437|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:35.3437|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9476ms 
2023-06-15 09:39:35.3437|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:35.3437|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffgff - - - 200 - application/json;+charset=utf-8 1.6770ms 
2023-06-15 09:39:35.8474|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffgf - - 
2023-06-15 09:39:35.8474|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:35.8474|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:35.8474|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:35.8474|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:35.8474|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9059ms 
2023-06-15 09:39:35.8474|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:35.8474|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffgf - - - 200 - application/json;+charset=utf-8 1.4420ms 
2023-06-15 09:39:35.8771|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffg - - 
2023-06-15 09:39:35.8771|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:35.8771|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:35.8771|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:35.8771|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:35.8771|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8948ms 
2023-06-15 09:39:35.8771|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:35.8771|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgffg - - - 200 - application/json;+charset=utf-8 1.3362ms 
2023-06-15 09:39:35.9247|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgff - - 
2023-06-15 09:39:35.9247|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:35.9247|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:35.9247|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:35.9247|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:35.9247|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9097ms 
2023-06-15 09:39:35.9247|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:35.9247|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgff - - - 200 - application/json;+charset=utf-8 1.3642ms 
2023-06-15 09:39:35.9567|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgf - - 
2023-06-15 09:39:35.9567|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:35.9567|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:35.9567|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:35.9567|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:35.9567|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9784ms 
2023-06-15 09:39:35.9567|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:35.9567|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdgf - - - 200 - application/json;+charset=utf-8 1.4317ms 
2023-06-15 09:39:35.9884|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdg - - 
2023-06-15 09:39:35.9884|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:35.9884|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:35.9884|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:35.9884|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:35.9884|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8437ms 
2023-06-15 09:39:35.9884|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:35.9884|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfdg - - - 200 - application/json;+charset=utf-8 1.2345ms 
2023-06-15 09:39:36.0202|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfd - - 
2023-06-15 09:39:36.0202|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.0202|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.0202|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.0202|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.0202|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8762ms 
2023-06-15 09:39:36.0202|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.0202|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgfd - - - 200 - application/json;+charset=utf-8 1.3114ms 
2023-06-15 09:39:36.0525|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgf - - 
2023-06-15 09:39:36.0525|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.0525|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.0525|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.0525|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.0525|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8794ms 
2023-06-15 09:39:36.0525|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.0525|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdgf - - - 200 - application/json;+charset=utf-8 1.4334ms 
2023-06-15 09:39:36.0815|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdg - - 
2023-06-15 09:39:36.0815|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.0815|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.0815|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.0815|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.0815|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.872ms 
2023-06-15 09:39:36.0815|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.0815|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfdg - - - 200 - application/json;+charset=utf-8 1.4048ms 
2023-06-15 09:39:36.1150|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfd - - 
2023-06-15 09:39:36.1150|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.1150|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.1150|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.1150|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.1150|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1769ms 
2023-06-15 09:39:36.1150|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.1150|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgfd - - - 200 - application/json;+charset=utf-8 1.7665ms 
2023-06-15 09:39:36.1450|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgf - - 
2023-06-15 09:39:36.1450|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.1450|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.1450|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.1450|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.1450|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8714ms 
2023-06-15 09:39:36.1450|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.1450|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdgf - - - 200 - application/json;+charset=utf-8 1.3907ms 
2023-06-15 09:39:36.1764|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdg - - 
2023-06-15 09:39:36.1764|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.1764|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.1764|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.1764|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.1764|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8411ms 
2023-06-15 09:39:36.1764|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.1764|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfdg - - - 200 - application/json;+charset=utf-8 1.2270ms 
2023-06-15 09:39:36.2207|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfd - - 
2023-06-15 09:39:36.2207|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.2207|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.2207|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.2207|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.2207|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9487ms 
2023-06-15 09:39:36.2207|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.2207|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgfd - - - 200 - application/json;+charset=utf-8 1.6223ms 
2023-06-15 09:39:36.2509|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgf - - 
2023-06-15 09:39:36.2509|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.2509|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.2509|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.2509|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.2509|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1482ms 
2023-06-15 09:39:36.2509|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.2509|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfgf - - - 200 - application/json;+charset=utf-8 1.6325ms 
2023-06-15 09:39:36.2837|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfg - - 
2023-06-15 09:39:36.2837|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.2837|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.2837|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.2837|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.2837|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.1722ms 
2023-06-15 09:39:36.2837|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.2837|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdfg - - - 200 - application/json;+charset=utf-8 1.9847ms 
2023-06-15 09:39:36.3132|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdf - - 
2023-06-15 09:39:36.3132|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.3132|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.3132|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.3132|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.3132|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8472ms 
2023-06-15 09:39:36.3132|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.3132|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgdf - - - 200 - application/json;+charset=utf-8 1.2946ms 
2023-06-15 09:39:36.3447|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgd - - 
2023-06-15 09:39:36.3447|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.3447|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.3447|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.3447|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.3447|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8989ms 
2023-06-15 09:39:36.3447|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.3447|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfgd - - - 200 - application/json;+charset=utf-8 1.3695ms 
2023-06-15 09:39:36.3762|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfg - - 
2023-06-15 09:39:36.3762|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.3762|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.3762|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.3762|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.3762|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9213ms 
2023-06-15 09:39:36.3762|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.3762|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgfg - - - 200 - application/json;+charset=utf-8 1.4845ms 
2023-06-15 09:39:36.4081|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgf - - 
2023-06-15 09:39:36.4081|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.4081|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.4081|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.4081|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.4081|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9947ms 
2023-06-15 09:39:36.4081|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.4081|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdgf - - - 200 - application/json;+charset=utf-8 1.5139ms 
2023-06-15 09:39:36.4522|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdg - - 
2023-06-15 09:39:36.4522|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.4522|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.4522|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.4522|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.4522|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9472ms 
2023-06-15 09:39:36.4522|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.4522|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffdg - - - 200 - application/json;+charset=utf-8 1.4505ms 
2023-06-15 09:39:36.4819|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffd - - 
2023-06-15 09:39:36.4819|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.4819|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.4819|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.4819|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.4819|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9325ms 
2023-06-15 09:39:36.4819|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.4819|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gffd - - - 200 - application/json;+charset=utf-8 1.3742ms 
2023-06-15 09:39:36.5121|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gff - - 
2023-06-15 09:39:36.5121|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.5121|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.5121|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.5121|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.5121|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.8787ms 
2023-06-15 09:39:36.5121|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.5121|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gff - - - 200 - application/json;+charset=utf-8 1.3524ms 
2023-06-15 09:39:36.5442|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gf - - 
2023-06-15 09:39:36.5442|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.5442|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.5442|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.5442|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.5442|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.061ms 
2023-06-15 09:39:36.5442|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.5442|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=gf - - - 200 - application/json;+charset=utf-8 1.5336ms 
2023-06-15 09:39:36.5730|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=g - - 
2023-06-15 09:39:36.5730|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.5730|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:36.5730|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:36.5730|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:36.5730|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.0135ms 
2023-06-15 09:39:36.5730|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:36.5730|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=g - - - 200 - application/json;+charset=utf-8 1.6213ms 
2023-06-15 09:39:37.5898|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=u - - 
2023-06-15 09:39:37.5898|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:37.5898|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:37.5898|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:37.5898|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:37.5898|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 1.2165ms 
2023-06-15 09:39:37.5898|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:37.5898|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=u - - - 200 - application/json;+charset=utf-8 1.8739ms 
2023-06-15 09:39:42.3231|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - 
2023-06-15 09:39:42.3231|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:42.3231|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CheckUsernameEmail", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CheckUsernameEmail(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:39:42.3231|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__usernameemail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[EmailAddress] = @__usernameemail_0 OR [u].[UserName] = @__usernameemail_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2023-06-15 09:39:42.3231|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.SystemTextJsonResultExecutor|Executing JsonResult, writing value of type '<>f__AnonymousType0`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. 
2023-06-15 09:39:42.3231|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder) in 0.9623ms 
2023-06-15 09:39:42.3231|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.CheckUsernameEmail (Lunch Tinder)' 
2023-06-15 09:39:42.3231|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/CheckUsernameEmail?usernameemail=useremail@gmail.com - - - 200 - application/json;+charset=utf-8 1.4759ms 
2023-06-15 09:43:36.4370|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:43:36.4370|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:43:36.4370|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:43:36.4370|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:43:36.4370|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:43:36.4370|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:43:36.4636|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 19.6753ms. 
2023-06-15 09:43:36.4636|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 21.6497ms 
2023-06-15 09:43:36.4636|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:43:36.4636|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 28.5476ms 
2023-06-15 09:43:36.4636|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:43:36.4636|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:43:36.4636|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4228ms 
2023-06-15 09:43:36.4636|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:43:36.4636|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 0.6330ms 
2023-06-15 09:43:36.4636|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:43:36.4841|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 8.7720ms 
2023-06-15 09:43:42.0973|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 09:43:42.0973|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:43:42.1062|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:43:42.2346|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 09:43:42.2622|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:43:42.2622|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 7.0782ms. 
2023-06-15 09:43:42.2622|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 163.0993ms 
2023-06-15 09:43:42.2622|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:43:42.2622|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 173.7861ms 
2023-06-15 09:43:42.2790|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:43:42.2790|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:43:42.2790|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2980ms 
2023-06-15 09:43:42.2790|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.1475ms 
2023-06-15 09:43:48.3799|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 09:43:48.3799|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:43:48.3799|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:43:48.3837|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 09:43:48.3837|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:43:48.3837|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 4.6202ms. 
2023-06-15 09:43:48.3837|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 7.6744ms 
2023-06-15 09:43:48.3837|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:43:48.3837|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 10.2086ms 
2023-06-15 09:43:48.3837|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:43:48.3837|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:43:48.3837|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3696ms 
2023-06-15 09:43:48.4040|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.8776ms 
2023-06-15 09:46:22.3841|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 09:46:22.3891|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:46:22.3891|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:46:22.3891|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 09:46:22.3891|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:46:22.4085|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 15.4915ms. 
2023-06-15 09:46:22.4085|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 17.2195ms 
2023-06-15 09:46:22.4085|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:46:22.4085|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 26.2373ms 
2023-06-15 09:46:22.4181|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:46:22.4181|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:46:22.4181|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3248ms 
2023-06-15 09:46:22.4181|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.5902ms 
2023-06-15 09:49:55.0747|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 09:49:55.0747|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:49:55.0747|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:49:55.0747|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 09:49:55.0747|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:49:55.1021|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 18.372ms. 
2023-06-15 09:49:55.1021|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 19.9396ms 
2023-06-15 09:49:55.1021|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:49:55.1038|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 29.1086ms 
2023-06-15 09:49:55.1038|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:49:55.1038|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:49:55.1038|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:49:55.1038|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2703ms 
2023-06-15 09:49:55.1038|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:49:55.1038|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 0.5891ms 
2023-06-15 09:49:55.1314|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 13.0589ms 
2023-06-15 09:52:59.8003|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 09:52:59.8003|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:52:59.8073|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:52:59.8073|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 09:52:59.8073|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:52:59.8268|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 18.0369ms. 
2023-06-15 09:52:59.8268|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 19.5408ms 
2023-06-15 09:52:59.8268|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 09:52:59.8268|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 30.3732ms 
2023-06-15 09:52:59.8435|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:52:59.8435|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:52:59.8435|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.5249ms 
2023-06-15 09:52:59.8435|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.0588ms 
2023-06-15 09:53:53.8696|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 09:53:55.6890|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:53:55.7319|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:53:55.7319|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:53:55.7319|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:53:55.7569|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 09:53:55.7748|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 09:53:55.9436|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 09:53:55.9436|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 09:53:55.9436|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 09:53:55.9436|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 09:53:55.9436|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 09:53:56.4226|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 09:53:56.5183|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:53:56.5301|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 09:53:56.5538|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 09:53:56.5583|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 24.3814ms 
2023-06-15 09:53:56.5583|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:53:56.5780|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 09:53:56.5780|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 157.8496ms 
2023-06-15 09:53:56.5970|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:53:56.5970|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:53:56.8599|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 09:53:56.9121|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:53:56.9255|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:53:56.9426|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 09:53:57.0684|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 130.9655ms. 
2023-06-15 09:53:57.0721|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 474.0655ms 
2023-06-15 09:53:57.0721|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:53:57.1024|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:53:57.1041|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 526.1030ms 
2023-06-15 09:53:57.1041|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.0525ms 
2023-06-15 09:53:57.1041|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:53:57.1287|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 16.0603ms 
2023-06-15 09:53:59.0114|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:53:59.0114|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:53:59.0251|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:53:59.0784|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:53:59.3555|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 09:53:59.4165|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (41ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:53:59.4165|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:53:59.4660|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 41.6973ms. 
2023-06-15 09:53:59.4660|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 440.8704ms 
2023-06-15 09:53:59.4660|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:53:59.4660|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 456.4889ms 
2023-06-15 09:53:59.4660|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:53:59.4660|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2554ms 
2023-06-15 09:53:59.4660|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:53:59.4810|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:53:59.4810|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 5.7165ms 
2023-06-15 09:53:59.4810|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:53:59.4810|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.7934ms 
2023-06-15 09:54:47.3808|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:54:47.3853|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:54:47.3853|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:54:47.3853|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:54:47.3853|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:54:47.3853|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:54:47.3853|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 5.7963ms. 
2023-06-15 09:54:47.3853|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 11.4267ms 
2023-06-15 09:54:47.3853|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:54:47.4011|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 20.2675ms 
2023-06-15 09:54:47.4011|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:54:47.4011|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:54:47.4011|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.1431ms 
2023-06-15 09:54:47.4185|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 11.4053ms 
2023-06-15 09:56:26.8119|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 09:56:28.5772|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:56:28.6181|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:56:28.6181|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 09:56:28.6181|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 09:56:28.6430|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 09:56:28.6605|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 09:56:28.8252|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 09:56:28.8252|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 09:56:28.8252|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 09:56:28.8252|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 09:56:28.8252|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 09:56:29.5902|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 09:56:29.6898|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:56:29.7020|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 09:56:29.7256|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 09:56:29.7295|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 23.9915ms 
2023-06-15 09:56:29.7295|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 09:56:29.7504|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 09:56:29.7504|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 163.5967ms 
2023-06-15 09:56:29.7504|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:56:29.7504|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:56:30.0020|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 09:56:30.0513|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:56:30.0653|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 09:56:30.0815|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 09:56:30.2095|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 131.9253ms. 
2023-06-15 09:56:30.2133|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 455.0855ms 
2023-06-15 09:56:30.2133|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 09:56:30.2424|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:56:30.2439|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 493.3775ms 
2023-06-15 09:56:30.2439|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.4972ms 
2023-06-15 09:56:30.2439|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:56:30.2689|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 16.0017ms 
2023-06-15 09:56:31.4985|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:56:31.4985|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:56:31.5120|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:56:31.5651|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:56:31.8322|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 09:56:31.8877|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (37ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:56:31.8877|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:56:31.9414|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 45.3292ms. 
2023-06-15 09:56:31.9414|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 429.4413ms 
2023-06-15 09:56:31.9414|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:56:31.9414|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 444.7263ms 
2023-06-15 09:56:31.9510|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:56:31.9510|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4021ms 
2023-06-15 09:56:31.9510|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:56:31.9510|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.0156ms 
2023-06-15 09:58:21.4748|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:58:21.4804|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:58:21.4804|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:58:21.4804|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:58:21.4804|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:58:21.4804|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:58:21.5049|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 17.3409ms. 
2023-06-15 09:58:21.5049|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 23.5925ms 
2023-06-15 09:58:21.5049|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:58:21.5090|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 34.1764ms 
2023-06-15 09:58:21.5090|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:58:21.5090|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 09:58:21.5090|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2604ms 
2023-06-15 09:58:21.5090|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 09:58:21.5090|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 5.1529ms 
2023-06-15 09:58:21.5090|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:58:21.5252|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.2675ms 
2023-06-15 09:59:11.2976|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 09:59:11.2976|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:59:11.2976|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 09:59:11.2976|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 09:59:11.2976|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 09:59:11.2976|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 09:59:11.3197|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 18.284ms. 
2023-06-15 09:59:11.3197|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 19.8924ms 
2023-06-15 09:59:11.3197|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 09:59:11.3234|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 25.8577ms 
2023-06-15 09:59:11.3234|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 09:59:11.3234|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 09:59:11.3234|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2576ms 
2023-06-15 09:59:11.3234|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.3530ms 
2023-06-15 10:02:12.6298|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 10:02:14.4212|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (26ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 10:02:14.4606|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 10:02:14.4606|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 10:02:14.4606|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 10:02:14.4878|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 10:02:14.5072|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 10:02:14.6744|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 10:02:14.6744|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 10:02:14.6744|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 10:02:14.6744|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 10:02:14.6744|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 10:02:15.3928|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 10:02:15.4904|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:02:15.5015|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 10:02:15.5233|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 10:02:15.5233|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 22.1761ms 
2023-06-15 10:02:15.5233|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:02:15.5506|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 10:02:15.5506|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 160.9502ms 
2023-06-15 10:02:15.5506|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 10:02:15.5591|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 10:02:15.8080|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 10:02:15.8572|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 10:02:15.8572|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 10:02:15.8876|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 10:02:16.0144|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 131.4754ms. 
2023-06-15 10:02:16.0144|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 459.6134ms 
2023-06-15 10:02:16.0144|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 10:02:16.0502|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:02:16.0502|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 500.5045ms 
2023-06-15 10:02:16.0502|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.3108ms 
2023-06-15 10:02:16.0589|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:02:16.0762|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 17.3193ms 
2023-06-15 10:02:18.7508|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 10:02:18.7508|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 10:02:18.7636|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 10:02:18.8162|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 10:02:19.0811|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 10:02:19.1394|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (41ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 10:02:19.1497|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 10:02:19.1916|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 42.4316ms. 
2023-06-15 10:02:19.1916|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 428.4767ms 
2023-06-15 10:02:19.1916|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 10:02:19.1916|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 442.9833ms 
2023-06-15 10:02:19.2011|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:02:19.2011|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2881ms 
2023-06-15 10:02:19.2011|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:02:19.2152|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 8.1860ms 
2023-06-15 10:02:26.8416|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/SaveGroupDescription application/x-www-form-urlencoded 290 
2023-06-15 10:02:26.8416|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.SaveGroupDescription (Lunch Tinder)' 
2023-06-15 10:02:26.8501|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "SaveGroupDescription", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult SaveGroupDescription(Lunch_Tinder.Models.LunchGroup) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 10:02:26.9476|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p2='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [LunchGroups] SET [Description] = @p0, [GroupName] = @p1
OUTPUT 1
WHERE [GroupId] = @p2; 
2023-06-15 10:02:26.9557|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 10:02:26.9557|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 7.5172ms. 
2023-06-15 10:02:26.9557|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.SaveGroupDescription (Lunch Tinder) in 113.2348ms 
2023-06-15 10:02:26.9557|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.SaveGroupDescription (Lunch Tinder)' 
2023-06-15 10:02:26.9557|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/SaveGroupDescription application/x-www-form-urlencoded 290 - 200 - text/html;+charset=utf-8 123.5154ms 
2023-06-15 10:02:26.9719|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:02:26.9719|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:02:26.9719|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2911ms 
2023-06-15 10:02:26.9719|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.6458ms 
2023-06-15 10:02:31.4940|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 10:02:31.4940|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 10:02:31.4940|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 10:02:31.4940|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 10:02:31.4961|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 10:02:31.4961|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 10:02:31.4961|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 10:02:31.4961|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 3.649ms. 
2023-06-15 10:02:31.4961|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 5.3855ms 
2023-06-15 10:02:31.4961|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 10:02:31.4961|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 7.7665ms 
2023-06-15 10:02:31.4961|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:02:31.4961|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:02:31.4961|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3608ms 
2023-06-15 10:02:31.5132|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.7110ms 
2023-06-15 10:02:32.6805|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 10:02:32.6805|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 10:02:32.6805|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 10:02:32.6827|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 10:02:32.6827|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 10:02:32.6827|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 10:02:32.6827|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 4.956ms. 
2023-06-15 10:02:32.6827|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 9.8087ms 
2023-06-15 10:02:32.6827|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 10:02:32.6827|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 12.4745ms 
2023-06-15 10:02:32.6995|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:02:32.6995|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3518ms 
2023-06-15 10:02:32.6995|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:02:32.6995|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.8905ms 
2023-06-15 10:02:34.3929|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/LogOut - - 
2023-06-15 10:02:34.3929|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 10:02:34.4008|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "LogOut", controller = "LGU"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LogOut() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 10:02:34.4008|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed out. 
2023-06-15 10:02:34.4008|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /. 
2023-06-15 10:02:34.4008|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder) in 2.9926ms 
2023-06-15 10:02:34.4008|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 10:02:34.4008|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/LogOut - - - 302 0 - 11.1860ms 
2023-06-15 10:02:34.4008|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 10:02:34.4008|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:02:34.4008|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 10:02:34.4008|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 10:02:34.4224|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 14.7523ms. 
2023-06-15 10:02:34.4224|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 15.5143ms 
2023-06-15 10:02:34.4224|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:02:34.4224|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 17.0652ms 
2023-06-15 10:02:34.4303|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:02:34.4303|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1663ms 
2023-06-15 10:02:34.4303|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:02:34.4303|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.9458ms 
2023-06-15 10:09:46.1472|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 10:09:49.1984|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (31ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 10:09:49.2441|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (24ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 10:09:49.2441|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 10:09:49.2441|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 10:09:49.2722|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 10:09:49.2926|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 10:09:49.4839|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 10:09:49.4839|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 10:09:49.4839|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 10:09:49.4839|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 10:09:49.4839|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 10:09:50.0686|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 10:09:50.1684|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:09:50.1844|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 10:09:50.1983|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 10:09:50.3916|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 192.4799ms. 
2023-06-15 10:09:50.3916|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 213.655ms 
2023-06-15 10:09:50.3916|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:09:50.4460|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:09:50.4460|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 385.0861ms 
2023-06-15 10:09:50.4460|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.8879ms 
2023-06-15 10:09:50.4625|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:09:50.4811|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 18.5634ms 
2023-06-15 10:09:57.9993|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 
2023-06-15 10:09:58.0011|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:09:58.0011|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 10:09:58.3445|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 10:09:58.5758|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 10:09:58.5816|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 5.983ms. 
2023-06-15 10:09:58.5816|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 566.9745ms 
2023-06-15 10:09:58.5816|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:09:58.5816|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 - 200 - text/html;+charset=utf-8 591.7286ms 
2023-06-15 10:09:58.5942|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:09:58.5942|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:09:58.5942|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4957ms 
2023-06-15 10:09:58.5942|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.7198ms 
2023-06-15 10:10:03.8643|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 
2023-06-15 10:10:03.8643|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:10:03.8643|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 10:10:03.9109|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 10:10:04.0536|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 10:10:04.2022|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 10:10:04.2022|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 10:10:04.2022|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 335.3871ms 
2023-06-15 10:10:04.2022|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:10:04.2032|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 - 302 0 - 338.8786ms 
2023-06-15 10:10:04.2032|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 10:10:04.2032|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 10:10:04.2032|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 10:10:04.2032|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 10:10:04.2380|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 10:10:04.2498|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 10:10:04.2498|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 10:10:04.2754|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 25.3195ms. 
2023-06-15 10:10:04.2754|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 63.4512ms 
2023-06-15 10:10:04.2754|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 10:10:04.2754|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 70.1459ms 
2023-06-15 10:10:04.2887|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:10:04.2887|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1874ms 
2023-06-15 10:10:04.2963|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:10:04.2963|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 12.3401ms 
2023-06-15 10:10:07.4775|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 10:10:07.4775|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 10:10:07.4775|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 10:10:07.4881|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 10:10:07.8078|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 10:10:07.8723|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (43ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 10:10:07.8804|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 10:10:07.9114|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 31.405ms. 
2023-06-15 10:10:07.9114|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 429.2694ms 
2023-06-15 10:10:07.9114|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 10:10:07.9114|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 435.6555ms 
2023-06-15 10:10:07.9114|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:10:07.9114|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 10:10:07.9114|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2900ms 
2023-06-15 10:10:07.9285|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:10:07.9285|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.6817ms 
2023-06-15 10:10:07.9402|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-06-15 10:10:07.9402|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 200 9813 application/javascript 19.4424ms 
2023-06-15 10:22:22.4503|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 10:22:25.0987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 10:22:25.1399|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 10:22:25.1424|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 10:22:25.1424|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 10:22:25.1644|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 10:22:25.1817|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 10:22:25.3389|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 10:22:25.3389|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 10:22:25.3389|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 10:22:25.3389|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 10:22:25.3389|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 10:22:25.7998|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 10:22:25.8953|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:22:25.9064|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 10:22:25.9294|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 10:22:25.9294|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 23.3572ms 
2023-06-15 10:22:25.9294|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:22:25.9578|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 10:22:25.9578|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 160.5433ms 
2023-06-15 10:22:25.9799|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 10:22:25.9799|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 10:22:26.2119|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 10:22:26.2641|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 10:22:26.2775|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 10:22:26.2936|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 10:22:26.4190|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 129.479ms. 
2023-06-15 10:22:26.4228|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 441.9999ms 
2023-06-15 10:22:26.4228|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 10:22:26.4572|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:22:26.4572|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 501.3419ms 
2023-06-15 10:22:26.4572|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.3239ms 
2023-06-15 10:22:26.4572|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:22:26.4823|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 16.4977ms 
2023-06-15 10:22:28.0204|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 10:22:28.0204|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 10:22:28.0337|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 10:22:28.0850|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 10:22:28.3598|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 10:22:28.4224|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (41ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 10:22:28.4224|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 10:22:28.4778|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 47.3048ms. 
2023-06-15 10:22:28.4778|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 444.1526ms 
2023-06-15 10:22:28.4778|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 10:22:28.4778|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 459.2947ms 
2023-06-15 10:22:28.4874|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:22:28.4874|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 10:22:28.4874|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4077ms 
2023-06-15 10:22:28.4874|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:22:28.5006|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.9721ms 
2023-06-15 10:22:28.5006|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-06-15 10:22:28.5006|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 200 9813 application/javascript 16.2686ms 
2023-06-15 10:22:41.4439|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/LogOut - - 
2023-06-15 10:22:41.4439|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 10:22:41.4439|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "LogOut", controller = "LGU"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LogOut() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 10:22:41.4566|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed out. 
2023-06-15 10:22:41.4566|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /. 
2023-06-15 10:22:41.4566|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder) in 4.8239ms 
2023-06-15 10:22:41.4566|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 10:22:41.4566|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/LogOut - - - 302 0 - 13.0811ms 
2023-06-15 10:22:41.4566|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 10:22:41.4566|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:22:41.4566|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 10:22:41.4566|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 10:22:41.4752|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 14.3046ms. 
2023-06-15 10:22:41.4752|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 15.2849ms 
2023-06-15 10:22:41.4752|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 10:22:41.4752|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 16.7352ms 
2023-06-15 10:22:41.4752|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 10:22:41.4752|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1845ms 
2023-06-15 10:22:41.4883|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 10:22:41.4883|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.9371ms 
2023-06-15 11:11:05.5926|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 11:11:07.8723|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (32ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:11:07.9199|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (25ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:11:07.9199|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:11:07.9199|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:11:07.9500|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 11:11:07.9698|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 11:11:08.1851|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 11:11:08.1851|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 11:11:08.1851|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 11:11:08.1851|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 11:11:08.1851|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 11:11:08.7347|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 11:11:08.8537|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:11:08.8706|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:11:08.8921|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 11:11:09.0925|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 206.6046ms. 
2023-06-15 11:11:09.0989|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 227.9516ms 
2023-06-15 11:11:09.0989|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:11:09.1530|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:11:09.1530|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.0097ms 
2023-06-15 11:11:09.1530|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 429.8212ms 
2023-06-15 11:11:09.1740|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:11:09.1894|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.4670ms 
2023-06-15 11:11:15.3350|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 
2023-06-15 11:11:15.3350|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:11:15.3520|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:11:15.6548|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:11:15.8410|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:11:15.9904|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 11:11:15.9904|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 11:11:15.9904|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 639.4915ms 
2023-06-15 11:11:15.9904|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:11:15.9904|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 11:11:15.9904|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 - 302 0 - 665.3464ms 
2023-06-15 11:11:15.9904|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:11:15.9904|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:11:16.0445|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 11:11:16.0659|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:11:16.0659|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:11:16.0659|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 11:11:16.1065|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 29.0027ms. 
2023-06-15 11:11:16.1065|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 104.6566ms 
2023-06-15 11:11:16.1065|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:11:16.1065|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 112.3950ms 
2023-06-15 11:11:16.1213|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:11:16.1213|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2145ms 
2023-06-15 11:11:16.1319|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:11:16.1319|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.7287ms 
2023-06-15 11:11:19.2138|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 11:11:19.2138|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:11:19.2138|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:11:19.2253|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:11:19.5354|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 11:11:19.6038|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (46ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 11:11:19.6038|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:11:19.6494|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 38.2548ms. 
2023-06-15 11:11:19.6494|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 430.3474ms 
2023-06-15 11:11:19.6494|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:11:19.6494|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 437.4759ms 
2023-06-15 11:11:19.6494|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:11:19.6494|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-06-15 11:11:19.6494|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 11:11:19.6494|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3889ms 
2023-06-15 11:11:19.6651|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:11:19.6651|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 11:11:19.6651|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 9.6229ms 
2023-06-15 11:11:19.6651|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.7525ms 
2023-06-15 11:11:19.6769|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/LunchGroupDetails.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\LunchGroupDetails.css' 
2023-06-15 11:11:19.6769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 200 575 text/css 18.4851ms 
2023-06-15 11:11:26.2640|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/LogOut - - 
2023-06-15 11:11:26.2711|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 11:11:26.2711|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "LogOut", controller = "LGU"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LogOut() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 11:11:26.2711|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed out. 
2023-06-15 11:11:26.2711|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /. 
2023-06-15 11:11:26.2711|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder) in 3.7989ms 
2023-06-15 11:11:26.2711|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 11:11:26.2711|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/LogOut - - - 302 0 - 12.8754ms 
2023-06-15 11:11:26.2711|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 11:11:26.2711|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:11:26.2711|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:11:26.2711|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 11:11:26.2868|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 4.3331ms. 
2023-06-15 11:11:26.2868|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 5.4035ms 
2023-06-15 11:11:26.2868|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:11:26.2868|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 7.3791ms 
2023-06-15 11:11:26.2868|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:11:26.2868|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4200ms 
2023-06-15 11:11:26.3036|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:11:26.3036|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.5354ms 
2023-06-15 11:12:17.5242|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 
2023-06-15 11:12:17.5242|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:12:17.5242|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:12:17.5242|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:12:17.6734|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 285.2451ms 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 - 302 0 - 292.0671ms 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:12:17.8159|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 11:12:17.8159|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:12:17.8159|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 2.6951ms. 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 3.8933ms 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:12:17.8159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 7.9971ms 
2023-06-15 11:12:17.8449|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:12:17.8449|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1883ms 
2023-06-15 11:12:17.8497|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:12:17.8497|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.6309ms 
2023-06-15 11:12:19.8742|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 11:12:19.8742|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:12:19.8742|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:12:19.8742|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:12:19.8792|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 11:12:19.8792|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:12:19.8792|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 4.9535ms. 
2023-06-15 11:12:19.8792|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 9.3606ms 
2023-06-15 11:12:19.8792|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:12:19.8792|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 11.9165ms 
2023-06-15 11:12:19.8946|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:12:19.8946|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2718ms 
2023-06-15 11:12:19.8946|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:12:19.9098|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.8683ms 
2023-06-15 11:12:58.9010|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 11:12:58.9010|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:12:58.9010|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:12:58.9010|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:12:58.9010|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 11:12:58.9098|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:12:58.9261|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 16.7027ms. 
2023-06-15 11:12:58.9261|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 18.2177ms 
2023-06-15 11:12:58.9261|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:12:58.9261|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 27.2916ms 
2023-06-15 11:12:58.9261|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:12:58.9261|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1959ms 
2023-06-15 11:12:58.9261|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:12:58.9506|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 12.0751ms 
2023-06-15 11:13:28.2056|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 11:13:28.2069|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:13:28.2069|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:13:28.2069|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:13:28.2069|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 11:13:28.2069|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:13:28.2276|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 16.8321ms. 
2023-06-15 11:13:28.2276|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 19.6012ms 
2023-06-15 11:13:28.2276|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:13:28.2276|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 24.6141ms 
2023-06-15 11:13:28.2404|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:13:28.2404|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2894ms 
2023-06-15 11:13:28.2404|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:13:28.2404|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 8.9387ms 
2023-06-15 11:13:46.8731|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:13:46.8731|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:13:46.8864|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:13:54.9079|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:13:56.4879|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:13:57.0417|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 621.77ms. 
2023-06-15 11:13:57.0417|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 10155.3389ms 
2023-06-15 11:13:57.0417|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:13:57.0417|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 10172.9407ms 
2023-06-15 11:13:57.0541|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:13:57.0541|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:13:57.0541|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4112ms 
2023-06-15 11:13:57.0541|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.3467ms 
2023-06-15 11:15:08.6173|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:15:08.6173|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:15:08.6173|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:15:22.5741|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 11:15:24.5242|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (32ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:15:24.5751|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (25ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:15:24.5751|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:15:24.5751|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:15:24.6038|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 11:15:24.6252|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 11:15:24.8029|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 11:15:24.8029|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 11:15:24.8029|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 11:15:24.8029|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 11:15:24.8029|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 11:15:25.4639|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 11:15:25.5855|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:15:25.6020|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:15:25.6357|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 11:15:25.6357|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 34.8153ms 
2023-06-15 11:15:25.6357|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:15:25.6691|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 11:15:25.6691|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 211.0532ms 
2023-06-15 11:15:25.6938|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:15:25.6938|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:15:25.9835|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 11:15:26.0358|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:15:26.0517|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:15:26.0697|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 11:15:26.2217|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 157.0807ms. 
2023-06-15 11:15:26.2257|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 530.7912ms 
2023-06-15 11:15:26.2257|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:15:26.2569|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:15:26.2569|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 588.5383ms 
2023-06-15 11:15:26.2569|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.5892ms 
2023-06-15 11:15:26.2569|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:15:26.2797|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 13.6716ms 
2023-06-15 11:15:28.6655|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 11:15:28.6655|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:15:28.6798|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:15:28.7403|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:15:29.0494|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 11:15:29.1114|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 11:15:29.1203|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:15:29.1689|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 49.0089ms. 
2023-06-15 11:15:29.1689|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 489.0514ms 
2023-06-15 11:15:29.1689|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:15:29.1689|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 505.5871ms 
2023-06-15 11:15:29.1800|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:15:29.1800|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3189ms 
2023-06-15 11:15:29.1800|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:15:29.2020|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 13.3737ms 
2023-06-15 11:15:35.7165|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:15:35.7165|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:15:35.7306|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:15:42.5571|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:15:44.2046|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:15:44.7604|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 620.9302ms. 
2023-06-15 11:15:44.7604|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 9029.6767ms 
2023-06-15 11:15:44.7604|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:15:44.7604|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 9047.1019ms 
2023-06-15 11:15:44.7715|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:15:44.7715|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:15:44.7715|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3677ms 
2023-06-15 11:15:44.7715|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 11.2987ms 
2023-06-15 11:16:29.3164|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:16:29.3164|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:16:29.4441|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:16:44.6938|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:16:46.9706|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:16:46.9706|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:16:47.9725|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,002ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:16:48.9400|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:16:48.9400|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:16:48.9400|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:16:48.9921|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 52.7312ms. 
2023-06-15 11:16:48.9921|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 51.0707ms. 
2023-06-15 11:16:48.9921|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 19548.2301ms 
2023-06-15 11:16:48.9921|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 2021.4648ms 
2023-06-15 11:16:48.9921|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:16:48.9921|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:16:48.9921|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 19679.0312ms 
2023-06-15 11:16:48.9921|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 4302.0731ms 
2023-06-15 11:16:49.0060|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-06-15 11:16:49.0060|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:16:49.0060|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 11:16:49.0060|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3650ms 
2023-06-15 11:16:49.0060|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/LunchGroupDetails.css was not modified 
2023-06-15 11:16:49.0060|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 11:16:49.0060|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:16:49.0060|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 6.8945ms 
2023-06-15 11:16:49.0060|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 304 - text/css 7.2374ms 
2023-06-15 11:16:49.0195|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.4909ms 
2023-06-15 11:16:59.7166|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:16:59.7166|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:16:59.7166|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:17:07.8545|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:17:09.2521|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:17:59.5359|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 11:18:01.4058|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (29ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:18:01.4494|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:18:01.4494|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:18:01.4494|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:18:01.4785|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 11:18:01.4993|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 11:18:01.6759|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 11:18:01.6759|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 11:18:01.6759|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 11:18:01.6759|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 11:18:01.6759|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 11:18:02.1307|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 11:18:02.2491|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:18:02.2635|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:18:02.2938|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 11:18:02.2938|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 30.6161ms 
2023-06-15 11:18:02.2938|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:18:02.3214|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 11:18:02.3214|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 194.1181ms 
2023-06-15 11:18:02.3376|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:18:02.3376|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:18:02.6051|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 11:18:02.6609|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:18:02.6749|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:18:02.6951|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 11:18:02.8362|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 145.2531ms. 
2023-06-15 11:18:02.8362|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 501.6905ms 
2023-06-15 11:18:02.8362|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:18:02.8726|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 551.1463ms 
2023-06-15 11:18:02.8726|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:18:02.8726|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.0967ms 
2023-06-15 11:18:02.8820|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:18:02.9011|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 19.0644ms 
2023-06-15 11:18:04.8951|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 11:18:04.8951|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:18:04.8951|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:18:04.9694|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:18:05.2688|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 11:18:05.3265|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (37ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 11:18:05.3349|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:18:05.3827|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 48.2803ms. 
2023-06-15 11:18:05.3827|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 473.3691ms 
2023-06-15 11:18:05.3827|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:18:05.3827|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 489.8964ms 
2023-06-15 11:18:05.3827|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:18:05.3945|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3192ms 
2023-06-15 11:18:05.3945|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:18:05.3945|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.1935ms 
2023-06-15 11:18:13.7561|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:18:13.7561|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:18:13.7697|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:18:18.8067|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:18:18.8327|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:18:18.8327|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 7.9186ms. 
2023-06-15 11:18:18.8327|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 5070.8837ms 
2023-06-15 11:18:18.8327|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:18:18.8327|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 5086.1430ms 
2023-06-15 11:18:18.8493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:18:18.8493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:18:18.8493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1727ms 
2023-06-15 11:18:18.8493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.5679ms 
2023-06-15 11:18:23.9522|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:18:23.9522|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:18:23.9522|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:18:23.9570|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:18:23.9570|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:18:23.9570|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 6.5266ms. 
2023-06-15 11:18:23.9570|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 10.4295ms 
2023-06-15 11:18:23.9570|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:18:23.9570|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 14.7222ms 
2023-06-15 11:18:23.9744|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:18:23.9744|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:18:23.9744|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2961ms 
2023-06-15 11:18:23.9744|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.5799ms 
2023-06-15 11:35:35.2347|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 11:35:37.0970|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:35:37.1381|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:35:37.1381|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:35:37.1381|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:35:37.1649|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 11:35:37.1834|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 11:35:37.3485|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 11:35:37.3485|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 11:35:37.3485|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 11:35:37.3485|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 11:35:37.3485|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 11:35:37.9684|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 11:35:38.0692|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|Cookies was not authenticated. Failure message: Ticket expired 
2023-06-15 11:35:38.0692|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:35:38.0842|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:35:38.0974|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 11:35:38.2554|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 160.3747ms. 
2023-06-15 11:35:38.2554|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 176.7368ms 
2023-06-15 11:35:38.2554|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:35:38.3000|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:35:38.3000|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.7659ms 
2023-06-15 11:35:38.3000|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 339.0841ms 
2023-06-15 11:35:38.3000|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:35:38.3282|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.3081ms 
2023-06-15 11:35:45.3481|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 
2023-06-15 11:35:45.3481|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|Cookies was not authenticated. Failure message: Ticket expired 
2023-06-15 11:35:45.3481|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:35:45.3481|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:35:45.6159|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:35:45.7880|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:35:45.9275|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 11:35:45.9275|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 11:35:45.9275|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 566.093ms 
2023-06-15 11:35:45.9275|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:35:45.9275|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 11:35:45.9275|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:35:45.9275|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 - 302 0 - 588.1556ms 
2023-06-15 11:35:45.9275|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:35:45.9776|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 11:35:45.9973|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:35:46.0075|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:35:46.0075|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 11:35:46.0377|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 29.882ms. 
2023-06-15 11:35:46.0377|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 101.0897ms 
2023-06-15 11:35:46.0377|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:35:46.0377|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 107.5582ms 
2023-06-15 11:35:46.0551|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:35:46.0551|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3354ms 
2023-06-15 11:35:46.0551|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:35:46.0551|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.7186ms 
2023-06-15 11:35:47.4578|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 11:35:47.4578|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:35:47.4578|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:35:47.4578|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:35:47.7506|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 11:35:47.8081|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (38ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 11:35:47.8161|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:35:47.8462|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 30.4818ms. 
2023-06-15 11:35:47.8462|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 384.7643ms 
2023-06-15 11:35:47.8462|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:35:47.8483|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 390.4899ms 
2023-06-15 11:35:47.8483|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-06-15 11:35:47.8483|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:35:47.8483|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 11:35:47.8483|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3300ms 
2023-06-15 11:35:47.8483|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/LunchGroupDetails.css was not modified 
2023-06-15 11:35:47.8483|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 11:35:47.8483|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 304 - text/css 6.6487ms 
2023-06-15 11:35:47.8483|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 6.3396ms 
2023-06-15 11:35:47.8640|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:35:47.8640|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.5734ms 
2023-06-15 11:35:51.4203|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:35:51.4203|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:35:51.4289|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:35:51.5468|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:35:51.6672|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 11:35:51.7981|ERROR|Lunch_Tinder.Services.MailService|Failed to send email. {"Type":"System.ArgumentNullException", "Message":"Value cannot be null. (Parameter 'address')", "ParamName":"address", "TargetSite":"Void .ctor(System.Text.Encoding, System.String, System.String)", "Data":{}, "Source":"MimeKit", "HResult":-2147467261, "StackTrace":"   at MimeKit.MailboxAddress..ctor(Encoding encoding, String name, String address)\r\n   at Lunch_Tinder.Services.MailService.SendMailAsync(MailData mailData) in C:\\Users\\ewalsh\\source\\repos\\Lunch Tinder\\Lunch Tinder\\Lunch Tinder\\Services\\MailService.cs:line 34"}
2023-06-15 11:35:51.9392|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:35:51.9464|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 7.1291ms. 
2023-06-15 11:35:51.9464|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 517.5034ms 
2023-06-15 11:35:51.9464|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:35:51.9464|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 527.9696ms 
2023-06-15 11:35:51.9464|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:35:51.9464|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:35:51.9464|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3545ms 
2023-06-15 11:35:51.9584|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.4991ms 
2023-06-15 11:36:46.5107|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:36:46.5107|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:36:46.5107|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:36:54.8636|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:37:26.6462|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 11:37:26.6850|ERROR|Lunch_Tinder.Services.MailService|Failed to send email. {"Type":"System.ArgumentNullException", "Message":"Value cannot be null. (Parameter 'address')", "ParamName":"address", "TargetSite":"Void .ctor(System.Text.Encoding, System.String, System.String)", "Data":{}, "Source":"MimeKit", "HResult":-2147467261, "StackTrace":"   at MimeKit.MailboxAddress..ctor(Encoding encoding, String name, String address)\r\n   at Lunch_Tinder.Services.MailService.SendMailAsync(MailData mailData) in C:\\Users\\ewalsh\\source\\repos\\Lunch Tinder\\Lunch Tinder\\Lunch Tinder\\Services\\MailService.cs:line 34"}
2023-06-15 11:38:08.1171|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:38:08.1318|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 19.49ms. 
2023-06-15 11:38:08.1318|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 81616.3046ms 
2023-06-15 11:38:08.1318|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:38:08.1318|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 81625.4377ms 
2023-06-15 11:38:08.1443|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:38:08.1443|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 3.3176ms 
2023-06-15 11:38:08.1443|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:38:08.1443|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.5766ms 
2023-06-15 11:38:16.3404|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:38:16.3404|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:38:16.3404|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:38:20.7847|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:39:03.3061|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 11:39:05.1592|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:39:05.1999|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:39:05.1999|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:39:05.1999|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:39:05.2260|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 11:39:05.2458|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 11:39:05.4109|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 11:39:05.4109|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 11:39:05.4109|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 11:39:05.4109|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 11:39:05.4109|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 11:39:06.1381|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 11:39:06.2305|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:39:06.2420|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:39:06.2652|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 11:39:06.2692|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 23.7403ms 
2023-06-15 11:39:06.2692|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:39:06.2883|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 11:39:06.2883|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 152.8368ms 
2023-06-15 11:39:06.2883|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:39:06.2883|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:39:06.5387|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 11:39:06.5886|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:39:06.6041|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:39:06.6224|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 11:39:06.7479|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 130.4457ms. 
2023-06-15 11:39:06.7479|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 454.7729ms 
2023-06-15 11:39:06.7479|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:39:06.7804|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:39:06.7804|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 493.9125ms 
2023-06-15 11:39:06.7851|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.6839ms 
2023-06-15 11:39:06.7851|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:39:06.8051|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 14.9438ms 
2023-06-15 11:39:07.7869|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 11:39:07.7869|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:39:07.8000|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:39:07.8532|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:39:08.1173|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 11:39:08.1764|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 11:39:08.1764|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:39:08.2323|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 46.8006ms. 
2023-06-15 11:39:08.2323|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 432.2488ms 
2023-06-15 11:39:08.2323|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:39:08.2323|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 447.1964ms 
2023-06-15 11:39:08.2421|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:39:08.2421|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2529ms 
2023-06-15 11:39:08.2421|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:39:08.2528|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.2290ms 
2023-06-15 11:39:12.0061|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:39:12.0061|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:39:12.0061|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:39:16.9369|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:39:27.1200|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 11:39:27.2284|ERROR|Lunch_Tinder.Services.MailService|Failed to send email. {"Type":"System.ArgumentNullException", "Message":"Value cannot be null. (Parameter 'address')", "ParamName":"address", "TargetSite":"Void .ctor(System.Text.Encoding, System.String, System.String)", "Data":{}, "Source":"MimeKit", "HResult":-2147467261, "StackTrace":"   at MimeKit.MailboxAddress..ctor(Encoding encoding, String name, String address)\r\n   at Lunch_Tinder.Services.MailService.SendMailAsync(MailData mailData) in C:\\Users\\ewalsh\\source\\repos\\Lunch Tinder\\Lunch Tinder\\Lunch Tinder\\Services\\MailService.cs:line 34"}
2023-06-15 11:39:30.1871|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:39:30.7214|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 595.2848ms. 
2023-06-15 11:39:30.7214|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 18703.9392ms 
2023-06-15 11:39:30.7214|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:39:30.7243|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 18718.2332ms 
2023-06-15 11:39:30.7243|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:39:30.7243|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:39:30.7243|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2709ms 
2023-06-15 11:39:30.7243|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.1995ms 
2023-06-15 11:39:52.4440|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:39:52.4440|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:39:52.4440|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:40:00.6579|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:40:24.4229|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 11:41:13.8324|ERROR|Lunch_Tinder.Services.MailService|Failed to send email. {"Type":"System.ArgumentNullException", "Message":"Value cannot be null. (Parameter 'address')", "ParamName":"address", "TargetSite":"Void .ctor(System.Text.Encoding, System.String, System.String)", "Data":{}, "Source":"MimeKit", "HResult":-2147467261, "StackTrace":"   at MimeKit.MailboxAddress..ctor(Encoding encoding, String name, String address)\r\n   at Lunch_Tinder.Services.MailService.SendMailAsync(MailData mailData) in C:\\Users\\ewalsh\\source\\repos\\Lunch Tinder\\Lunch Tinder\\Lunch Tinder\\Services\\MailService.cs:line 34"}
2023-06-15 11:41:13.8324|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:41:13.8501|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 11.0327ms. 
2023-06-15 11:41:13.8501|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 81404.7799ms 
2023-06-15 11:41:13.8501|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:41:13.8501|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 81409.5607ms 
2023-06-15 11:41:13.8501|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:41:13.8501|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:41:13.8501|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3468ms 
2023-06-15 11:41:13.8676|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.9424ms 
2023-06-15 11:41:17.2074|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:41:17.2074|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:41:17.2074|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:41:20.3246|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:41:26.3988|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 11:43:28.8823|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 11:43:30.7442|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (29ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:43:30.7876|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (24ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:43:30.7876|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:43:30.7876|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:43:30.8131|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 11:43:30.8306|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 11:43:30.9950|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 11:43:30.9950|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 11:43:30.9950|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 11:43:30.9950|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 11:43:30.9950|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 11:43:31.5754|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 11:43:31.6748|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:43:31.6748|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:43:31.7096|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 11:43:31.7096|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 22.5265ms 
2023-06-15 11:43:31.7096|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:43:31.7361|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 11:43:31.7361|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 164.1822ms 
2023-06-15 11:43:31.7556|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:43:31.7556|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:43:31.9953|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 11:43:32.0444|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:43:32.0582|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:43:32.0739|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 11:43:32.1996|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 130.0963ms. 
2023-06-15 11:43:32.1996|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 446.4583ms 
2023-06-15 11:43:32.1996|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:43:32.2346|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:43:32.2346|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 499.4074ms 
2023-06-15 11:43:32.2388|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.2318ms 
2023-06-15 11:43:32.2388|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:43:32.2630|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 18.0383ms 
2023-06-15 11:43:33.6123|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 11:43:33.6172|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:43:33.6172|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:43:33.6791|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:43:33.9593|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 11:43:34.0170|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (38ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 11:43:34.0246|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:43:34.0681|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 43.9371ms. 
2023-06-15 11:43:34.0681|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 442.4451ms 
2023-06-15 11:43:34.0681|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:43:34.0681|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 457.5478ms 
2023-06-15 11:43:34.0681|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-06-15 11:43:34.0681|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:43:34.0681|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 11:43:34.0681|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4784ms 
2023-06-15 11:43:34.0827|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 11:43:34.0827|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/LunchGroupDetails.css was not modified 
2023-06-15 11:43:34.0827|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 5.7970ms 
2023-06-15 11:43:34.0827|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 304 - text/css 6.0660ms 
2023-06-15 11:43:34.0827|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:43:34.0827|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.0458ms 
2023-06-15 11:43:37.2221|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:43:37.2221|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:43:37.2221|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:43:41.0407|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:43:46.1720|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 11:44:30.2106|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:44:31.1146|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 1010.0534ms. 
2023-06-15 11:44:31.1146|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 53879.9245ms 
2023-06-15 11:44:31.1146|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:44:31.1146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 53896.1963ms 
2023-06-15 11:44:31.1146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:44:31.1146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:44:31.1146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3796ms 
2023-06-15 11:44:31.1313|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.1868ms 
2023-06-15 11:58:02.6980|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 11:58:05.5694|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:58:05.6100|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:58:05.6100|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 11:58:05.6100|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 11:58:06.0515|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 11:58:06.0700|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 11:58:06.2304|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 11:58:06.2304|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 11:58:06.2304|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 11:58:06.2304|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 11:58:06.2304|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 11:58:07.0600|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 11:58:07.1597|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|Cookies was not authenticated. Failure message: Ticket expired 
2023-06-15 11:58:07.1616|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:58:07.1616|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:58:07.1849|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 11:58:07.3379|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 155.3831ms. 
2023-06-15 11:58:07.3379|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 169.0959ms 
2023-06-15 11:58:07.3379|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:58:07.3818|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:58:07.3818|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 328.9171ms 
2023-06-15 11:58:07.3818|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.0186ms 
2023-06-15 11:58:07.3818|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:58:07.4101|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.5801ms 
2023-06-15 11:58:22.5184|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 
2023-06-15 11:58:22.5184|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|Cookies was not authenticated. Failure message: Ticket expired 
2023-06-15 11:58:22.5184|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:58:22.5318|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:58:22.7998|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:58:23.0028|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:58:23.1420|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 11:58:23.1420|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 11:58:23.1420|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 610.6206ms 
2023-06-15 11:58:23.1420|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 11:58:23.1420|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 11:58:23.1499|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:58:23.1499|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 - 302 0 - 632.0824ms 
2023-06-15 11:58:23.1499|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:58:23.1932|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 11:58:23.2141|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:58:23.2243|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 11:58:23.2243|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 11:58:23.2544|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 29.7856ms. 
2023-06-15 11:58:23.2544|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 103.7646ms 
2023-06-15 11:58:23.2544|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 11:58:23.2559|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 110.0673ms 
2023-06-15 11:58:23.2559|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:58:23.2559|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.5610ms 
2023-06-15 11:58:23.2746|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:58:23.2746|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.0770ms 
2023-06-15 11:58:24.7734|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 11:58:24.7734|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:58:24.7734|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:58:24.7734|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 11:58:25.0858|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 11:58:25.1456|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (39ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 11:58:25.1539|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:58:25.1824|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 28.8337ms. 
2023-06-15 11:58:25.1824|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 405.0005ms 
2023-06-15 11:58:25.1824|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 11:58:25.1824|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 410.7038ms 
2023-06-15 11:58:25.1824|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-06-15 11:58:25.1824|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:58:25.1824|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 11:58:25.1824|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2570ms 
2023-06-15 11:58:25.1970|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 11:58:25.1970|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/LunchGroupDetails.css was not modified 
2023-06-15 11:58:25.1970|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 5.7286ms 
2023-06-15 11:58:25.1970|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 304 - text/css 6.2654ms 
2023-06-15 11:58:25.1970|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:58:25.1970|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.2016ms 
2023-06-15 11:58:29.5333|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 11:58:29.5333|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:58:29.5431|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 11:58:33.3754|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 11:58:35.3823|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 11:58:41.1396|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 11:58:41.1396|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 5.265ms. 
2023-06-15 11:58:41.1396|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 11601.5888ms 
2023-06-15 11:58:41.1396|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 11:58:41.1521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 11618.6043ms 
2023-06-15 11:58:41.1521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:58:41.1521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:58:41.1521|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4318ms 
2023-06-15 11:58:41.1640|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.0262ms 
2023-06-15 11:58:49.8945|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?emailuseremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 11:58:49.8945|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 11:58:49.8981|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 11:58:49.8981|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 11:58:49.8981|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 5.0149ms. 
2023-06-15 11:58:49.8981|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 9.5951ms 
2023-06-15 11:58:49.8981|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 11:58:49.8981|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?emailuseremail%40gmail.com&lunchgroup=Software%20Development - - - 200 - text/html;+charset=utf-8 14.6391ms 
2023-06-15 11:58:49.9176|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 11:58:49.9176|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2879ms 
2023-06-15 11:58:49.9306|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 11:58:49.9306|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.0564ms 
2023-06-15 12:11:08.1870|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:11:11.1163|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (30ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:11:11.1591|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:11:11.1591|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:11:11.1591|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:11:11.1852|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:11:11.2043|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:11:11.3747|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:11:11.3747|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:11:11.3747|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:11:11.3747|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:11:11.3747|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:11:11.8722|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:11:11.9719|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:11:11.9838|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:11:12.0081|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 12:11:12.0125|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 24.8647ms 
2023-06-15 12:11:12.0125|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:11:12.0363|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 12:11:12.0363|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 168.1918ms 
2023-06-15 12:11:12.0446|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:11:12.0446|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:11:12.2835|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:11:12.3343|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:11:12.3483|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:11:12.3652|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 12:11:12.4955|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 134.684ms. 
2023-06-15 12:11:12.4955|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 453.8537ms 
2023-06-15 12:11:12.4955|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:11:12.5418|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:11:12.5418|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 506.2894ms 
2023-06-15 12:11:12.5418|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.2771ms 
2023-06-15 12:11:12.5418|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:11:12.5838|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 32.3407ms 
2023-06-15 12:11:15.2751|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?emailuseremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:11:15.2751|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:11:15.2925|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:11:15.5379|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (34ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:11:15.5455|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 12:13:39.6796|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:13:41.5240|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:13:41.5666|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:13:41.5666|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:13:41.5666|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:13:41.5911|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:13:41.6088|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:13:41.7733|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:13:41.7733|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:13:41.7748|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:13:41.7748|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:13:41.7748|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:13:42.3553|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:13:42.4524|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:13:42.4636|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:13:42.4862|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 12:13:42.4862|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 23.0701ms 
2023-06-15 12:13:42.4862|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:13:42.5093|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 12:13:42.5093|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 156.2489ms 
2023-06-15 12:13:42.5093|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:13:42.5093|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:13:42.7759|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:13:42.8287|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:13:42.8429|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:13:42.8595|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 12:13:42.9865|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 131.9397ms. 
2023-06-15 12:13:42.9865|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 472.8949ms 
2023-06-15 12:13:42.9865|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:13:43.0202|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 510.9487ms 
2023-06-15 12:13:43.0202|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:13:43.0258|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.1111ms 
2023-06-15 12:13:43.0258|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:13:43.0455|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.9433ms 
2023-06-15 12:13:43.4813|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?emailuseremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:13:43.4813|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:13:43.5018|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:14:17.4294|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:14:19.4520|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (32ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:14:19.4952|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:14:19.4952|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:14:19.4952|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:14:19.5228|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:14:19.5418|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:14:19.7078|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:14:19.7078|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:14:19.7078|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:14:19.7078|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:14:19.7078|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:14:20.3519|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:14:20.4476|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:14:20.4476|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:14:20.4848|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 12:14:20.4848|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 25.5659ms 
2023-06-15 12:14:20.4848|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:14:20.5079|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 12:14:20.5079|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 158.7003ms 
2023-06-15 12:14:20.5150|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:14:20.5150|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:14:20.7506|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:14:20.8016|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:14:20.8148|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:14:20.8311|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 12:14:20.9598|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 132.4278ms. 
2023-06-15 12:14:20.9633|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 447.3724ms 
2023-06-15 12:14:20.9633|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:14:20.9937|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:14:20.9939|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 485.9320ms 
2023-06-15 12:14:20.9939|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.0709ms 
2023-06-15 12:14:20.9939|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:14:21.0177|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 16.0019ms 
2023-06-15 12:14:22.4904|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 12:14:22.4951|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:14:22.4951|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:14:22.5568|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:14:22.8304|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:14:22.8866|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (38ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:14:22.8866|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:14:22.9356|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 41.3047ms. 
2023-06-15 12:14:22.9356|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 432.2661ms 
2023-06-15 12:14:22.9356|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:14:22.9356|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 446.9764ms 
2023-06-15 12:14:22.9356|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-06-15 12:14:22.9356|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:14:22.9356|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 12:14:22.9356|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3816ms 
2023-06-15 12:14:22.9501|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/LunchGroupDetails.css was not modified 
2023-06-15 12:14:22.9501|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 12:14:22.9501|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 304 - text/css 5.7488ms 
2023-06-15 12:14:22.9501|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 5.2308ms 
2023-06-15 12:14:22.9501|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:14:22.9501|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.6050ms 
2023-06-15 12:14:26.6579|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 12:14:26.6579|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:14:26.6688|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:14:29.9262|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 12:14:29.9742|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 12:14:31.9553|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:14:31.9553|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 5.2864ms. 
2023-06-15 12:14:31.9553|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 5291.8223ms 
2023-06-15 12:14:31.9553|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:14:31.9553|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 5304.3057ms 
2023-06-15 12:14:31.9696|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:14:31.9696|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:14:31.9696|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3458ms 
2023-06-15 12:14:31.9696|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.3612ms 
2023-06-15 12:14:39.4302|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?emailuseremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:14:39.4313|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:14:39.4313|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:14:45.6491|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:14:47.3801|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 12:16:20.0702|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:16:21.9930|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:16:22.0360|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:16:22.0360|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:16:22.0360|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:16:22.0626|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:16:22.0819|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:16:22.2579|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:16:22.2579|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:16:22.2595|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:16:22.2595|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:16:22.2595|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:16:22.8017|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:16:23.3424|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:16:23.3544|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:16:23.3782|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 12:16:23.3782|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 24.3098ms 
2023-06-15 12:16:23.3782|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:16:23.4007|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 12:16:23.4007|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 602.8746ms 
2023-06-15 12:16:23.4230|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:16:23.4230|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:16:23.6631|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:16:23.7139|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:16:23.7289|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:16:23.7455|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 12:16:23.8759|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 134.6411ms. 
2023-06-15 12:16:23.8759|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 456.2975ms 
2023-06-15 12:16:23.8759|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:16:23.9130|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 512.1852ms 
2023-06-15 12:16:23.9130|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:16:23.9188|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.8728ms 
2023-06-15 12:16:23.9188|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:16:23.9451|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 21.6738ms 
2023-06-15 12:16:25.3112|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 12:16:25.3112|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:16:25.3244|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:16:25.3773|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:16:25.6453|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:16:25.7018|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (38ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:16:25.7018|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:16:25.7513|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 41.6673ms. 
2023-06-15 12:16:25.7513|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 426.8739ms 
2023-06-15 12:16:25.7513|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:16:25.7513|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 441.8070ms 
2023-06-15 12:16:25.7607|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:16:25.7607|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2920ms 
2023-06-15 12:16:25.7607|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:16:25.7607|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.3407ms 
2023-06-15 12:16:29.8310|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 12:16:29.8310|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:16:29.8424|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:16:38.0796|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 12:16:38.1279|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 12:16:40.1174|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:16:40.1267|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 9.3912ms. 
2023-06-15 12:16:40.1267|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 10284.4128ms 
2023-06-15 12:16:40.1267|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:16:40.1267|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 10297.6648ms 
2023-06-15 12:16:40.1358|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:16:40.1358|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:16:40.1358|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3899ms 
2023-06-15 12:16:40.1358|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.4368ms 
2023-06-15 12:16:50.3096|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?emailuseremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:16:50.3096|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:16:50.3096|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:16:50.3239|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:17:21.0651|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:17:22.8849|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (26ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:17:22.9248|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:17:22.9248|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:17:22.9248|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:17:22.9490|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:17:22.9667|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:17:23.1289|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:17:23.1289|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:17:23.1289|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:17:23.1289|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:17:23.1289|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:17:23.9015|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:17:23.9967|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:17:23.9967|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:17:24.0303|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 12:17:24.0303|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 23.0441ms 
2023-06-15 12:17:24.0303|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:17:24.0530|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 12:17:24.0530|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 154.9290ms 
2023-06-15 12:17:24.0562|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:17:24.0562|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:17:24.3404|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:17:24.3888|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:17:24.4021|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:17:24.4179|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 12:17:24.5408|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 126.6871ms. 
2023-06-15 12:17:24.5408|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 483.0274ms 
2023-06-15 12:17:24.5408|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:17:24.5739|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:17:24.5739|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 522.3928ms 
2023-06-15 12:17:24.5739|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.2676ms 
2023-06-15 12:17:24.5739|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:17:24.6049|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 20.0165ms 
2023-06-15 12:17:42.8389|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 12:17:42.8389|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:17:42.8389|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:17:42.9048|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:17:43.1709|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:17:43.2284|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (38ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:17:43.2284|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:17:43.2804|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 44.338ms. 
2023-06-15 12:17:43.2804|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 427.9853ms 
2023-06-15 12:17:43.2804|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:17:43.2804|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 445.1136ms 
2023-06-15 12:17:43.2901|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:17:43.2901|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2915ms 
2023-06-15 12:17:43.2901|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:17:43.2901|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.0190ms 
2023-06-15 12:17:46.6703|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?emailuseremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:17:46.6703|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:17:46.6703|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:17:46.6836|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:17:55.6437|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 12:18:14.5409|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:18:16.5776|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:18:16.6334|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:18:16.6371|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:18:16.6371|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:18:16.6650|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:18:16.6872|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:18:16.8629|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:18:16.8629|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:18:16.8629|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:18:16.8629|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:18:16.8629|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:18:17.4194|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:18:17.5245|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:18:17.5245|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:18:17.5637|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 12:18:17.5637|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 27.3199ms 
2023-06-15 12:18:17.5637|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:18:17.5878|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 12:18:17.5878|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 171.3313ms 
2023-06-15 12:18:17.5878|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:18:17.5878|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:18:17.8463|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:18:17.8958|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:18:17.9093|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:18:17.9251|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 12:18:18.0588|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 138.2662ms. 
2023-06-15 12:18:18.0588|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 461.5746ms 
2023-06-15 12:18:18.0588|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:18:18.0953|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:18:18.0953|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 508.4090ms 
2023-06-15 12:18:18.0953|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.5106ms 
2023-06-15 12:18:18.1037|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:18:18.1208|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 17.0777ms 
2023-06-15 12:18:19.3849|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 12:18:19.3849|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:18:19.3849|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:18:19.4519|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:18:19.7612|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:18:19.8181|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (38ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:18:19.8261|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:18:19.8678|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 42.16ms. 
2023-06-15 12:18:19.8678|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 468.8354ms 
2023-06-15 12:18:19.8678|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:18:19.8696|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 484.6999ms 
2023-06-15 12:18:19.8696|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:18:19.8696|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2247ms 
2023-06-15 12:18:19.8696|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:18:19.8883|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.7121ms 
2023-06-15 12:18:23.5013|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 12:18:23.5013|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:18:23.5132|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:18:30.1549|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 12:18:57.8945|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 12:19:01.6082|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?emailuseremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:19:02.2199|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:19:02.2496|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:19:02.3522|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:19:02.4118|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:22:38.4800|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:22:40.5166|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (29ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:22:40.5593|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:22:40.5593|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:22:40.5593|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:22:40.5903|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:22:40.6110|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:22:40.7820|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:22:40.7820|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:22:40.7820|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:22:40.7820|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:22:40.7820|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:22:41.2297|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:22:41.3284|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:22:41.3411|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:22:41.3657|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 12:22:41.3699|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 24.8678ms 
2023-06-15 12:22:41.3699|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:22:41.3959|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 12:22:41.3959|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 168.6979ms 
2023-06-15 12:22:41.4042|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:22:41.4042|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:22:41.6548|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:22:41.7036|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:22:41.7174|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:22:41.7330|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 12:22:41.8587|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 129.416ms. 
2023-06-15 12:22:41.8587|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 457.3595ms 
2023-06-15 12:22:41.8587|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:22:41.8949|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:22:41.8949|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 502.2893ms 
2023-06-15 12:22:41.9005|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.5609ms 
2023-06-15 12:22:41.9005|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:22:41.9219|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 18.3727ms 
2023-06-15 12:22:54.7214|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 12:22:54.7214|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:22:54.7344|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:22:54.7880|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:22:55.0614|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:22:55.1279|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (47ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:22:55.1358|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:22:55.1769|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 41.4595ms. 
2023-06-15 12:22:55.1769|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 442.5348ms 
2023-06-15 12:22:55.1769|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:22:55.1769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 457.4790ms 
2023-06-15 12:22:55.1868|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:22:55.1868|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2789ms 
2023-06-15 12:22:55.1868|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:22:55.1974|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.0227ms 
2023-06-15 12:22:59.0714|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 12:22:59.0714|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:22:59.0714|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:23:08.1078|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 12:23:13.1249|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 12:23:19.0309|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:23:19.8769|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 942.7916ms. 
2023-06-15 12:23:19.8769|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 20790.9559ms 
2023-06-15 12:23:19.8769|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:23:19.8966|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 20825.1395ms 
2023-06-15 12:23:19.9072|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:23:19.9072|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:23:19.9072|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.5270ms 
2023-06-15 12:23:19.9072|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.8497ms 
2023-06-15 12:23:52.8478|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:23:52.8478|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:23:52.8478|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:23:52.8609|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:23:52.8609|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 12:23:52.8609|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 12:23:52.8609|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/ViewLunchGroup. 
2023-06-15 12:23:52.8609|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 12.6831ms 
2023-06-15 12:23:52.8609|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:23:52.8609|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - - 302 0 - 18.1012ms 
2023-06-15 12:23:52.8609|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup - - 
2023-06-15 12:23:52.8732|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:23:52.8732|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(Int32) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:23:52.8732|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__lunchgroupID_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__lunchgroupID_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-06-15 12:23:52.8841|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroup.cshtml. 
2023-06-15 12:24:37.9484|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:24:39.7808|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:24:39.8211|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:24:39.8236|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:24:39.8236|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:24:39.8455|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:24:39.8630|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:24:40.0217|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:24:40.0217|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:24:40.0217|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:24:40.0217|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:24:40.0217|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:24:40.5442|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:24:40.6381|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:24:40.6381|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:24:40.6714|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/Index. 
2023-06-15 12:24:40.6714|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 22.1608ms 
2023-06-15 12:24:40.6714|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:24:40.6953|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 153.3332ms 
2023-06-15 12:24:40.6953|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:24:40.7071|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:24:40.7071|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:24:40.9646|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:24:41.0129|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:24:41.0292|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:24:41.1560|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LGUHomePage.cshtml executed in 130.9027ms. 
2023-06-15 12:24:41.1560|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder) in 451.6246ms 
2023-06-15 12:24:41.1560|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:24:41.1926|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/Index - - - 200 - text/html;+charset=utf-8 496.4632ms 
2023-06-15 12:24:41.1926|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:24:41.1926|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LGUser.css?v=iO03ccPD9aZlT8XNFypRMAMW3alO3J47lgM_MEis6SY - - 
2023-06-15 12:24:41.1989|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.5299ms 
2023-06-15 12:24:41.1989|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/LGUser.css was not modified 
2023-06-15 12:24:41.1989|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:24:41.1989|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LGUser.css?v=iO03ccPD9aZlT8XNFypRMAMW3alO3J47lgM_MEis6SY - - - 304 - text/css 7.0831ms 
2023-06-15 12:24:41.2173|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 16.1150ms 
2023-06-15 12:24:55.9190|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?lunchgroupID=1 - - 
2023-06-15 12:24:55.9190|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:24:55.9318|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(Int32) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:24:56.3044|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (36ms) [Parameters=[@__lunchgroupID_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__lunchgroupID_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-06-15 12:24:56.3124|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroup.cshtml. 
2023-06-15 12:24:56.3237|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/ViewLunchGroup.cshtml executed in 11.7697ms. 
2023-06-15 12:24:56.3237|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder) in 391.9431ms 
2023-06-15 12:24:56.3237|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:24:56.3237|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?lunchgroupID=1 - - - 200 - text/html;+charset=utf-8 408.2464ms 
2023-06-15 12:24:56.3237|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:24:56.3237|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/viewlunchgroup.css?v=YMfb1B8wx3IyrbpjPFBamGUH6MDnnAFmP5W4Cp2JnMg - - 
2023-06-15 12:24:56.3237|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:24:56.3237|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.5330ms 
2023-06-15 12:24:56.3416|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 7.2257ms 
2023-06-15 12:24:56.3537|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/viewlunchgroup.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\viewlunchgroup.css' 
2023-06-15 12:24:56.3537|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/viewlunchgroup.css?v=YMfb1B8wx3IyrbpjPFBamGUH6MDnnAFmP5W4Cp2JnMg - - - 200 1424 text/css 19.6979ms 
2023-06-15 12:25:05.4540|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:25:07.3320|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:25:07.3729|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:25:07.3729|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:25:07.3729|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:25:07.3979|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:25:07.4155|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:25:07.5853|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:25:07.5853|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:25:07.5853|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:25:07.5873|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:25:07.5873|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:25:07.8265|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup - - 
2023-06-15 12:25:07.9390|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:25:07.9589|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(Int32) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:25:08.1535|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:25:08.1535|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:25:08.1535|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:25:08.1829|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/Index. 
2023-06-15 12:25:08.1829|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 27.1504ms 
2023-06-15 12:25:08.1829|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:25:08.2060|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:25:08.2060|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 54.9062ms 
2023-06-15 12:25:08.2060|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:25:08.2060|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:25:08.3887|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:25:08.4391|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:25:08.4615|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:25:08.4700|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (36ms) [Parameters=[@__lunchgroupID_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__lunchgroupID_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-06-15 12:25:08.4700|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroup.cshtml. 
2023-06-15 12:25:19.6286|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:25:21.4127|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:25:21.4544|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:25:21.4544|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:25:21.4544|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:25:21.4796|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:25:21.4974|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:25:21.6600|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:25:21.6600|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:25:21.6600|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:25:21.6600|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:25:21.6600|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:25:22.5084|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:25:22.6024|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:25:22.6149|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:25:22.6387|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/Index. 
2023-06-15 12:25:22.6387|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 24.3158ms 
2023-06-15 12:25:22.6387|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:25:22.6612|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:25:22.6612|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 157.0192ms 
2023-06-15 12:25:22.6731|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:25:22.6731|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:25:22.9178|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:25:22.9684|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:25:22.9841|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:25:23.1424|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LGUHomePage.cshtml executed in 162.508ms. 
2023-06-15 12:25:23.1424|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder) in 472.5544ms 
2023-06-15 12:25:23.1424|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:25:23.1847|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:25:23.1847|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/Index - - - 200 - text/html;+charset=utf-8 523.4812ms 
2023-06-15 12:25:23.1847|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 6.7064ms 
2023-06-15 12:25:23.1847|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:25:23.2108|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 14.6418ms 
2023-06-15 12:25:23.9713|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup - - 
2023-06-15 12:25:23.9713|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:25:23.9851|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(Int32) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:25:24.3636|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (37ms) [Parameters=[@__lunchgroupID_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__lunchgroupID_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-06-15 12:25:24.3636|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroup.cshtml. 
2023-06-15 12:25:51.6224|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/LogOut - - 
2023-06-15 12:25:51.6224|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder) in 27638.7696ms 
2023-06-15 12:25:51.6224|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:25:51.6224|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:25:51.6224|ERROR|Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware|An unhandled exception has occurred while executing the request. {"Type":"System.NullReferenceException", "TargetSite":"Void MoveNext()", "Message":"Object reference not set to an instance of an object.", "Data":{}, "Source":"Lunch Tinder", "HResult":-2147467261, "StackTrace":"   at AspNetCoreGeneratedDocument.Views_LunchGroupUser_ViewLunchGroup.ExecuteAsync() in C:\\Users\\ewalsh\\source\\repos\\Lunch Tinder\\Lunch Tinder\\Lunch Tinder\\Views\\LunchGroupUser\\ViewLunchGroup.cshtml:line 9\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderPageCoreAsync(IRazorPage page, ViewContext context)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderPageAsync(IRazorPage page, ViewContext context, Boolean invokeViewStarts)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderAsync(ViewContext context)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(ViewContext viewContext, String contentType, Nullable`1 statusCode)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(ViewContext viewContext, String contentType, Nullable`1 statusCode)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(ActionContext actionContext, IView view, ViewDataDictionary viewData, ITempDataDictionary tempData, String contentType, Nullable`1 statusCode)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.ExecuteAsync(ActionContext context, ViewResult result)\r\n   at Microsoft.AspNetCore.Mvc.ViewResult.ExecuteResultAsync(ActionContext context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|25_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)"}
2023-06-15 12:25:51.6224|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "LogOut", controller = "LGU"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LogOut() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:25:51.7111|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed out. 
2023-06-15 12:25:51.7111|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /. 
2023-06-15 12:25:51.7111|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder) in 7.8717ms 
2023-06-15 12:25:51.7111|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:25:51.7111|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/LogOut - - - 302 0 - 89.1721ms 
2023-06-15 12:25:51.7151|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:25:51.7151|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:25:51.7151|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:25:51.7151|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 12:25:51.7375|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup - - - 500 - text/html;+charset=utf-8 27766.1305ms 
2023-06-15 12:25:51.7375|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:25:51.7446|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:25:51.7446|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.5411ms 
2023-06-15 12:25:51.7446|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.4644ms 
2023-06-15 12:25:51.7446|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 39.3676ms. 
2023-06-15 12:25:51.7446|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 40.1195ms 
2023-06-15 12:25:51.7446|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:25:51.7601|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 44.9527ms 
2023-06-15 12:25:51.7601|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:25:51.7601|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2518ms 
2023-06-15 12:25:51.7790|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:25:51.7790|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.2671ms 
2023-06-15 12:25:59.7503|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 
2023-06-15 12:25:59.7503|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:25:59.7503|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:25:59.7848|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:25:59.9399|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:26:00.0966|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 12:26:00.0966|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 12:26:00.0966|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 341.016ms 
2023-06-15 12:26:00.0966|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:26:00.0966|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 - 302 0 - 346.7122ms 
2023-06-15 12:26:00.0966|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 12:26:00.0966|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:26:00.0966|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:26:00.0966|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:26:00.0966|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:26:00.0966|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:26:00.0966|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 12:26:00.1117|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 9.0818ms. 
2023-06-15 12:26:00.1117|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 10.9733ms 
2023-06-15 12:26:00.1117|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:26:00.1117|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 14.3297ms 
2023-06-15 12:26:00.1243|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:26:00.1243|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2299ms 
2023-06-15 12:26:00.1243|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:26:00.1343|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.7785ms 
2023-06-15 12:26:01.4433|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 12:26:01.4433|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:26:01.4433|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:26:01.4517|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:26:01.4658|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:26:01.4658|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:26:01.4804|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:26:01.5117|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 31.6003ms. 
2023-06-15 12:26:01.5117|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 64.9381ms 
2023-06-15 12:26:01.5117|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:26:01.5117|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 70.3691ms 
2023-06-15 12:26:01.5117|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:26:01.5117|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2318ms 
2023-06-15 12:26:01.5259|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-06-15 12:26:01.5259|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - 
2023-06-15 12:26:01.5259|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:26:01.5259|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.0929ms 
2023-06-15 12:26:01.5259|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/LunchGroupDetails.css was not modified 
2023-06-15 12:26:01.5259|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 12:26:01.5259|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 304 - text/css 7.2823ms 
2023-06-15 12:26:01.5259|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=DeC2g-HCy4JVTI4nl_S83YJYYkamCBnP34Kz_vJmckM - - - 304 - application/javascript 7.3009ms 
2023-06-15 12:26:04.9045|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 12:26:04.9045|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:26:04.9045|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:26:11.4987|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 12:26:15.3985|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 12:26:19.3942|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:26:20.2809|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 974.5952ms. 
2023-06-15 12:26:20.2809|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 15367.0194ms 
2023-06-15 12:26:20.2809|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:26:20.2809|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 15378.2275ms 
2023-06-15 12:26:20.2944|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:26:20.2944|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:26:20.2944|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3672ms 
2023-06-15 12:26:20.3101|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.4836ms 
2023-06-15 12:26:52.1036|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:26:52.1036|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:26:52.1036|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:27:03.9929|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:27:05.1148|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 12:27:07.5271|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 12:27:11.7026|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/ViewLunchGroup. 
2023-06-15 12:27:11.7026|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 19592.9018ms 
2023-06-15 12:27:11.7026|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:27:11.7026|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - - 302 0 - 19599.4705ms 
2023-06-15 12:27:11.7026|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup - - 
2023-06-15 12:27:11.7026|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:27:11.7026|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(Int32) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:27:11.7026|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__lunchgroupID_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__lunchgroupID_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-06-15 12:27:11.7026|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroup.cshtml. 
2023-06-15 12:32:51.1629|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:32:53.9363|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:32:53.9745|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:32:53.9745|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:32:53.9745|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:32:53.9998|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:32:54.0197|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:32:54.1991|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:32:54.1991|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:32:54.1991|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:32:54.1991|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:32:54.1991|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:32:54.9516|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:32:55.0460|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:32:55.0572|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:32:55.0816|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/Index. 
2023-06-15 12:32:55.0816|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 25.0144ms 
2023-06-15 12:32:55.0816|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:32:55.1041|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:32:55.1041|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 156.1413ms 
2023-06-15 12:32:55.1041|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:32:55.1041|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:32:55.3595|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:32:55.4105|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:32:55.4271|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:32:55.5571|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LGUHomePage.cshtml executed in 134.5713ms. 
2023-06-15 12:32:55.5571|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder) in 443.2642ms 
2023-06-15 12:32:55.5571|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:32:55.5903|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:32:55.5903|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/Index - - - 200 - text/html;+charset=utf-8 486.2729ms 
2023-06-15 12:32:55.5903|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.4571ms 
2023-06-15 12:32:55.5903|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:32:55.6158|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 16.2680ms 
2023-06-15 12:32:59.1164|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:32:59.1224|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:32:59.1360|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:32:59.3852|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (35ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:32:59.3852|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 12:32:59.4051|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 12:32:59.4051|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/ViewLunchGroup?groupName=Software%20Development. 
2023-06-15 12:32:59.4051|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 269.3216ms 
2023-06-15 12:32:59.4051|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:32:59.4051|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - - 302 0 - 289.2243ms 
2023-06-15 12:32:59.4051|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - 
2023-06-15 12:32:59.4051|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:32:59.4051|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(System.String) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:32:59.4212|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:32:59.5656|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:32:59.5771|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t0].[RestaurantID], [t0].[EventsEventId0], [t0].[RestaurantDescription], [t0].[RestaurantName], [t0].[RestaurantsRestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime], [r].[RestaurantID], [r].[EventsEventId] AS [EventsEventId0], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
    LEFT JOIN [Restaurants] AS [r] ON [e0].[EventId] = [r].[EventsEventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[RestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:32:59.5771|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml. 
2023-06-15 12:32:59.5978|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml executed in 13.7177ms. 
2023-06-15 12:32:59.5978|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder) in 186.1472ms 
2023-06-15 12:32:59.5978|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:32:59.5978|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 190.3561ms 
2023-06-15 12:32:59.6091|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - 
2023-06-15 12:32:59.6091|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - 
2023-06-15 12:32:59.6091|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:32:59.6091|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3592ms 
2023-06-15 12:32:59.6193|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:32:59.6193|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\js\site.js' 
2023-06-15 12:32:59.6193|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/ViewLunchGroupDetailsLGU.css'. Physical path: 'C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\wwwroot\css\ViewLunchGroupDetailsLGU.css' 
2023-06-15 12:32:59.6193|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.0580ms 
2023-06-15 12:32:59.6193|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - - 200 272 text/css 14.5158ms 
2023-06-15 12:32:59.6193|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - - 200 9392 application/javascript 14.4526ms 
2023-06-15 12:33:47.9400|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:33:49.7751|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:33:49.8145|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:33:49.8145|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:33:49.8145|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:33:49.8390|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:33:49.8570|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:33:50.0231|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:33:50.0231|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:33:50.0247|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:33:50.0247|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:33:50.0247|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:33:50.7284|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:33:50.8235|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:33:50.8235|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:33:50.8586|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/Index. 
2023-06-15 12:33:50.8586|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 23.8391ms 
2023-06-15 12:33:50.8586|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:33:50.8818|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:33:50.8818|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 155.9323ms 
2023-06-15 12:33:50.8937|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:33:50.8937|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:33:51.1435|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:33:51.1908|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:33:51.2080|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:33:51.3323|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LGUHomePage.cshtml executed in 128.897ms. 
2023-06-15 12:33:51.3323|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder) in 441.3502ms 
2023-06-15 12:33:51.3323|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:33:51.3659|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/Index - - - 200 - text/html;+charset=utf-8 484.0556ms 
2023-06-15 12:33:51.3716|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:33:51.3716|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.9968ms 
2023-06-15 12:33:51.3716|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:33:51.3953|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.0012ms 
2023-06-15 12:41:52.4076|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:41:55.2025|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (30ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:41:55.2427|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:41:55.2452|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:41:55.2452|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:41:55.2672|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:41:55.2869|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:41:55.4525|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:41:55.4525|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:41:55.4525|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:41:55.4525|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:41:55.4525|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:41:56.1449|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:41:56.2403|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:41:56.2518|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:41:56.2747|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/Index. 
2023-06-15 12:41:56.2747|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 23.414ms 
2023-06-15 12:41:56.2747|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:41:56.2973|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:41:56.2973|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 155.1980ms 
2023-06-15 12:41:56.3084|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:41:56.3084|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:41:56.5497|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:41:56.5991|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:41:56.6159|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:41:56.7776|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LGUHomePage.cshtml executed in 165.7185ms. 
2023-06-15 12:41:56.7776|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder) in 473.1059ms 
2023-06-15 12:41:56.7776|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:41:56.8180|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/Index - - - 200 - text/html;+charset=utf-8 520.7052ms 
2023-06-15 12:41:56.8180|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:41:56.8238|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.2942ms 
2023-06-15 12:41:56.8238|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:41:56.8493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 19.7496ms 
2023-06-15 12:41:59.2067|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/Profile - - 
2023-06-15 12:41:59.2067|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:41:59.2067|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Profile", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Profile() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:41:59.4349|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (35ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[UserId] = @__id_0 
2023-06-15 12:41:59.4349|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Profile. 
2023-06-15 12:41:59.4918|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Profile executed in 45.7089ms. 
2023-06-15 12:41:59.4918|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder) in 280.9772ms 
2023-06-15 12:41:59.4918|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:41:59.4936|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/Profile - - - 200 - text/html;+charset=utf-8 286.9494ms 
2023-06-15 12:41:59.4936|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:41:59.4936|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:41:59.4936|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/profile.css?v=_CzVoGRseaYcZYVTetfSI-lmPhqIGdUaNIDUCni89ug - - 
2023-06-15 12:41:59.4936|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.7587ms 
2023-06-15 12:41:59.4936|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.3171ms 
2023-06-15 12:41:59.5103|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/profile.css was not modified 
2023-06-15 12:41:59.5103|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/profile.css?v=_CzVoGRseaYcZYVTetfSI-lmPhqIGdUaNIDUCni89ug - - - 304 - text/css 8.5443ms 
2023-06-15 12:42:01.5396|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/LogOut - - 
2023-06-15 12:42:01.5420|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:42:01.5420|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "LogOut", controller = "LGU"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LogOut() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:42:01.5420|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed out. 
2023-06-15 12:42:01.5420|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /. 
2023-06-15 12:42:01.5420|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder) in 4.925ms 
2023-06-15 12:42:01.5420|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:42:01.5420|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/LogOut - - - 302 0 - 10.4871ms 
2023-06-15 12:42:01.5420|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:42:01.5420|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:42:01.5420|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:42:01.5420|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 12:42:01.5664|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 12.383ms. 
2023-06-15 12:42:01.5664|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 13.4562ms 
2023-06-15 12:42:01.5664|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:42:01.5664|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 14.8076ms 
2023-06-15 12:42:01.5742|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:42:01.5742|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2541ms 
2023-06-15 12:42:01.5742|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:42:01.5742|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.0729ms 
2023-06-15 12:42:08.6671|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 
2023-06-15 12:42:08.6671|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:42:08.6671|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:42:08.7109|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:42:08.8453|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:42:08.9812|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 12:42:08.9812|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 12:42:08.9812|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 302.2612ms 
2023-06-15 12:42:08.9812|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:42:08.9812|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 - 302 0 - 314.3281ms 
2023-06-15 12:42:08.9812|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 12:42:08.9812|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:42:08.9812|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:42:08.9812|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:42:08.9812|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:42:08.9812|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:42:08.9812|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 12:42:08.9972|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 8.7378ms. 
2023-06-15 12:42:08.9972|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 11.1341ms 
2023-06-15 12:42:08.9972|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:42:08.9972|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 13.9567ms 
2023-06-15 12:42:08.9972|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:42:08.9972|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:42:08.9972|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2562ms 
2023-06-15 12:42:09.0100|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.4753ms 
2023-06-15 12:42:13.8730|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 12:42:13.8730|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:42:13.8730|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:42:13.8730|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:42:14.0256|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:42:14.0256|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:42:14.0420|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:42:14.0677|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 26.0495ms. 
2023-06-15 12:42:14.0677|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 191.0019ms 
2023-06-15 12:42:14.0677|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:42:14.0677|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 196.5001ms 
2023-06-15 12:42:14.0769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-06-15 12:42:14.0769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:42:14.0769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - 
2023-06-15 12:42:14.0769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3587ms 
2023-06-15 12:42:14.0769|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/LunchGroupDetails.css was not modified 
2023-06-15 12:42:14.0769|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 12:42:14.0769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 304 - text/css 0.8218ms 
2023-06-15 12:42:14.0769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - - 304 - application/javascript 0.3592ms 
2023-06-15 12:42:14.0769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:42:14.0769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.7002ms 
2023-06-15 12:42:20.6428|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 334 
2023-06-15 12:42:20.6428|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:42:20.6515|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:42:24.8459|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__UserEmail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[EmailAddress]
FROM [Users] AS [u]
WHERE [u].[UserName] = @__UserEmail_0 
2023-06-15 12:42:24.9530|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 12:42:25.0002|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 12:42:27.0729|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:42:27.0729|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 8.1429ms. 
2023-06-15 12:42:27.0729|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 6429.5686ms 
2023-06-15 12:42:27.0729|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:42:27.0729|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 334 - 200 - text/html;+charset=utf-8 6440.5313ms 
2023-06-15 12:42:27.0931|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:42:27.0931|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:42:27.0931|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4832ms 
2023-06-15 12:42:27.0931|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.8337ms 
2023-06-15 12:42:36.4863|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:42:36.4863|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:42:36.4953|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:42:36.4953|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:42:36.4953|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 12:42:36.5099|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i]
WHERE [i].[UsernameEmail] = @__p_0 
2023-06-15 12:42:36.5099|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [InvitesLG] SET [LunchGroupName] = @p0, [Status] = @p1, [UsernameEmail] = @p2
OUTPUT 1
WHERE [InviteID] = @p3; 
2023-06-15 12:42:36.5099|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 12:42:36.5099|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/ViewLunchGroup?groupName=Software%20Development. 
2023-06-15 12:42:36.5099|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 26.7929ms 
2023-06-15 12:42:36.5099|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:42:36.5099|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - - 302 0 - 36.3905ms 
2023-06-15 12:42:36.5254|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - 
2023-06-15 12:42:36.5254|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:42:36.5254|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(System.String) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:42:36.5254|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:42:36.5486|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:42:36.5566|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t0].[RestaurantID], [t0].[EventsEventId0], [t0].[RestaurantDescription], [t0].[RestaurantName], [t0].[RestaurantsRestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime], [r].[RestaurantID], [r].[EventsEventId] AS [EventsEventId0], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
    LEFT JOIN [Restaurants] AS [r] ON [e0].[EventId] = [r].[EventsEventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[RestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:42:36.5566|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml. 
2023-06-15 12:42:36.5566|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml executed in 10.2054ms. 
2023-06-15 12:42:36.5566|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder) in 39.4553ms 
2023-06-15 12:42:36.5566|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:42:36.5566|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 42.8429ms 
2023-06-15 12:42:36.5785|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:42:36.5785|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2076ms 
2023-06-15 12:42:36.5785|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - 
2023-06-15 12:42:36.5785|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/ViewLunchGroupDetailsLGU.css was not modified 
2023-06-15 12:42:36.5785|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - - 304 - text/css 0.3443ms 
2023-06-15 12:42:36.5881|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:42:36.5881|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.1324ms 
2023-06-15 12:43:52.9714|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:43:54.7566|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:43:54.7981|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:43:54.7981|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:43:54.7981|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:43:54.8215|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:43:54.8388|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:43:54.9986|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:43:54.9986|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:43:54.9986|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:43:54.9986|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:43:54.9986|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:43:55.7405|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:43:55.8345|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:43:55.8459|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:43:55.8690|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/Index. 
2023-06-15 12:43:55.8690|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 23.5018ms 
2023-06-15 12:43:55.8690|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:43:55.8918|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:43:55.8918|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 154.0465ms 
2023-06-15 12:43:55.9169|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:43:55.9169|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:43:56.1512|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:43:56.1990|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:43:56.2152|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:43:56.3427|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LGUHomePage.cshtml executed in 131.325ms. 
2023-06-15 12:43:56.3427|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder) in 428.5856ms 
2023-06-15 12:43:56.3427|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:43:56.3848|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/Index - - - 200 - text/html;+charset=utf-8 492.9242ms 
2023-06-15 12:43:56.3848|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:43:56.4008|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.4683ms 
2023-06-15 12:43:56.4008|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:43:56.4257|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 19.7788ms 
2023-06-15 12:44:03.4146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/LogOut - - 
2023-06-15 12:44:03.4191|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:44:03.4191|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "LogOut", controller = "LGU"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LogOut() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:44:03.4191|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed out. 
2023-06-15 12:44:03.4191|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /. 
2023-06-15 12:44:03.4191|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder) in 7.2367ms 
2023-06-15 12:44:03.4191|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:44:03.4191|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/LogOut - - - 302 0 - 14.5968ms 
2023-06-15 12:44:03.4313|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:44:03.4313|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:44:03.4313|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:44:03.4313|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 12:44:03.4587|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 25.6721ms. 
2023-06-15 12:44:03.4587|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 26.7794ms 
2023-06-15 12:44:03.4587|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:44:03.4587|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 28.2617ms 
2023-06-15 12:44:03.4681|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:44:03.4681|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4054ms 
2023-06-15 12:44:03.4681|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:44:03.4831|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.5658ms 
2023-06-15 12:44:10.3362|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 
2023-06-15 12:44:10.3377|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:44:10.3377|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:44:10.4154|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:44:10.5602|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:44:10.6982|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 12:44:10.6982|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 12:44:10.6982|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 349.5616ms 
2023-06-15 12:44:10.6982|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:44:10.6982|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 - 302 0 - 362.2724ms 
2023-06-15 12:44:10.6982|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 12:44:10.6982|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:44:10.6982|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:44:10.6982|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:44:10.6982|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:44:10.6982|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:44:10.6982|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 12:44:10.7142|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 9.3614ms. 
2023-06-15 12:44:10.7142|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 12.4234ms 
2023-06-15 12:44:10.7142|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:44:10.7142|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 15.2966ms 
2023-06-15 12:44:10.7142|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:44:10.7142|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:44:10.7142|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3105ms 
2023-06-15 12:44:10.7142|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.8913ms 
2023-06-15 12:44:12.0630|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 12:44:12.0630|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:44:12.0630|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:44:12.0716|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:44:12.3499|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:44:12.4027|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (34ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:44:12.4027|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:44:12.4380|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 27.8316ms. 
2023-06-15 12:44:12.4380|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 371.7486ms 
2023-06-15 12:44:12.4380|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 12:44:12.4380|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 376.6778ms 
2023-06-15 12:44:12.4465|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:44:12.4465|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - 
2023-06-15 12:44:12.4465|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3405ms 
2023-06-15 12:44:12.4465|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:44:12.4465|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 12:44:12.4465|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - - 304 - application/javascript 6.6397ms 
2023-06-15 12:44:12.4465|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.6332ms 
2023-06-15 12:44:21.3868|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 334 
2023-06-15 12:44:21.3868|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:44:21.3868|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:44:35.3396|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__UserEmail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[EmailAddress]
FROM [Users] AS [u]
WHERE [u].[UserName] = @__UserEmail_0 
2023-06-15 12:45:06.9476|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 12:45:10.4400|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 12:45:12.5473|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 12:45:12.5473|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 5.4636ms. 
2023-06-15 12:45:12.5473|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 51155.9982ms 
2023-06-15 12:45:12.5473|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 12:45:12.5473|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 334 - 200 - text/html;+charset=utf-8 51169.3915ms 
2023-06-15 12:45:12.5650|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:45:12.5650|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:45:12.5650|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.0451ms 
2023-06-15 12:45:12.5727|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.9323ms 
2023-06-15 12:45:18.0185|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/LogOut - - 
2023-06-15 12:45:18.0185|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:45:18.0185|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "LogOut", controller = "LGU"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LogOut() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:45:18.0185|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed out. 
2023-06-15 12:45:18.0185|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /. 
2023-06-15 12:45:18.0185|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder) in 0.43ms 
2023-06-15 12:45:18.0185|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:45:18.0185|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/LogOut - - - 302 0 - 2.7438ms 
2023-06-15 12:45:18.0185|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:45:18.0185|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:45:18.0185|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:45:18.0252|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 12:45:18.0252|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 2.9966ms. 
2023-06-15 12:45:18.0252|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 3.65ms 
2023-06-15 12:45:18.0252|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:45:18.0252|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 5.0504ms 
2023-06-15 12:45:18.0252|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:45:18.0252|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2291ms 
2023-06-15 12:45:18.0434|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:45:18.0434|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.3034ms 
2023-06-15 12:45:37.2279|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:45:37.2279|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:45:37.2279|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:45:43.2071|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:45:44.1807|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 12:45:48.7633|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i]
WHERE [i].[UsernameEmail] = @__p_0 
2023-06-15 12:46:10.1746|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [InvitesLG] SET [LunchGroupName] = @p0, [Status] = @p1, [UsernameEmail] = @p2
OUTPUT 1
WHERE [InviteID] = @p3; 
2023-06-15 12:46:12.3531|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 12:46:13.4362|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/ViewLunchGroup?groupName=Software%20Development. 
2023-06-15 12:46:13.4362|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 36203.535ms 
2023-06-15 12:46:13.4362|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:46:13.4362|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - - 302 0 - 36208.8765ms 
2023-06-15 12:46:13.4362|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - 
2023-06-15 12:46:13.4362|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:46:13.4362|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(System.String) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:46:22.5458|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:46:22.5768|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:46:22.5768|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t0].[RestaurantID], [t0].[EventsEventId0], [t0].[RestaurantDescription], [t0].[RestaurantName], [t0].[RestaurantsRestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime], [r].[RestaurantID], [r].[EventsEventId] AS [EventsEventId0], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
    LEFT JOIN [Restaurants] AS [r] ON [e0].[EventId] = [r].[EventsEventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[RestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:46:22.5768|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml. 
2023-06-15 12:46:22.5980|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml executed in 16.0405ms. 
2023-06-15 12:46:22.5980|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder) in 9154.2131ms 
2023-06-15 12:46:22.5980|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:46:22.5980|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 9159.6602ms 
2023-06-15 12:46:22.6159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - 
2023-06-15 12:46:22.6159|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/ViewLunchGroupDetailsLGU.css was not modified 
2023-06-15 12:46:22.6159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - - 304 - text/css 0.8482ms 
2023-06-15 12:46:22.6287|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - 
2023-06-15 12:46:22.6287|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 12:46:22.6287|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - - 304 - application/javascript 0.4005ms 
2023-06-15 12:46:22.6459|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:46:22.6459|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:46:22.6459|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 1.8407ms 
2023-06-15 12:46:22.6523|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.5813ms 
2023-06-15 12:49:58.9385|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:50:00.9133|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:50:00.9551|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:50:00.9551|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:50:00.9551|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:50:00.9795|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:50:00.9970|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:50:01.1664|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:50:01.1664|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:50:01.1664|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:50:01.1664|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:50:01.1664|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:50:01.5736|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:50:01.6756|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:50:01.6887|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:50:01.7146|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/Index. 
2023-06-15 12:50:01.7146|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 26.3913ms 
2023-06-15 12:50:01.7146|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:50:01.7380|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:50:01.7380|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 167.0796ms 
2023-06-15 12:50:01.7585|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:50:01.7597|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:50:01.9996|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:50:02.0477|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:50:02.0633|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:50:02.1908|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LGUHomePage.cshtml executed in 131.2673ms. 
2023-06-15 12:50:02.1908|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder) in 435.4889ms 
2023-06-15 12:50:02.1908|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:50:02.2262|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/Index - - - 200 - text/html;+charset=utf-8 488.1294ms 
2023-06-15 12:50:02.2262|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:50:02.2312|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.2499ms 
2023-06-15 12:50:02.2312|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:50:02.2493|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 14.9051ms 
2023-06-15 12:50:07.0267|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/LogOut - - 
2023-06-15 12:50:07.0267|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:50:07.0267|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "LogOut", controller = "LGU"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LogOut() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:50:07.0267|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed out. 
2023-06-15 12:50:07.0267|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /. 
2023-06-15 12:50:07.0267|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder) in 6.3236ms 
2023-06-15 12:50:07.0267|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:50:07.0401|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/LogOut - - - 302 0 - 13.5029ms 
2023-06-15 12:50:07.0401|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:50:07.0401|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:50:07.0401|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:50:07.0401|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 12:50:07.0729|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 27.178ms. 
2023-06-15 12:50:07.0729|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 28.537ms 
2023-06-15 12:50:07.0729|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:50:07.0729|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 30.0620ms 
2023-06-15 12:50:07.0729|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:50:07.0729|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3096ms 
2023-06-15 12:50:07.0729|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:50:07.0905|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.6740ms 
2023-06-15 12:50:21.9040|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:50:21.9040|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:50:21.9221|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:50:26.0588|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (33ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:50:26.6329|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 12:50:26.6398|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000), @__p_1='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i]
WHERE [i].[UsernameEmail] = @__p_0 AND [i].[LunchGroupName] = @__p_1 AND [i].[InviteID] = 64 
2023-06-15 12:50:26.7248|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [InvitesLG] SET [LunchGroupName] = @p0, [Status] = @p1, [UsernameEmail] = @p2
OUTPUT 1
WHERE [InviteID] = @p3; 
2023-06-15 12:50:26.7325|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 12:50:26.7325|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/ViewLunchGroup?groupName=Software%20Development. 
2023-06-15 12:50:26.7325|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 4810.5092ms 
2023-06-15 12:50:26.7325|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:50:26.7325|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - - 302 0 - 4828.8717ms 
2023-06-15 12:50:26.7325|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - 
2023-06-15 12:50:26.7325|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:50:26.7325|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(System.String) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:50:26.7479|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:50:26.8989|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:50:26.9036|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t0].[RestaurantID], [t0].[EventsEventId0], [t0].[RestaurantDescription], [t0].[RestaurantName], [t0].[RestaurantsRestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime], [r].[RestaurantID], [r].[EventsEventId] AS [EventsEventId0], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
    LEFT JOIN [Restaurants] AS [r] ON [e0].[EventId] = [r].[EventsEventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[RestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:50:26.9036|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml. 
2023-06-15 12:50:26.9231|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml executed in 12.2458ms. 
2023-06-15 12:50:26.9231|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder) in 185.2529ms 
2023-06-15 12:50:26.9231|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:50:26.9231|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 190.3611ms 
2023-06-15 12:50:26.9351|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - 
2023-06-15 12:50:26.9351|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/ViewLunchGroupDetailsLGU.css was not modified 
2023-06-15 12:50:26.9351|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - - 304 - text/css 5.1907ms 
2023-06-15 12:50:26.9351|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - 
2023-06-15 12:50:26.9351|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 12:50:26.9351|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - - 304 - application/javascript 0.4719ms 
2023-06-15 12:50:26.9541|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:50:26.9541|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1806ms 
2023-06-15 12:50:26.9541|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:50:26.9625|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.7933ms 
2023-06-15 12:51:55.2445|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:51:57.0815|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (30ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:51:57.1236|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:51:57.1236|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:51:57.1236|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:51:57.1478|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:51:57.1659|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:51:57.3291|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:51:57.3291|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:51:57.3291|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:51:57.3291|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:51:57.3291|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:51:57.7937|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:51:57.8899|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:51:57.9016|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:51:57.9267|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/Index. 
2023-06-15 12:51:57.9267|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 25.5067ms 
2023-06-15 12:51:57.9267|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:51:57.9512|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:51:57.9512|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 161.7983ms 
2023-06-15 12:51:57.9782|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:51:57.9782|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:51:58.2175|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:51:58.2670|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:51:58.2829|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:51:58.4083|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LGUHomePage.cshtml executed in 129.4421ms. 
2023-06-15 12:51:58.4083|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder) in 432.812ms 
2023-06-15 12:51:58.4083|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:51:58.4463|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:51:58.4470|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/Index - - - 200 - text/html;+charset=utf-8 495.7915ms 
2023-06-15 12:51:58.4470|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.9808ms 
2023-06-15 12:51:58.4470|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:51:58.4700|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.6147ms 
2023-06-15 12:52:02.4669|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/LogOut - - 
2023-06-15 12:52:02.4669|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:52:02.4669|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "LogOut", controller = "LGU"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LogOut() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:52:02.4822|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed out. 
2023-06-15 12:52:02.4822|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /. 
2023-06-15 12:52:02.4822|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder) in 8.8207ms 
2023-06-15 12:52:02.4822|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:52:02.4822|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/LogOut - - - 302 0 - 15.7239ms 
2023-06-15 12:52:02.4822|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:52:02.4822|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:52:02.4822|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:52:02.4822|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 12:52:02.5140|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 26.6481ms. 
2023-06-15 12:52:02.5140|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 27.8676ms 
2023-06-15 12:52:02.5140|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:52:02.5140|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 29.2793ms 
2023-06-15 12:52:02.5140|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:02.5140|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3533ms 
2023-06-15 12:52:02.5296|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:52:02.5296|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.3624ms 
2023-06-15 12:52:12.1460|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 
2023-06-15 12:52:12.1460|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:52:12.1584|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:52:12.2315|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:52:12.3777|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:52:12.5169|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 12:52:12.5169|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 12:52:12.5169|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 358.6095ms 
2023-06-15 12:52:12.5169|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:52:12.5169|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 - 302 0 - 371.1462ms 
2023-06-15 12:52:12.5169|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 12:52:12.5169|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:52:12.5169|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 12:52:12.5169|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:52:12.5169|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:52:12.5245|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:52:12.5245|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 12:52:12.5245|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 11.2001ms. 
2023-06-15 12:52:12.5245|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 14.6631ms 
2023-06-15 12:52:12.5245|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 12:52:12.5245|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 17.2790ms 
2023-06-15 12:52:12.5456|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:12.5456|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:52:12.5456|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3109ms 
2023-06-15 12:52:12.5456|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.2168ms 
2023-06-15 12:52:14.9183|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/Profile - - 
2023-06-15 12:52:14.9183|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:52:14.9183|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Profile", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Profile() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:52:15.1234|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (34ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[UserId] = @__id_0 
2023-06-15 12:52:15.1234|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Profile. 
2023-06-15 12:52:15.1560|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Profile executed in 31.2765ms. 
2023-06-15 12:52:15.1560|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder) in 233.8405ms 
2023-06-15 12:52:15.1560|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:52:15.1560|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/Profile - - - 200 - text/html;+charset=utf-8 239.9541ms 
2023-06-15 12:52:15.1881|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:15.1881|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3203ms 
2023-06-15 12:52:15.1881|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:52:15.1967|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.6581ms 
2023-06-15 12:52:41.8782|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:52:41.8782|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:52:41.8848|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:52:41.8848|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:52:41.8848|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 12:52:41.9046|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__p_0='?' (Size = 4000), @__p_1='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i]
WHERE [i].[UsernameEmail] = @__p_0 AND [i].[LunchGroupName] = @__p_1 
2023-06-15 12:52:41.9941|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [InvitesLG] SET [LunchGroupName] = @p0, [Status] = @p1, [UsernameEmail] = @p2
OUTPUT 1
WHERE [InviteID] = @p3; 
2023-06-15 12:52:41.9941|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 12:52:41.9941|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/ViewLunchGroup?groupName=Software%20Development. 
2023-06-15 12:52:41.9941|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 116.2394ms 
2023-06-15 12:52:41.9941|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:52:41.9941|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - - 302 0 - 123.0518ms 
2023-06-15 12:52:41.9941|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - 
2023-06-15 12:52:41.9941|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:52:42.0088|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(System.String) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:52:42.0088|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:52:42.1615|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:52:42.1664|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t0].[RestaurantID], [t0].[EventsEventId0], [t0].[RestaurantDescription], [t0].[RestaurantName], [t0].[RestaurantsRestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime], [r].[RestaurantID], [r].[EventsEventId] AS [EventsEventId0], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
    LEFT JOIN [Restaurants] AS [r] ON [e0].[EventId] = [r].[EventsEventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[RestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:52:42.1664|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml. 
2023-06-15 12:52:42.1856|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml executed in 13.5335ms. 
2023-06-15 12:52:42.1856|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder) in 176.786ms 
2023-06-15 12:52:42.1856|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:52:42.1856|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 183.4674ms 
2023-06-15 12:52:42.1996|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - 
2023-06-15 12:52:42.1996|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:42.1996|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - 
2023-06-15 12:52:42.1996|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2531ms 
2023-06-15 12:52:42.1996|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 12:52:42.1996|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/ViewLunchGroupDetailsLGU.css was not modified 
2023-06-15 12:52:42.1996|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - - 304 - application/javascript 5.4449ms 
2023-06-15 12:52:42.1996|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - - 304 - text/css 5.6532ms 
2023-06-15 12:52:42.1996|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:52:42.2129|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.5654ms 
2023-06-15 12:52:43.8746|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/Profile - - 
2023-06-15 12:52:43.8746|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:52:43.8746|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Profile", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Profile() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:52:43.8746|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[UserId] = @__id_0 
2023-06-15 12:52:43.8746|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Profile. 
2023-06-15 12:52:43.8746|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Profile executed in 3.3796ms. 
2023-06-15 12:52:43.8746|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder) in 6.7884ms 
2023-06-15 12:52:43.8746|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:52:43.8860|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/Profile - - - 200 - text/html;+charset=utf-8 11.4402ms 
2023-06-15 12:52:43.8860|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:43.8860|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:52:43.8860|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4262ms 
2023-06-15 12:52:43.8860|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.1523ms 
2023-06-15 12:52:45.3963|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:52:45.3963|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:52:45.3963|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:52:45.3963|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:52:45.3963|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:52:45.3963|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:52:45.4015|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LGUHomePage.cshtml executed in 3.0363ms. 
2023-06-15 12:52:45.4015|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder) in 4.2783ms 
2023-06-15 12:52:45.4015|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:52:45.4015|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/Index - - - 200 - text/html;+charset=utf-8 6.3133ms 
2023-06-15 12:52:45.4015|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:45.4015|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:52:45.4015|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2771ms 
2023-06-15 12:52:45.4015|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.2186ms 
2023-06-15 12:52:47.3152|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/Profile - - 
2023-06-15 12:52:47.3152|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:52:47.3152|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Profile", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Profile() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:52:47.3152|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[UserId] = @__id_0 
2023-06-15 12:52:47.3152|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Profile. 
2023-06-15 12:52:47.3224|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Profile executed in 4.9845ms. 
2023-06-15 12:52:47.3224|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder) in 6.3193ms 
2023-06-15 12:52:47.3224|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:52:47.3224|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/Profile - - - 200 - text/html;+charset=utf-8 8.9131ms 
2023-06-15 12:52:47.3224|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:47.3224|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3517ms 
2023-06-15 12:52:47.9796|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:47.9796|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2194ms 
2023-06-15 12:52:50.1714|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/Profile - - 
2023-06-15 12:52:50.1714|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:52:50.1714|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Profile", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Profile() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:52:50.1714|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[UserId] = @__id_0 
2023-06-15 12:52:50.1714|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Profile. 
2023-06-15 12:52:50.1714|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Profile executed in 3.3439ms. 
2023-06-15 12:52:50.1714|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder) in 4.5502ms 
2023-06-15 12:52:50.1714|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:52:50.1714|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/Profile - - - 200 - text/html;+charset=utf-8 7.4275ms 
2023-06-15 12:52:50.1848|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:50.1848|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1606ms 
2023-06-15 12:52:51.5220|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:52:51.5220|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:52:51.5220|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:52:51.5220|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:52:51.5220|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:52:51.5220|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:52:51.5284|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LGUHomePage.cshtml executed in 3.6573ms. 
2023-06-15 12:52:51.5284|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder) in 5.0802ms 
2023-06-15 12:52:51.5284|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:52:51.5284|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/Index - - - 200 - text/html;+charset=utf-8 7.4182ms 
2023-06-15 12:52:51.5284|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:51.5284|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2006ms 
2023-06-15 12:52:51.5284|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:52:51.5420|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.2013ms 
2023-06-15 12:52:52.8251|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - 
2023-06-15 12:52:52.8251|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:52:52.8251|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(System.String) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:52:52.8251|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:52:52.8251|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t0].[RestaurantID], [t0].[EventsEventId0], [t0].[RestaurantDescription], [t0].[RestaurantName], [t0].[RestaurantsRestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime], [r].[RestaurantID], [r].[EventsEventId] AS [EventsEventId0], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
    LEFT JOIN [Restaurants] AS [r] ON [e0].[EventId] = [r].[EventsEventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[RestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:52:52.8251|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml. 
2023-06-15 12:52:52.8251|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml executed in 3.0101ms. 
2023-06-15 12:52:52.8251|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder) in 4.9698ms 
2023-06-15 12:52:52.8251|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:52:52.8251|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 6.8717ms 
2023-06-15 12:52:52.8387|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:52.8387|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1925ms 
2023-06-15 12:52:52.8387|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:52:52.8387|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.8269ms 
2023-06-15 12:52:55.1185|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/Profile - - 
2023-06-15 12:52:55.1185|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:52:55.1185|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Profile", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Profile() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:52:55.1185|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[UserId] = @__id_0 
2023-06-15 12:52:55.1185|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Profile. 
2023-06-15 12:52:55.1185|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Profile executed in 3.2118ms. 
2023-06-15 12:52:55.1185|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder) in 4.5451ms 
2023-06-15 12:52:55.1185|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:52:55.1185|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/Profile - - - 200 - text/html;+charset=utf-8 7.4390ms 
2023-06-15 12:52:55.1185|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:55.1185|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:52:55.1185|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3971ms 
2023-06-15 12:52:55.1375|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.3739ms 
2023-06-15 12:52:55.7677|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:52:55.7677|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:52:55.7677|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:52:55.7677|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:52:55.7677|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:52:55.7677|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:52:55.7677|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LGUHomePage.cshtml executed in 2.7047ms. 
2023-06-15 12:52:55.7677|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder) in 4.7919ms 
2023-06-15 12:52:55.7677|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:52:55.7746|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/Index - - - 200 - text/html;+charset=utf-8 6.8932ms 
2023-06-15 12:52:55.7746|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:55.7746|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:52:55.7746|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3076ms 
2023-06-15 12:52:55.7746|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.8045ms 
2023-06-15 12:52:56.6857|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/Profile - - 
2023-06-15 12:52:56.6857|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:52:56.6857|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Profile", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Profile() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:52:56.6857|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[UserId] = @__id_0 
2023-06-15 12:52:56.6857|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Profile. 
2023-06-15 12:52:56.6857|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Profile executed in 3.3326ms. 
2023-06-15 12:52:56.6857|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder) in 4.9747ms 
2023-06-15 12:52:56.6857|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:52:56.6857|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/Profile - - - 200 - text/html;+charset=utf-8 7.7800ms 
2023-06-15 12:52:56.7000|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:52:56.7000|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:56.7000|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3605ms 
2023-06-15 12:52:56.7000|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.0257ms 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/LogOut - - 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "LogOut", controller = "LGU"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LogOut() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed out. 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /. 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder) in 0.4356ms 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/LogOut - - - 302 0 - 1.7606ms 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 2.597ms. 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 3.0983ms 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:52:57.3436|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 4.3717ms 
2023-06-15 12:52:57.3599|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:52:57.3599|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1444ms 
2023-06-15 12:52:57.3599|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:52:57.3687|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.1694ms 
2023-06-15 12:54:40.6317|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:54:42.4676|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (29ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:54:42.5074|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:54:42.5098|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:54:42.5098|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:54:42.5318|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:54:42.5501|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:54:42.7101|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:54:42.7101|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:54:42.7101|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:54:42.7122|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:54:42.7122|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:54:43.4188|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:54:43.5039|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:54:43.5157|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:54:43.5262|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 12:54:43.6838|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 158.9941ms. 
2023-06-15 12:54:43.6838|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 172.6593ms 
2023-06-15 12:54:43.6838|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:54:43.7279|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:54:43.7314|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 315.1707ms 
2023-06-15 12:54:43.7314|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.0988ms 
2023-06-15 12:54:43.7314|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:54:43.7573|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 18.3087ms 
2023-06-15 12:55:53.9570|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 12:55:55.7746|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:55:55.8158|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:55:55.8158|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 12:55:55.8158|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 12:55:55.8397|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 12:55:55.8571|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 12:55:56.0164|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 12:55:56.0164|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 12:55:56.0164|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 12:55:56.0164|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 12:55:56.0164|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 12:55:56.6609|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:55:56.7465|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:55:56.7465|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:55:56.7688|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 12:55:56.9295|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 162.29ms. 
2023-06-15 12:55:56.9349|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 177.5056ms 
2023-06-15 12:55:56.9349|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:55:56.9730|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:55:56.9730|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.7405ms 
2023-06-15 12:55:56.9730|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 320.0250ms 
2023-06-15 12:55:56.9867|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:55:57.0033|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 16.6096ms 
2023-06-15 12:56:02.9778|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:56:02.9778|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:56:02.9969|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:56:03.4329|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (33ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:56:03.4736|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 12:56:03.4883|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__p_0='?' (Size = 4000), @__p_1='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i]
WHERE [i].[UsernameEmail] = @__p_0 AND [i].[LunchGroupName] = @__p_1 
2023-06-15 12:56:03.6484|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000), @p4='?' (DbType = Int32), @p5='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [InvitesLG] SET [LunchGroupName] = @p0, [Status] = @p1, [UsernameEmail] = @p2
OUTPUT 1
WHERE [InviteID] = @p3;
INSERT INTO [LunchGroupUser] ([LunchGroupsGroupId], [UsersUserId])
VALUES (@p4, @p5); 
2023-06-15 12:56:03.6706|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 12:56:03.6706|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/ViewLunchGroup?groupName=Software%20Development. 
2023-06-15 12:56:03.6706|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 676.5035ms 
2023-06-15 12:56:03.6706|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:56:03.6706|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - 
2023-06-15 12:56:03.6817|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - - 302 0 - 703.8759ms 
2023-06-15 12:56:03.6817|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:56:03.6817|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(System.String) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:56:03.7354|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:56:03.8809|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 12:56:03.8932|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t0].[RestaurantID], [t0].[EventsEventId0], [t0].[RestaurantDescription], [t0].[RestaurantName], [t0].[RestaurantsRestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime], [r].[RestaurantID], [r].[EventsEventId] AS [EventsEventId0], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
    LEFT JOIN [Restaurants] AS [r] ON [e0].[EventId] = [r].[EventsEventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[RestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 12:56:03.9025|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml. 
2023-06-15 12:56:03.9269|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml executed in 24.7723ms. 
2023-06-15 12:56:03.9269|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder) in 241.5726ms 
2023-06-15 12:56:03.9269|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 12:56:03.9269|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 251.3205ms 
2023-06-15 12:56:03.9406|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - 
2023-06-15 12:56:03.9406|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:56:03.9406|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - 
2023-06-15 12:56:03.9406|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.4277ms 
2023-06-15 12:56:03.9469|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/ViewLunchGroupDetailsLGU.css was not modified 
2023-06-15 12:56:03.9469|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 12:56:03.9469|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - - 304 - application/javascript 6.4523ms 
2023-06-15 12:56:03.9469|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - - 304 - text/css 6.7237ms 
2023-06-15 12:56:03.9469|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:56:03.9469|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.1863ms 
2023-06-15 12:56:12.7877|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/Index - - 
2023-06-15 12:56:12.7900|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:56:12.7900|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:56:12.7900|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:56:12.8128|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:56:12.8128|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/LGUHomePage.cshtml. 
2023-06-15 12:56:12.8238|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/LGUHomePage.cshtml executed in 10.735ms. 
2023-06-15 12:56:12.8238|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder) in 32.9327ms 
2023-06-15 12:56:12.8238|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.Index (Lunch Tinder)' 
2023-06-15 12:56:12.8238|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/Index - - - 200 - text/html;+charset=utf-8 37.3423ms 
2023-06-15 12:56:12.8238|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:56:12.8238|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2326ms 
2023-06-15 12:56:12.8238|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:56:12.8386|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.2048ms 
2023-06-15 12:56:14.2278|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/Profile - - 
2023-06-15 12:56:14.2314|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:56:14.2314|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Profile", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Profile() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:56:14.2314|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[UserId] = @__id_0 
2023-06-15 12:56:14.2314|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Profile. 
2023-06-15 12:56:14.2675|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Profile executed in 31.1039ms. 
2023-06-15 12:56:14.2675|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder) in 35.3913ms 
2023-06-15 12:56:14.2675|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Profile (Lunch Tinder)' 
2023-06-15 12:56:14.2675|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/Profile - - - 200 - text/html;+charset=utf-8 41.3582ms 
2023-06-15 12:56:14.2754|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:56:14.2754|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:56:14.2754|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3074ms 
2023-06-15 12:56:14.2754|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.8051ms 
2023-06-15 12:56:15.9140|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/LogOut - - 
2023-06-15 12:56:15.9140|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "LogOut", controller = "LGU"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LogOut() on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed out. 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /. 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder) in 3.3868ms 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.LogOut (Lunch Tinder)' 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/LogOut - - - 302 0 - 6.8654ms 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 2.922ms. 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 3.4517ms 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 12:56:15.9172|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 5.0175ms 
2023-06-15 12:56:15.9350|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:56:15.9350|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2112ms 
2023-06-15 12:56:15.9350|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:56:15.9350|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.9119ms 
2023-06-15 12:56:19.6030|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 12:56:19.6030|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:56:19.6030|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 12:56:19.6030|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 12:56:19.6030|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 12:56:19.6030|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@__p_0='?' (Size = 4000), @__p_1='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i]
WHERE [i].[UsernameEmail] = @__p_0 AND [i].[LunchGroupName] = @__p_1 
2023-06-15 12:56:19.6030|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000), @p4='?' (DbType = Int32), @p5='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [InvitesLG] SET [LunchGroupName] = @p0, [Status] = @p1, [UsernameEmail] = @p2
OUTPUT 1
WHERE [InviteID] = @p3;
INSERT INTO [LunchGroupUser] ([LunchGroupsGroupId], [UsersUserId])
VALUES (@p4, @p5); 
2023-06-15 12:56:19.6759|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:56:19.6759|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:56:19.6759|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:56:19.6837|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[EventsEventId], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
FROM [Restaurants] AS [r] 
2023-06-15 12:56:19.6837|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-06-15 12:56:19.6837|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-06-15 12:56:19.6837|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-06-15 12:56:19.7597|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:56:19.7597|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:56:19.7597|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:56:19.7597|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[EventsEventId], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
FROM [Restaurants] AS [r] 
2023-06-15 12:56:19.7597|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-06-15 12:56:19.7597|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-06-15 12:56:19.7597|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-06-15 12:56:19.7764|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:56:19.7764|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:56:19.7764|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:56:19.7764|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[EventsEventId], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
FROM [Restaurants] AS [r] 
2023-06-15 12:56:19.7764|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-06-15 12:56:19.7764|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-06-15 12:56:19.7764|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-06-15 12:56:19.6446|ERROR|Microsoft.EntityFrameworkCore.Update|An exception occurred in the database while saving changes for context type 'Lunch_Tinder.Data.LunchTinderContext'.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Microsoft.Data.SqlClient.SqlException (0x80131904): Violation of PRIMARY KEY constraint 'PK_LunchGroupUser'. Cannot insert duplicate key in object 'dbo.LunchGroupUser'. The duplicate key value is (1, 1).
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreResults(Boolean& moreResults)
   at Microsoft.Data.SqlClient.SqlDataReader.TryNextResult(Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.NextResult()
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)
ClientConnectionId:4aee691d-4d17-40c3-88a8-e7b0f8851119
Error Number:2627,State:1,Class:14
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(StateManager stateManager, Boolean acceptAllChangesOnSuccess)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess) {"Type":"Microsoft.EntityFrameworkCore.DbUpdateException", "Entries":[{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":[], "Events":[]}]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC", "UserType":"ADMIN", "LunchGroups":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":[]}], "Events":[]}], "Events":[{"EventId":1, "Name":"Locke Burger", "Description":"Great Burgers", "StartTime":"2023-06-14T13:56:54.4279214Z", "EndTime":"2023-06-14T14:01:54.4279215Z"}], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":3, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":4, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":5, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":6, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":7, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":8, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":9, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":10, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":11, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":12, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":13, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":14, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":15, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":16, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":17, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":18, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":19, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":20, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":21, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":22, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":23, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":24, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":26, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":27, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":28, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":29, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":30, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":31, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":32, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":33, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":34, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":35, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":36, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":37, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":38, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":39, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":40, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":41, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":42, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":43, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":44, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":45, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":46, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":47, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":48, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":49, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":50, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":51, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":52, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":53, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":54, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":55, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":56, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":57, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":58, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":59, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":60, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":61, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":62, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":63, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":64, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":65, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 1} Unchanged\r\n  EventId: 1 PK\r\n  Description: 'Great Burgers'\r\n  EndTime: '14/06/2023 14:01:54'\r\n  Name: 'Locke Burger'\r\n  StartTime: '14/06/2023 13:56:54'\r\n  RestaurantOptions: <null>\r\n  Votes: <null>\r\n  LunchGroups: <null>\r\nInviteToLunchGroup {InviteID: 1} Modified\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development' Modified\r\n  Status: 'Accepted' Modified\r\n  UsernameEmail: 'useremail@gmail.com' Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\n  InviteID: 3 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\n  InviteID: 4 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\n  InviteID: 5 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\n  InviteID: 6 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\n  InviteID: 7 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\n  InviteID: 8 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\n  InviteID: 9 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\n  InviteID: 10 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\n  InviteID: 11 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\n  InviteID: 12 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\n  InviteID: 13 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\n  InviteID: 14 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\n  InviteID: 15 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\n  InviteID: 16 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\n  InviteID: 17 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\n  InviteID: 18 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\n  InviteID: 19 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\n  InviteID: 20 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\n  InviteID: 21 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\n  InviteID: 22 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\n  InviteID: 23 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\n  InviteID: 24 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\n  InviteID: 26 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\n  InviteID: 27 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\n  InviteID: 28 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\n  InviteID: 29 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\n  InviteID: 30 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\n  InviteID: 31 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\n  InviteID: 32 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\n  InviteID: 33 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\n  InviteID: 34 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\n  InviteID: 35 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\n  InviteID: 36 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\n  InviteID: 37 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\n  InviteID: 38 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\n  InviteID: 39 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\n  InviteID: 40 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\n  InviteID: 41 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\n  InviteID: 42 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\n  InviteID: 43 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\n  InviteID: 44 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\n  InviteID: 45 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\n  InviteID: 46 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\n  InviteID: 47 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\n  InviteID: 48 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\n  InviteID: 49 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\n  InviteID: 50 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\n  InviteID: 51 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\n  InviteID: 52 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\n  InviteID: 53 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\n  InviteID: 54 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\n  InviteID: 55 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\n  InviteID: 56 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\n  InviteID: 57 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\n  InviteID: 58 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\n  InviteID: 59 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\n  InviteID: 60 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\n  InviteID: 61 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\n  InviteID: 62 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\n  InviteID: 63 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\n  InviteID: 64 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Accepted'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\n  InviteID: 65 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We codessss'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 1}]\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: <null>\r\n  LunchGroups: [{GroupId: 1}]\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: <null>\r\n  LunchGroups: []\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK\r\n", "ShortView":"Event {EventId: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 1} Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34", "Lease":0}}, "Metadata":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "Indexes":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: LunchGroup.GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "DebugView":{"LongView":"GroupId PK", "ShortView":"GroupId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    Description (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    GroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroups\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    Description (string) Required\r\n    GroupName (string) Required\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: LunchGroup", "TargetEntityType":"EntityType: User", "Inverse":"SkipNavigation: User.LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"Users", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "Indexes":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: LunchGroup.GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "DebugView":{"LongView":"GroupId PK", "ShortView":"GroupId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    Description (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    GroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroups\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    Description (string) Required\r\n    GroupName (string) Required\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: LunchGroup", "TargetEntityType":"EntityType: User", "Inverse":"SkipNavigation: User.LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"Users", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC", "UserType":"ADMIN", "LunchGroups":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":1, "Name":"Locke Burger", "Description":"Great Burgers", "StartTime":"2023-06-14T13:56:54.4279214Z", "EndTime":"2023-06-14T14:01:54.4279215Z"}], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":3, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":4, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":5, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":6, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":7, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":8, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":9, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":10, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":11, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":12, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":13, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":14, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":15, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":16, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":17, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":18, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":19, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":20, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":21, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":22, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":23, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":24, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":26, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":27, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":28, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":29, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":30, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":31, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":32, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":33, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":34, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":35, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":36, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":37, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":38, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":39, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":40, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":41, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":42, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":43, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":44, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":45, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":46, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":47, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":48, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":49, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":50, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":51, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":52, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":53, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":54, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":55, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":56, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":57, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":58, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":59, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":60, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":61, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":62, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":63, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":64, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":65, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 1} Unchanged\r\n  EventId: 1 PK\r\n  Description: 'Great Burgers'\r\n  EndTime: '14/06/2023 14:01:54'\r\n  Name: 'Locke Burger'\r\n  StartTime: '14/06/2023 13:56:54'\r\n  RestaurantOptions: <null>\r\n  Votes: <null>\r\n  LunchGroups: <null>\r\nInviteToLunchGroup {InviteID: 1} Modified\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development' Modified\r\n  Status: 'Accepted' Modified\r\n  UsernameEmail: 'useremail@gmail.com' Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\n  InviteID: 3 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\n  InviteID: 4 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\n  InviteID: 5 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\n  InviteID: 6 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\n  InviteID: 7 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\n  InviteID: 8 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\n  InviteID: 9 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\n  InviteID: 10 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\n  InviteID: 11 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\n  InviteID: 12 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\n  InviteID: 13 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\n  InviteID: 14 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\n  InviteID: 15 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\n  InviteID: 16 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\n  InviteID: 17 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\n  InviteID: 18 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\n  InviteID: 19 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\n  InviteID: 20 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\n  InviteID: 21 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\n  InviteID: 22 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\n  InviteID: 23 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\n  InviteID: 24 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\n  InviteID: 26 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\n  InviteID: 27 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\n  InviteID: 28 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\n  InviteID: 29 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\n  InviteID: 30 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\n  InviteID: 31 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\n  InviteID: 32 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\n  InviteID: 33 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\n  InviteID: 34 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\n  InviteID: 35 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\n  InviteID: 36 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\n  InviteID: 37 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\n  InviteID: 38 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\n  InviteID: 39 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\n  InviteID: 40 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\n  InviteID: 41 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\n  InviteID: 42 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\n  InviteID: 43 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\n  InviteID: 44 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\n  InviteID: 45 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\n  InviteID: 46 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\n  InviteID: 47 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\n  InviteID: 48 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\n  InviteID: 49 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\n  InviteID: 50 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\n  InviteID: 51 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\n  InviteID: 52 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\n  InviteID: 53 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\n  InviteID: 54 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\n  InviteID: 55 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\n  InviteID: 56 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\n  InviteID: 57 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\n  InviteID: 58 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\n  InviteID: 59 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\n  InviteID: 60 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\n  InviteID: 61 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\n  InviteID: 62 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\n  InviteID: 63 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\n  InviteID: 64 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Accepted'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\n  InviteID: 65 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We codessss'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 1}]\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: <null>\r\n  LunchGroups: [{GroupId: 1}]\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: <null>\r\n  LunchGroups: []\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK\r\n", "ShortView":"Event {EventId: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 1} Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34", "Lease":0}}, "Metadata":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: User.UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade"], "DebugView":{"LongView":"UserId PK", "ShortView":"UserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    EmailAddress (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Password (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserType (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: Users\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    EmailAddress (string) Required\r\n    Password (string) Required\r\n    UserName (string) Required\r\n    UserType (string) Required\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: User", "TargetEntityType":"EntityType: LunchGroup", "Inverse":"SkipNavigation: LunchGroup.Users (ICollection<User>) CollectionUser Inverse: LunchGroups", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroups", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"}, "IsReadOnly":false}], "Indexes":[{"Properties":[], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"UsersUserId", "ShortView":"UsersUserId"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: User.UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade"], "DebugView":{"LongView":"UserId PK", "ShortView":"UserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    EmailAddress (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Password (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserType (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: Users\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    EmailAddress (string) Required\r\n    Password (string) Required\r\n    UserName (string) Required\r\n    UserType (string) Required\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: User", "TargetEntityType":"EntityType: LunchGroup", "Inverse":"SkipNavigation: LunchGroup.Users (ICollection<User>) CollectionUser Inverse: LunchGroups", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroups", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"}, "IsReadOnly":false}], "Indexes":[{"Properties":[], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"UsersUserId", "ShortView":"UsersUserId"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC", "UserType":"ADMIN", "LunchGroups":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":1, "Name":"Locke Burger", "Description":"Great Burgers", "StartTime":"2023-06-14T13:56:54.4279214Z", "EndTime":"2023-06-14T14:01:54.4279215Z"}], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":3, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":4, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":5, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":6, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":7, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":8, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":9, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":10, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":11, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":12, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":13, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":14, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":15, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":16, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":17, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":18, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":19, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":20, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":21, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":22, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":23, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":24, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":26, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":27, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":28, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":29, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":30, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":31, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":32, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":33, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":34, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":35, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":36, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":37, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":38, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":39, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":40, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":41, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":42, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":43, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":44, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":45, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":46, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":47, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":48, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":49, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":50, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":51, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":52, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":53, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":54, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":55, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":56, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":57, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":58, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":59, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":60, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":61, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":62, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":63, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":64, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":65, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 1} Unchanged\r\n  EventId: 1 PK\r\n  Description: 'Great Burgers'\r\n  EndTime: '14/06/2023 14:01:54'\r\n  Name: 'Locke Burger'\r\n  StartTime: '14/06/2023 13:56:54'\r\n  RestaurantOptions: <null>\r\n  Votes: <null>\r\n  LunchGroups: <null>\r\nInviteToLunchGroup {InviteID: 1} Modified\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development' Modified\r\n  Status: 'Accepted' Modified\r\n  UsernameEmail: 'useremail@gmail.com' Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\n  InviteID: 3 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\n  InviteID: 4 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\n  InviteID: 5 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\n  InviteID: 6 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\n  InviteID: 7 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\n  InviteID: 8 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\n  InviteID: 9 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\n  InviteID: 10 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\n  InviteID: 11 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\n  InviteID: 12 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\n  InviteID: 13 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\n  InviteID: 14 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\n  InviteID: 15 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\n  InviteID: 16 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\n  InviteID: 17 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\n  InviteID: 18 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\n  InviteID: 19 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\n  InviteID: 20 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\n  InviteID: 21 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\n  InviteID: 22 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\n  InviteID: 23 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\n  InviteID: 24 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\n  InviteID: 26 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\n  InviteID: 27 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\n  InviteID: 28 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\n  InviteID: 29 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\n  InviteID: 30 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\n  InviteID: 31 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\n  InviteID: 32 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\n  InviteID: 33 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\n  InviteID: 34 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\n  InviteID: 35 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\n  InviteID: 36 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\n  InviteID: 37 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\n  InviteID: 38 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\n  InviteID: 39 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\n  InviteID: 40 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\n  InviteID: 41 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\n  InviteID: 42 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\n  InviteID: 43 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\n  InviteID: 44 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\n  InviteID: 45 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\n  InviteID: 46 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\n  InviteID: 47 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\n  InviteID: 48 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\n  InviteID: 49 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\n  InviteID: 50 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\n  InviteID: 51 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\n  InviteID: 52 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\n  InviteID: 53 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\n  InviteID: 54 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\n  InviteID: 55 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\n  InviteID: 56 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\n  InviteID: 57 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\n  InviteID: 58 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\n  InviteID: 59 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\n  InviteID: 60 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\n  InviteID: 61 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\n  InviteID: 62 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\n  InviteID: 63 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\n  InviteID: 64 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Accepted'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\n  InviteID: 65 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We codessss'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 1}]\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: <null>\r\n  LunchGroups: [{GroupId: 1}]\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: <null>\r\n  LunchGroups: []\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK\r\n", "ShortView":"Event {EventId: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 1} Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34", "Lease":0}}, "Metadata":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "IsReadOnly":false}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "CurrentValue":1}], "IsKeySet":true}], "Message":"An error occurred while saving the entity changes. See the inner exception for details.", "Source":"Microsoft.EntityFrameworkCore.Relational", "HResult":-2146233088, "StackTrace":"   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(StateManager stateManager, Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)"}
2023-06-15 12:56:19.9278|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 323.6575ms 
2023-06-15 12:56:19.9278|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 12:56:19.9278|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:56:19.9278|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:56:19.9278|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:56:19.9278|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[EventsEventId], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
FROM [Restaurants] AS [r] 
2023-06-15 12:56:19.9278|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[EventsEventId], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
FROM [Restaurants] AS [r] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[EventsEventId], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
FROM [Restaurants] AS [r] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-06-15 12:56:19.9304|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-06-15 12:56:19.9278|ERROR|Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware|An unhandled exception has occurred while executing the request. {"Type":"Microsoft.EntityFrameworkCore.DbUpdateException", "Entries":[{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":[], "Events":[]}]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC", "UserType":"ADMIN", "LunchGroups":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":[]}], "Events":[]}], "Events":[{"EventId":1, "Name":"Locke Burger", "Description":"Great Burgers", "StartTime":"2023-06-14T13:56:54.4279214Z", "EndTime":"2023-06-14T14:01:54.4279215Z"}], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":3, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":4, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":5, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":6, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":7, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":8, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":9, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":10, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":11, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":12, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":13, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":14, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":15, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":16, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":17, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":18, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":19, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":20, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":21, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":22, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":23, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":24, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":26, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":27, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":28, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":29, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":30, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":31, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":32, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":33, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":34, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":35, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":36, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":37, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":38, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":39, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":40, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":41, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":42, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":43, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":44, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":45, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":46, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":47, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":48, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":49, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":50, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":51, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":52, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":53, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":54, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":55, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":56, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":57, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":58, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":59, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":60, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":61, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":62, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":63, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":64, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":65, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 1} Unchanged\r\n  EventId: 1 PK\r\n  Description: 'Great Burgers'\r\n  EndTime: '14/06/2023 14:01:54'\r\n  Name: 'Locke Burger'\r\n  StartTime: '14/06/2023 13:56:54'\r\n  RestaurantOptions: <null>\r\n  Votes: <null>\r\n  LunchGroups: <null>\r\nInviteToLunchGroup {InviteID: 1} Modified\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development' Modified\r\n  Status: 'Accepted' Modified\r\n  UsernameEmail: 'useremail@gmail.com' Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\n  InviteID: 3 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\n  InviteID: 4 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\n  InviteID: 5 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\n  InviteID: 6 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\n  InviteID: 7 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\n  InviteID: 8 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\n  InviteID: 9 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\n  InviteID: 10 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\n  InviteID: 11 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\n  InviteID: 12 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\n  InviteID: 13 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\n  InviteID: 14 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\n  InviteID: 15 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\n  InviteID: 16 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\n  InviteID: 17 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\n  InviteID: 18 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\n  InviteID: 19 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\n  InviteID: 20 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\n  InviteID: 21 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\n  InviteID: 22 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\n  InviteID: 23 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\n  InviteID: 24 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\n  InviteID: 26 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\n  InviteID: 27 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\n  InviteID: 28 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\n  InviteID: 29 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\n  InviteID: 30 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\n  InviteID: 31 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\n  InviteID: 32 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\n  InviteID: 33 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\n  InviteID: 34 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\n  InviteID: 35 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\n  InviteID: 36 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\n  InviteID: 37 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\n  InviteID: 38 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\n  InviteID: 39 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\n  InviteID: 40 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\n  InviteID: 41 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\n  InviteID: 42 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\n  InviteID: 43 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\n  InviteID: 44 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\n  InviteID: 45 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\n  InviteID: 46 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\n  InviteID: 47 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\n  InviteID: 48 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\n  InviteID: 49 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\n  InviteID: 50 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\n  InviteID: 51 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\n  InviteID: 52 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\n  InviteID: 53 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\n  InviteID: 54 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\n  InviteID: 55 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\n  InviteID: 56 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\n  InviteID: 57 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\n  InviteID: 58 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\n  InviteID: 59 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\n  InviteID: 60 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\n  InviteID: 61 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\n  InviteID: 62 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\n  InviteID: 63 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\n  InviteID: 64 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Accepted'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\n  InviteID: 65 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We codessss'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 1}]\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: <null>\r\n  LunchGroups: [{GroupId: 1}]\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: <null>\r\n  LunchGroups: []\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK\r\n", "ShortView":"Event {EventId: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 1} Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34", "Lease":0}}, "Metadata":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "Indexes":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: LunchGroup.GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "DebugView":{"LongView":"GroupId PK", "ShortView":"GroupId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    Description (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    GroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroups\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    Description (string) Required\r\n    GroupName (string) Required\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: LunchGroup", "TargetEntityType":"EntityType: User", "Inverse":"SkipNavigation: User.LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"Users", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "Indexes":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: LunchGroup.GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "DebugView":{"LongView":"GroupId PK", "ShortView":"GroupId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    Description (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    GroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroups\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    Description (string) Required\r\n    GroupName (string) Required\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: LunchGroup", "TargetEntityType":"EntityType: User", "Inverse":"SkipNavigation: User.LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"Users", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC", "UserType":"ADMIN", "LunchGroups":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":1, "Name":"Locke Burger", "Description":"Great Burgers", "StartTime":"2023-06-14T13:56:54.4279214Z", "EndTime":"2023-06-14T14:01:54.4279215Z"}], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":3, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":4, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":5, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":6, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":7, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":8, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":9, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":10, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":11, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":12, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":13, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":14, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":15, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":16, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":17, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":18, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":19, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":20, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":21, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":22, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":23, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":24, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":26, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":27, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":28, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":29, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":30, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":31, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":32, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":33, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":34, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":35, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":36, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":37, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":38, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":39, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":40, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":41, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":42, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":43, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":44, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":45, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":46, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":47, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":48, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":49, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":50, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":51, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":52, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":53, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":54, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":55, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":56, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":57, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":58, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":59, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":60, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":61, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":62, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":63, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":64, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":65, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 1} Unchanged\r\n  EventId: 1 PK\r\n  Description: 'Great Burgers'\r\n  EndTime: '14/06/2023 14:01:54'\r\n  Name: 'Locke Burger'\r\n  StartTime: '14/06/2023 13:56:54'\r\n  RestaurantOptions: <null>\r\n  Votes: <null>\r\n  LunchGroups: <null>\r\nInviteToLunchGroup {InviteID: 1} Modified\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development' Modified\r\n  Status: 'Accepted' Modified\r\n  UsernameEmail: 'useremail@gmail.com' Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\n  InviteID: 3 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\n  InviteID: 4 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\n  InviteID: 5 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\n  InviteID: 6 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\n  InviteID: 7 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\n  InviteID: 8 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\n  InviteID: 9 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\n  InviteID: 10 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\n  InviteID: 11 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\n  InviteID: 12 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\n  InviteID: 13 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\n  InviteID: 14 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\n  InviteID: 15 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\n  InviteID: 16 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\n  InviteID: 17 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\n  InviteID: 18 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\n  InviteID: 19 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\n  InviteID: 20 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\n  InviteID: 21 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\n  InviteID: 22 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\n  InviteID: 23 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\n  InviteID: 24 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\n  InviteID: 26 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\n  InviteID: 27 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\n  InviteID: 28 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\n  InviteID: 29 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\n  InviteID: 30 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\n  InviteID: 31 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\n  InviteID: 32 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\n  InviteID: 33 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\n  InviteID: 34 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\n  InviteID: 35 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\n  InviteID: 36 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\n  InviteID: 37 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\n  InviteID: 38 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\n  InviteID: 39 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\n  InviteID: 40 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\n  InviteID: 41 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\n  InviteID: 42 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\n  InviteID: 43 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\n  InviteID: 44 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\n  InviteID: 45 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\n  InviteID: 46 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\n  InviteID: 47 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\n  InviteID: 48 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\n  InviteID: 49 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\n  InviteID: 50 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\n  InviteID: 51 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\n  InviteID: 52 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\n  InviteID: 53 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\n  InviteID: 54 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\n  InviteID: 55 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\n  InviteID: 56 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\n  InviteID: 57 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\n  InviteID: 58 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\n  InviteID: 59 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\n  InviteID: 60 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\n  InviteID: 61 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\n  InviteID: 62 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\n  InviteID: 63 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\n  InviteID: 64 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Accepted'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\n  InviteID: 65 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We codessss'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 1}]\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: <null>\r\n  LunchGroups: [{GroupId: 1}]\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: <null>\r\n  LunchGroups: []\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK\r\n", "ShortView":"Event {EventId: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 1} Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34", "Lease":0}}, "Metadata":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: User.UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade"], "DebugView":{"LongView":"UserId PK", "ShortView":"UserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    EmailAddress (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Password (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserType (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: Users\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    EmailAddress (string) Required\r\n    Password (string) Required\r\n    UserName (string) Required\r\n    UserType (string) Required\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: User", "TargetEntityType":"EntityType: LunchGroup", "Inverse":"SkipNavigation: LunchGroup.Users (ICollection<User>) CollectionUser Inverse: LunchGroups", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroups", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"}, "IsReadOnly":false}], "Indexes":[{"Properties":[], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"UsersUserId", "ShortView":"UsersUserId"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: User.UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade"], "DebugView":{"LongView":"UserId PK", "ShortView":"UserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    EmailAddress (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Password (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserType (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: Users\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    EmailAddress (string) Required\r\n    Password (string) Required\r\n    UserName (string) Required\r\n    UserType (string) Required\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: User", "TargetEntityType":"EntityType: LunchGroup", "Inverse":"SkipNavigation: LunchGroup.Users (ICollection<User>) CollectionUser Inverse: LunchGroups", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroups", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"}, "IsReadOnly":false}], "Indexes":[{"Properties":[], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"UsersUserId", "ShortView":"UsersUserId"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC", "UserType":"ADMIN", "LunchGroups":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":1, "Name":"Locke Burger", "Description":"Great Burgers", "StartTime":"2023-06-14T13:56:54.4279214Z", "EndTime":"2023-06-14T14:01:54.4279215Z"}], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":3, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":4, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":5, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":6, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":7, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":8, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":9, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":10, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":11, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":12, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":13, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":14, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":15, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":16, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":17, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":18, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":19, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":20, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":21, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":22, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":23, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":24, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":26, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":27, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":28, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":29, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":30, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":31, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":32, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":33, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":34, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":35, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":36, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":37, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":38, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":39, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":40, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":41, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":42, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":43, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":44, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":45, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":46, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":47, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":48, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":49, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":50, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":51, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":52, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":53, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":54, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":55, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":56, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":57, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":58, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":59, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":60, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":61, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":62, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":63, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":64, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":65, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 1} Unchanged\r\n  EventId: 1 PK\r\n  Description: 'Great Burgers'\r\n  EndTime: '14/06/2023 14:01:54'\r\n  Name: 'Locke Burger'\r\n  StartTime: '14/06/2023 13:56:54'\r\n  RestaurantOptions: <null>\r\n  Votes: <null>\r\n  LunchGroups: <null>\r\nInviteToLunchGroup {InviteID: 1} Modified\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development' Modified\r\n  Status: 'Accepted' Modified\r\n  UsernameEmail: 'useremail@gmail.com' Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\n  InviteID: 3 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\n  InviteID: 4 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\n  InviteID: 5 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\n  InviteID: 6 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\n  InviteID: 7 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\n  InviteID: 8 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\n  InviteID: 9 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\n  InviteID: 10 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\n  InviteID: 11 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\n  InviteID: 12 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\n  InviteID: 13 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\n  InviteID: 14 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\n  InviteID: 15 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\n  InviteID: 16 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\n  InviteID: 17 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\n  InviteID: 18 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\n  InviteID: 19 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\n  InviteID: 20 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\n  InviteID: 21 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\n  InviteID: 22 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\n  InviteID: 23 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\n  InviteID: 24 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\n  InviteID: 26 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\n  InviteID: 27 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\n  InviteID: 28 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\n  InviteID: 29 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\n  InviteID: 30 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\n  InviteID: 31 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\n  InviteID: 32 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\n  InviteID: 33 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\n  InviteID: 34 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\n  InviteID: 35 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\n  InviteID: 36 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\n  InviteID: 37 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\n  InviteID: 38 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\n  InviteID: 39 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\n  InviteID: 40 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\n  InviteID: 41 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\n  InviteID: 42 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\n  InviteID: 43 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\n  InviteID: 44 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\n  InviteID: 45 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\n  InviteID: 46 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\n  InviteID: 47 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\n  InviteID: 48 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\n  InviteID: 49 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\n  InviteID: 50 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\n  InviteID: 51 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\n  InviteID: 52 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\n  InviteID: 53 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\n  InviteID: 54 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\n  InviteID: 55 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\n  InviteID: 56 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\n  InviteID: 57 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\n  InviteID: 58 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\n  InviteID: 59 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\n  InviteID: 60 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\n  InviteID: 61 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\n  InviteID: 62 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\n  InviteID: 63 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\n  InviteID: 64 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Accepted'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\n  InviteID: 65 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We codessss'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 1}]\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: <null>\r\n  LunchGroups: [{GroupId: 1}]\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: <null>\r\n  LunchGroups: []\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK\r\n", "ShortView":"Event {EventId: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 1} Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34", "Lease":0}}, "Metadata":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"bd69f4a9-8c0f-462b-a3eb-ab2578f7ba34:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "CurrentValue":1}], "IsKeySet":true}], "Message":"An error occurred while saving the entity changes. See the inner exception for details.", "Source":"Microsoft.EntityFrameworkCore.Relational", "HResult":-2146233088, "StackTrace":"   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(StateManager stateManager, Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite(String email, String lunchgroup) in C:\\Users\\ewalsh\\source\\repos\\Lunch Tinder\\Lunch Tinder\\Lunch Tinder\\Controllers\\UserController.cs:line 391\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|25_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)"}
2023-06-15 12:56:19.9989|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - - 500 - text/html;+charset=utf-8 395.9430ms 
2023-06-15 12:56:19.9989|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 12:56:19.9989|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 12:56:19.9989|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3033ms 
2023-06-15 12:56:19.9989|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.7270ms 
2023-06-15 13:03:42.2537|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 13:03:44.1044|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 13:03:44.1437|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 13:03:44.1437|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 13:03:44.1437|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 13:03:44.1686|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 13:03:44.1861|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 13:03:44.3970|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 13:03:44.3970|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 13:03:44.3970|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 13:03:44.3970|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 13:03:44.3970|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 13:03:45.0159|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 13:03:45.0983|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 13:03:45.1087|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 13:03:45.1087|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 13:03:45.2821|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 163.8586ms. 
2023-06-15 13:03:45.2821|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 178.2623ms 
2023-06-15 13:03:45.2821|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 13:03:45.3253|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 13:03:45.3253|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 315.3443ms 
2023-06-15 13:03:45.3253|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 3.9665ms 
2023-06-15 13:03:45.3393|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 13:03:45.3554|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 16.0666ms 
2023-06-15 13:03:49.8953|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 13:03:49.9047|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 13:03:49.9047|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 13:03:50.3601|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (36ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 13:03:50.4050|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 13:03:50.4222|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__p_0='?' (Size = 4000), @__p_1='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i]
WHERE [i].[UsernameEmail] = @__p_0 AND [i].[LunchGroupName] = @__p_1 
2023-06-15 13:03:50.5827|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000), @p4='?' (DbType = Int32), @p5='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [InvitesLG] SET [LunchGroupName] = @p0, [Status] = @p1, [UsernameEmail] = @p2
OUTPUT 1
WHERE [InviteID] = @p3;
INSERT INTO [LunchGroupUser] ([LunchGroupsGroupId], [UsersUserId])
VALUES (@p4, @p5); 
2023-06-15 13:03:50.6510|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 13:03:50.6568|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 13:03:50.6568|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 13:03:50.6835|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[EventsEventId], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
FROM [Restaurants] AS [r] 
2023-06-15 13:03:50.6835|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-06-15 13:03:50.6835|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-06-15 13:03:50.6835|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-06-15 13:03:50.7509|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 13:03:50.7509|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 13:03:50.7509|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 13:03:50.7509|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[EventsEventId], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
FROM [Restaurants] AS [r] 
2023-06-15 13:03:50.7509|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-06-15 13:03:50.7509|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-06-15 13:03:50.7509|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-06-15 13:03:50.7713|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 13:03:50.7713|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 13:03:50.7713|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 13:03:50.7713|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[EventsEventId], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
FROM [Restaurants] AS [r] 
2023-06-15 13:03:50.7713|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-06-15 13:03:50.7713|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-06-15 13:03:50.7713|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-06-15 13:03:50.6195|ERROR|Microsoft.EntityFrameworkCore.Update|An exception occurred in the database while saving changes for context type 'Lunch_Tinder.Data.LunchTinderContext'.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Microsoft.Data.SqlClient.SqlException (0x80131904): Violation of PRIMARY KEY constraint 'PK_LunchGroupUser'. Cannot insert duplicate key in object 'dbo.LunchGroupUser'. The duplicate key value is (1, 1).
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreResults(Boolean& moreResults)
   at Microsoft.Data.SqlClient.SqlDataReader.TryNextResult(Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.NextResult()
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)
ClientConnectionId:4a1239bb-de7d-4586-934f-1e613f75ba73
Error Number:2627,State:1,Class:14
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(StateManager stateManager, Boolean acceptAllChangesOnSuccess)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess) {"Type":"Microsoft.EntityFrameworkCore.DbUpdateException", "Entries":[{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":[], "Events":[]}]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC", "UserType":"ADMIN", "LunchGroups":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":[]}], "Events":[]}], "Events":[{"EventId":1, "Name":"Locke Burger", "Description":"Great Burgers", "StartTime":"2023-06-14T13:56:54.4279214Z", "EndTime":"2023-06-14T14:01:54.4279215Z"}], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":3, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":4, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":5, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":6, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":7, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":8, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":9, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":10, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":11, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":12, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":13, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":14, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":15, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":16, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":17, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":18, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":19, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":20, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":21, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":22, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":23, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":24, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":26, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":27, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":28, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":29, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":30, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":31, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":32, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":33, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":34, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":35, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":36, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":37, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":38, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":39, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":40, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":41, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":42, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":43, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":44, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":45, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":46, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":47, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":48, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":49, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":50, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":51, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":52, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":53, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":54, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":55, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":56, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":57, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":58, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":59, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":60, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":61, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":62, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":63, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":64, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":65, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 1} Unchanged\r\n  EventId: 1 PK\r\n  Description: 'Great Burgers'\r\n  EndTime: '14/06/2023 14:01:54'\r\n  Name: 'Locke Burger'\r\n  StartTime: '14/06/2023 13:56:54'\r\n  RestaurantOptions: <null>\r\n  Votes: <null>\r\n  LunchGroups: <null>\r\nInviteToLunchGroup {InviteID: 1} Modified\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development' Modified\r\n  Status: 'Accepted' Modified\r\n  UsernameEmail: 'useremail@gmail.com' Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\n  InviteID: 3 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\n  InviteID: 4 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\n  InviteID: 5 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\n  InviteID: 6 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\n  InviteID: 7 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\n  InviteID: 8 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\n  InviteID: 9 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\n  InviteID: 10 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\n  InviteID: 11 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\n  InviteID: 12 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\n  InviteID: 13 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\n  InviteID: 14 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\n  InviteID: 15 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\n  InviteID: 16 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\n  InviteID: 17 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\n  InviteID: 18 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\n  InviteID: 19 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\n  InviteID: 20 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\n  InviteID: 21 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\n  InviteID: 22 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\n  InviteID: 23 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\n  InviteID: 24 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\n  InviteID: 26 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\n  InviteID: 27 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\n  InviteID: 28 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\n  InviteID: 29 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\n  InviteID: 30 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\n  InviteID: 31 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\n  InviteID: 32 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\n  InviteID: 33 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\n  InviteID: 34 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\n  InviteID: 35 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\n  InviteID: 36 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\n  InviteID: 37 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\n  InviteID: 38 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\n  InviteID: 39 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\n  InviteID: 40 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\n  InviteID: 41 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\n  InviteID: 42 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\n  InviteID: 43 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\n  InviteID: 44 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\n  InviteID: 45 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\n  InviteID: 46 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\n  InviteID: 47 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\n  InviteID: 48 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\n  InviteID: 49 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\n  InviteID: 50 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\n  InviteID: 51 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\n  InviteID: 52 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\n  InviteID: 53 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\n  InviteID: 54 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\n  InviteID: 55 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\n  InviteID: 56 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\n  InviteID: 57 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\n  InviteID: 58 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\n  InviteID: 59 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\n  InviteID: 60 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\n  InviteID: 61 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\n  InviteID: 62 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\n  InviteID: 63 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\n  InviteID: 64 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Accepted'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\n  InviteID: 65 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We codessss'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 1}]\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: <null>\r\n  LunchGroups: [{GroupId: 1}]\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: <null>\r\n  LunchGroups: []\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK\r\n", "ShortView":"Event {EventId: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 1} Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"87913a70-5413-435c-97df-94383b4b9006", "Lease":0}}, "Metadata":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "Indexes":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: LunchGroup.GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "DebugView":{"LongView":"GroupId PK", "ShortView":"GroupId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    Description (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    GroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroups\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    Description (string) Required\r\n    GroupName (string) Required\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: LunchGroup", "TargetEntityType":"EntityType: User", "Inverse":"SkipNavigation: User.LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"Users", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "Indexes":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: LunchGroup.GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "DebugView":{"LongView":"GroupId PK", "ShortView":"GroupId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    Description (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    GroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroups\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    Description (string) Required\r\n    GroupName (string) Required\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: LunchGroup", "TargetEntityType":"EntityType: User", "Inverse":"SkipNavigation: User.LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"Users", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC", "UserType":"ADMIN", "LunchGroups":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":1, "Name":"Locke Burger", "Description":"Great Burgers", "StartTime":"2023-06-14T13:56:54.4279214Z", "EndTime":"2023-06-14T14:01:54.4279215Z"}], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":3, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":4, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":5, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":6, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":7, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":8, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":9, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":10, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":11, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":12, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":13, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":14, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":15, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":16, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":17, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":18, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":19, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":20, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":21, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":22, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":23, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":24, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":26, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":27, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":28, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":29, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":30, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":31, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":32, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":33, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":34, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":35, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":36, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":37, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":38, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":39, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":40, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":41, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":42, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":43, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":44, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":45, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":46, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":47, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":48, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":49, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":50, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":51, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":52, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":53, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":54, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":55, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":56, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":57, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":58, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":59, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":60, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":61, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":62, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":63, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":64, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":65, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 1} Unchanged\r\n  EventId: 1 PK\r\n  Description: 'Great Burgers'\r\n  EndTime: '14/06/2023 14:01:54'\r\n  Name: 'Locke Burger'\r\n  StartTime: '14/06/2023 13:56:54'\r\n  RestaurantOptions: <null>\r\n  Votes: <null>\r\n  LunchGroups: <null>\r\nInviteToLunchGroup {InviteID: 1} Modified\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development' Modified\r\n  Status: 'Accepted' Modified\r\n  UsernameEmail: 'useremail@gmail.com' Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\n  InviteID: 3 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\n  InviteID: 4 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\n  InviteID: 5 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\n  InviteID: 6 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\n  InviteID: 7 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\n  InviteID: 8 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\n  InviteID: 9 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\n  InviteID: 10 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\n  InviteID: 11 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\n  InviteID: 12 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\n  InviteID: 13 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\n  InviteID: 14 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\n  InviteID: 15 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\n  InviteID: 16 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\n  InviteID: 17 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\n  InviteID: 18 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\n  InviteID: 19 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\n  InviteID: 20 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\n  InviteID: 21 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\n  InviteID: 22 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\n  InviteID: 23 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\n  InviteID: 24 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\n  InviteID: 26 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\n  InviteID: 27 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\n  InviteID: 28 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\n  InviteID: 29 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\n  InviteID: 30 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\n  InviteID: 31 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\n  InviteID: 32 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\n  InviteID: 33 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\n  InviteID: 34 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\n  InviteID: 35 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\n  InviteID: 36 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\n  InviteID: 37 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\n  InviteID: 38 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\n  InviteID: 39 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\n  InviteID: 40 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\n  InviteID: 41 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\n  InviteID: 42 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\n  InviteID: 43 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\n  InviteID: 44 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\n  InviteID: 45 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\n  InviteID: 46 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\n  InviteID: 47 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\n  InviteID: 48 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\n  InviteID: 49 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\n  InviteID: 50 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\n  InviteID: 51 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\n  InviteID: 52 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\n  InviteID: 53 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\n  InviteID: 54 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\n  InviteID: 55 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\n  InviteID: 56 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\n  InviteID: 57 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\n  InviteID: 58 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\n  InviteID: 59 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\n  InviteID: 60 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\n  InviteID: 61 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\n  InviteID: 62 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\n  InviteID: 63 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\n  InviteID: 64 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Accepted'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\n  InviteID: 65 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We codessss'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 1}]\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: <null>\r\n  LunchGroups: [{GroupId: 1}]\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: <null>\r\n  LunchGroups: []\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK\r\n", "ShortView":"Event {EventId: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 1} Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"87913a70-5413-435c-97df-94383b4b9006", "Lease":0}}, "Metadata":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: User.UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade"], "DebugView":{"LongView":"UserId PK", "ShortView":"UserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    EmailAddress (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Password (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserType (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: Users\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    EmailAddress (string) Required\r\n    Password (string) Required\r\n    UserName (string) Required\r\n    UserType (string) Required\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: User", "TargetEntityType":"EntityType: LunchGroup", "Inverse":"SkipNavigation: LunchGroup.Users (ICollection<User>) CollectionUser Inverse: LunchGroups", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroups", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"}, "IsReadOnly":false}], "Indexes":[{"Properties":[], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"UsersUserId", "ShortView":"UsersUserId"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: User.UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade"], "DebugView":{"LongView":"UserId PK", "ShortView":"UserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    EmailAddress (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Password (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserType (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: Users\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    EmailAddress (string) Required\r\n    Password (string) Required\r\n    UserName (string) Required\r\n    UserType (string) Required\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: User", "TargetEntityType":"EntityType: LunchGroup", "Inverse":"SkipNavigation: LunchGroup.Users (ICollection<User>) CollectionUser Inverse: LunchGroups", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroups", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"}, "IsReadOnly":false}], "Indexes":[{"Properties":[], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"UsersUserId", "ShortView":"UsersUserId"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC", "UserType":"ADMIN", "LunchGroups":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":1, "Name":"Locke Burger", "Description":"Great Burgers", "StartTime":"2023-06-14T13:56:54.4279214Z", "EndTime":"2023-06-14T14:01:54.4279215Z"}], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":3, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":4, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":5, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":6, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":7, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":8, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":9, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":10, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":11, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":12, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":13, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":14, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":15, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":16, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":17, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":18, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":19, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":20, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":21, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":22, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":23, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":24, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":26, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":27, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":28, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":29, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":30, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":31, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":32, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":33, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":34, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":35, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":36, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":37, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":38, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":39, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":40, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":41, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":42, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":43, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":44, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":45, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":46, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":47, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":48, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":49, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":50, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":51, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":52, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":53, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":54, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":55, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":56, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":57, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":58, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":59, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":60, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":61, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":62, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":63, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":64, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":65, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 1} Unchanged\r\n  EventId: 1 PK\r\n  Description: 'Great Burgers'\r\n  EndTime: '14/06/2023 14:01:54'\r\n  Name: 'Locke Burger'\r\n  StartTime: '14/06/2023 13:56:54'\r\n  RestaurantOptions: <null>\r\n  Votes: <null>\r\n  LunchGroups: <null>\r\nInviteToLunchGroup {InviteID: 1} Modified\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development' Modified\r\n  Status: 'Accepted' Modified\r\n  UsernameEmail: 'useremail@gmail.com' Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\n  InviteID: 3 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\n  InviteID: 4 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\n  InviteID: 5 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\n  InviteID: 6 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\n  InviteID: 7 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\n  InviteID: 8 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\n  InviteID: 9 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\n  InviteID: 10 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\n  InviteID: 11 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\n  InviteID: 12 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\n  InviteID: 13 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\n  InviteID: 14 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\n  InviteID: 15 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\n  InviteID: 16 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\n  InviteID: 17 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\n  InviteID: 18 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\n  InviteID: 19 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\n  InviteID: 20 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\n  InviteID: 21 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\n  InviteID: 22 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\n  InviteID: 23 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\n  InviteID: 24 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\n  InviteID: 26 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\n  InviteID: 27 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\n  InviteID: 28 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\n  InviteID: 29 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\n  InviteID: 30 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\n  InviteID: 31 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\n  InviteID: 32 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\n  InviteID: 33 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\n  InviteID: 34 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\n  InviteID: 35 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\n  InviteID: 36 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\n  InviteID: 37 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\n  InviteID: 38 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\n  InviteID: 39 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\n  InviteID: 40 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\n  InviteID: 41 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\n  InviteID: 42 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\n  InviteID: 43 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\n  InviteID: 44 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\n  InviteID: 45 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\n  InviteID: 46 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\n  InviteID: 47 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\n  InviteID: 48 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\n  InviteID: 49 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\n  InviteID: 50 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\n  InviteID: 51 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\n  InviteID: 52 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\n  InviteID: 53 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\n  InviteID: 54 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\n  InviteID: 55 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\n  InviteID: 56 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\n  InviteID: 57 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\n  InviteID: 58 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\n  InviteID: 59 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\n  InviteID: 60 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\n  InviteID: 61 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\n  InviteID: 62 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\n  InviteID: 63 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\n  InviteID: 64 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Accepted'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\n  InviteID: 65 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We codessss'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 1}]\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: <null>\r\n  LunchGroups: [{GroupId: 1}]\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: <null>\r\n  LunchGroups: []\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK\r\n", "ShortView":"Event {EventId: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 1} Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"87913a70-5413-435c-97df-94383b4b9006", "Lease":0}}, "Metadata":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "IsReadOnly":false}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "CurrentValue":1}], "IsKeySet":true}], "Message":"An error occurred while saving the entity changes. See the inner exception for details.", "Source":"Microsoft.EntityFrameworkCore.Relational", "HResult":-2146233088, "StackTrace":"   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(StateManager stateManager, Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)"}
2023-06-15 13:03:51.2205|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 1303.1716ms 
2023-06-15 13:03:51.2205|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[EventsEventId], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
FROM [Restaurants] AS [r] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[EventsEventId], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
FROM [Restaurants] AS [r] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-06-15 13:03:51.2205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-06-15 13:03:51.2351|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 13:03:51.2351|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 13:03:51.2351|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 13:03:51.2351|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [r].[RestaurantID], [r].[EventsEventId], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
FROM [Restaurants] AS [r] 
2023-06-15 13:03:51.2351|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [v].[VoteId], [v].[EventVoteID], [v].[RestaurantVoteID], [v].[UserVoteID]
FROM [Votes] AS [v] 
2023-06-15 13:03:51.2351|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteId], [i].[EmailAddress], [i].[Status], [i].[UserName]
FROM [Invites] AS [i] 
2023-06-15 13:03:51.2351|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i] 
2023-06-15 13:03:51.2205|ERROR|Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware|An unhandled exception has occurred while executing the request. {"Type":"Microsoft.EntityFrameworkCore.DbUpdateException", "Entries":[{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":[], "Events":[]}]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC", "UserType":"ADMIN", "LunchGroups":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":[]}], "Events":[]}], "Events":[{"EventId":1, "Name":"Locke Burger", "Description":"Great Burgers", "StartTime":"2023-06-14T13:56:54.4279214Z", "EndTime":"2023-06-14T14:01:54.4279215Z"}], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":3, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":4, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":5, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":6, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":7, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":8, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":9, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":10, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":11, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":12, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":13, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":14, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":15, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":16, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":17, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":18, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":19, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":20, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":21, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":22, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":23, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":24, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":26, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":27, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":28, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":29, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":30, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":31, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":32, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":33, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":34, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":35, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":36, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":37, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":38, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":39, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":40, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":41, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":42, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":43, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":44, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":45, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":46, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":47, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":48, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":49, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":50, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":51, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":52, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":53, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":54, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":55, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":56, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":57, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":58, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":59, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":60, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":61, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":62, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":63, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":64, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":65, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 1} Unchanged\r\n  EventId: 1 PK\r\n  Description: 'Great Burgers'\r\n  EndTime: '14/06/2023 14:01:54'\r\n  Name: 'Locke Burger'\r\n  StartTime: '14/06/2023 13:56:54'\r\n  RestaurantOptions: <null>\r\n  Votes: <null>\r\n  LunchGroups: <null>\r\nInviteToLunchGroup {InviteID: 1} Modified\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development' Modified\r\n  Status: 'Accepted' Modified\r\n  UsernameEmail: 'useremail@gmail.com' Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\n  InviteID: 3 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\n  InviteID: 4 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\n  InviteID: 5 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\n  InviteID: 6 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\n  InviteID: 7 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\n  InviteID: 8 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\n  InviteID: 9 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\n  InviteID: 10 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\n  InviteID: 11 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\n  InviteID: 12 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\n  InviteID: 13 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\n  InviteID: 14 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\n  InviteID: 15 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\n  InviteID: 16 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\n  InviteID: 17 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\n  InviteID: 18 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\n  InviteID: 19 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\n  InviteID: 20 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\n  InviteID: 21 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\n  InviteID: 22 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\n  InviteID: 23 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\n  InviteID: 24 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\n  InviteID: 26 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\n  InviteID: 27 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\n  InviteID: 28 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\n  InviteID: 29 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\n  InviteID: 30 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\n  InviteID: 31 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\n  InviteID: 32 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\n  InviteID: 33 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\n  InviteID: 34 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\n  InviteID: 35 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\n  InviteID: 36 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\n  InviteID: 37 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\n  InviteID: 38 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\n  InviteID: 39 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\n  InviteID: 40 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\n  InviteID: 41 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\n  InviteID: 42 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\n  InviteID: 43 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\n  InviteID: 44 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\n  InviteID: 45 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\n  InviteID: 46 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\n  InviteID: 47 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\n  InviteID: 48 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\n  InviteID: 49 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\n  InviteID: 50 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\n  InviteID: 51 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\n  InviteID: 52 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\n  InviteID: 53 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\n  InviteID: 54 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\n  InviteID: 55 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\n  InviteID: 56 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\n  InviteID: 57 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\n  InviteID: 58 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\n  InviteID: 59 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\n  InviteID: 60 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\n  InviteID: 61 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\n  InviteID: 62 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\n  InviteID: 63 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\n  InviteID: 64 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Accepted'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\n  InviteID: 65 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We codessss'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 1}]\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: <null>\r\n  LunchGroups: [{GroupId: 1}]\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: <null>\r\n  LunchGroups: []\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK\r\n", "ShortView":"Event {EventId: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 1} Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"87913a70-5413-435c-97df-94383b4b9006", "Lease":0}}, "Metadata":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "Indexes":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: LunchGroup.GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "DebugView":{"LongView":"GroupId PK", "ShortView":"GroupId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    Description (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    GroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroups\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    Description (string) Required\r\n    GroupName (string) Required\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: LunchGroup", "TargetEntityType":"EntityType: User", "Inverse":"SkipNavigation: User.LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"Users", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "Indexes":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"UsersUserId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: LunchGroup.GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "DebugView":{"LongView":"GroupId PK", "ShortView":"GroupId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.LunchGroup", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.LunchGroup", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    Description (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    GroupName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroups\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroup\r\n  Properties: \r\n    GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    Description (string) Required\r\n    GroupName (string) Required\r\n  Skip navigations: \r\n    Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n    Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n  Keys: \r\n    GroupId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: LunchGroup", "TargetEntityType":"EntityType: User", "Inverse":"SkipNavigation: User.LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"Users", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC", "UserType":"ADMIN", "LunchGroups":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":1, "Name":"Locke Burger", "Description":"Great Burgers", "StartTime":"2023-06-14T13:56:54.4279214Z", "EndTime":"2023-06-14T14:01:54.4279215Z"}], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":3, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":4, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":5, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":6, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":7, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":8, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":9, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":10, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":11, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":12, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":13, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":14, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":15, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":16, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":17, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":18, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":19, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":20, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":21, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":22, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":23, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":24, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":26, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":27, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":28, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":29, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":30, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":31, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":32, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":33, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":34, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":35, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":36, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":37, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":38, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":39, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":40, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":41, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":42, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":43, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":44, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":45, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":46, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":47, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":48, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":49, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":50, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":51, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":52, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":53, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":54, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":55, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":56, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":57, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":58, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":59, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":60, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":61, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":62, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":63, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":64, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":65, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 1} Unchanged\r\n  EventId: 1 PK\r\n  Description: 'Great Burgers'\r\n  EndTime: '14/06/2023 14:01:54'\r\n  Name: 'Locke Burger'\r\n  StartTime: '14/06/2023 13:56:54'\r\n  RestaurantOptions: <null>\r\n  Votes: <null>\r\n  LunchGroups: <null>\r\nInviteToLunchGroup {InviteID: 1} Modified\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development' Modified\r\n  Status: 'Accepted' Modified\r\n  UsernameEmail: 'useremail@gmail.com' Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\n  InviteID: 3 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\n  InviteID: 4 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\n  InviteID: 5 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\n  InviteID: 6 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\n  InviteID: 7 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\n  InviteID: 8 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\n  InviteID: 9 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\n  InviteID: 10 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\n  InviteID: 11 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\n  InviteID: 12 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\n  InviteID: 13 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\n  InviteID: 14 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\n  InviteID: 15 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\n  InviteID: 16 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\n  InviteID: 17 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\n  InviteID: 18 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\n  InviteID: 19 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\n  InviteID: 20 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\n  InviteID: 21 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\n  InviteID: 22 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\n  InviteID: 23 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\n  InviteID: 24 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\n  InviteID: 26 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\n  InviteID: 27 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\n  InviteID: 28 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\n  InviteID: 29 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\n  InviteID: 30 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\n  InviteID: 31 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\n  InviteID: 32 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\n  InviteID: 33 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\n  InviteID: 34 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\n  InviteID: 35 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\n  InviteID: 36 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\n  InviteID: 37 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\n  InviteID: 38 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\n  InviteID: 39 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\n  InviteID: 40 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\n  InviteID: 41 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\n  InviteID: 42 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\n  InviteID: 43 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\n  InviteID: 44 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\n  InviteID: 45 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\n  InviteID: 46 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\n  InviteID: 47 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\n  InviteID: 48 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\n  InviteID: 49 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\n  InviteID: 50 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\n  InviteID: 51 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\n  InviteID: 52 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\n  InviteID: 53 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\n  InviteID: 54 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\n  InviteID: 55 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\n  InviteID: 56 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\n  InviteID: 57 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\n  InviteID: 58 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\n  InviteID: 59 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\n  InviteID: 60 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\n  InviteID: 61 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\n  InviteID: 62 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\n  InviteID: 63 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\n  InviteID: 64 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Accepted'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\n  InviteID: 65 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We codessss'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 1}]\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: <null>\r\n  LunchGroups: [{GroupId: 1}]\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: <null>\r\n  LunchGroups: []\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK\r\n", "ShortView":"Event {EventId: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 1} Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"87913a70-5413-435c-97df-94383b4b9006", "Lease":0}}, "Metadata":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: User.UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade"], "DebugView":{"LongView":"UserId PK", "ShortView":"UserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    EmailAddress (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Password (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserType (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: Users\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    EmailAddress (string) Required\r\n    Password (string) Required\r\n    UserName (string) Required\r\n    UserType (string) Required\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: User", "TargetEntityType":"EntityType: LunchGroup", "Inverse":"SkipNavigation: LunchGroup.Users (ICollection<User>) CollectionUser Inverse: LunchGroups", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroups", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"}, "IsReadOnly":false}], "Indexes":[{"Properties":[], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"UsersUserId", "ShortView":"UsersUserId"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrimaryKey":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Keys":[], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":[{"Properties":[{"DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "Keys":[], "ForeignKeys":[], "TypeMapping":"Microsoft.EntityFrameworkCore.Storage.IntTypeMapping", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroupsGroupId", "IsReadOnly":false}], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"LunchGroupsGroupId, UsersUserId PK", "ShortView":"LunchGroupsGroupId, UsersUserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}], "ForeignKeys":[{"Properties":[], "PrincipalKey":{"Properties":["Property: User.UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd"], "DeclaringEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ReferencingForeignKeys":["ForeignKey: Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade"], "DebugView":{"LongView":"UserId PK", "ShortView":"UserId PK"}, "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "PrincipalEntityType":{"Name":"Lunch_Tinder.Models.User", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"Lunch_Tinder.Models.User", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    EmailAddress (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Password (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserName (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UserType (string) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: Users\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: User\r\n  Properties: \r\n    UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    EmailAddress (string) Required\r\n    Password (string) Required\r\n    UserName (string) Required\r\n    UserType (string) Required\r\n  Navigations: \r\n    Vote (Vote) ToDependent Vote Inverse: User\r\n  Skip navigations: \r\n    LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n  Keys: \r\n    UserId PK"}, "IsReadOnly":false}, "ReferencingSkipNavigations":[{"DeclaringEntityType":"EntityType: User", "TargetEntityType":"EntityType: LunchGroup", "Inverse":"SkipNavigation: LunchGroup.Users (ICollection<User>) CollectionUser Inverse: LunchGroups", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "Name":"LunchGroups", "IsReadOnly":false}], "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade", "ShortView":"LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"}, "IsReadOnly":false}], "Indexes":[{"Properties":[], "DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "DebugView":{"LongView":"UsersUserId", "ShortView":"UsersUserId"}, "IsReadOnly":false}], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "KeyComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}, "ProviderValueComparer":{"Type":"System.Int32", "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "EqualsExpression":{"Type":"System.Func`3[System.Int32,System.Int32,System.Boolean]", "NodeType":"Lambda", "Parameters":["v1","v2"], "Body":{"Type":"System.Boolean", "NodeType":"Equal", "CanReduce":false, "Right":"v2", "Left":"v1", "IsLifted":false, "IsLiftedToNull":false}, "ReturnType":"System.Boolean", "TailCall":false, "CanReduce":false}, "HashCodeExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}, "SnapshotExpression":{"Type":"System.Func`2[System.Int32,System.Int32]", "NodeType":"Lambda", "Parameters":["v"], "Body":{"Type":"System.Int32", "NodeType":"Parameter", "Name":"v", "IsByRef":false, "CanReduce":false}, "ReturnType":"System.Int32", "TailCall":false, "CanReduce":false}}}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[{"UserId":1, "EmailAddress":"useremail@gmail.com", "UserName":"Test", "Password":"$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.", "UserType":"USER", "LunchGroups":["Lunch_Tinder.Models.LunchGroup"]},{"UserId":2, "EmailAddress":"adminemail@gmail.com", "UserName":"Test", "Password":"$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC", "UserType":"ADMIN", "LunchGroups":[]}], "LunchGroups":[{"GroupId":1, "GroupName":"Software Development", "Description":"We codessss", "Users":["Lunch_Tinder.Models.User"], "Events":[]}], "Events":[{"EventId":1, "Name":"Locke Burger", "Description":"Great Burgers", "StartTime":"2023-06-14T13:56:54.4279214Z", "EndTime":"2023-06-14T14:01:54.4279215Z"}], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[{"InviteID":1, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":2, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":3, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":4, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":5, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":6, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":7, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":8, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":9, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":10, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":11, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":12, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":13, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":14, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":15, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":16, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":17, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":18, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":19, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":20, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":21, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":22, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":23, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":24, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":26, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":27, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":28, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":29, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":30, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":31, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":32, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":33, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":34, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":35, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":36, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":37, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":38, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":39, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":40, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":41, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":42, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":43, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":44, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":45, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":46, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":47, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":48, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":49, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":50, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":51, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":52, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":53, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":54, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":55, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":56, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":57, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":58, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":59, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":60, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":61, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":62, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":63, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"},{"InviteID":64, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Accepted"},{"InviteID":65, "LunchGroupName":"Software Development", "UsernameEmail":"useremail@gmail.com", "Status":"Pending"}], "Database":{"AutoTransactionsEnabled":true, "AutoTransactionBehavior":"WhenNeeded", "AutoSavepointsEnabled":true, "ProviderName":"Microsoft.EntityFrameworkCore.SqlServer"}, "ChangeTracker":{"AutoDetectChangesEnabled":true, "LazyLoadingEnabled":true, "QueryTrackingBehavior":"TrackAll", "DeleteOrphansTiming":"Immediate", "CascadeDeleteTiming":"Immediate", "DebugView":{"LongView":"Event {EventId: 1} Unchanged\r\n  EventId: 1 PK\r\n  Description: 'Great Burgers'\r\n  EndTime: '14/06/2023 14:01:54'\r\n  Name: 'Locke Burger'\r\n  StartTime: '14/06/2023 13:56:54'\r\n  RestaurantOptions: <null>\r\n  Votes: <null>\r\n  LunchGroups: <null>\r\nInviteToLunchGroup {InviteID: 1} Modified\r\n  InviteID: 1 PK\r\n  LunchGroupName: 'Software Development' Modified\r\n  Status: 'Accepted' Modified\r\n  UsernameEmail: 'useremail@gmail.com' Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\n  InviteID: 2 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\n  InviteID: 3 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\n  InviteID: 4 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\n  InviteID: 5 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\n  InviteID: 6 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\n  InviteID: 7 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\n  InviteID: 8 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\n  InviteID: 9 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\n  InviteID: 10 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\n  InviteID: 11 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\n  InviteID: 12 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\n  InviteID: 13 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\n  InviteID: 14 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\n  InviteID: 15 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\n  InviteID: 16 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\n  InviteID: 17 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\n  InviteID: 18 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\n  InviteID: 19 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\n  InviteID: 20 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\n  InviteID: 21 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\n  InviteID: 22 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\n  InviteID: 23 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\n  InviteID: 24 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\n  InviteID: 26 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\n  InviteID: 27 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\n  InviteID: 28 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\n  InviteID: 29 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\n  InviteID: 30 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\n  InviteID: 31 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\n  InviteID: 32 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\n  InviteID: 33 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\n  InviteID: 34 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\n  InviteID: 35 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\n  InviteID: 36 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\n  InviteID: 37 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\n  InviteID: 38 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\n  InviteID: 39 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\n  InviteID: 40 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\n  InviteID: 41 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\n  InviteID: 42 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\n  InviteID: 43 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\n  InviteID: 44 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\n  InviteID: 45 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\n  InviteID: 46 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\n  InviteID: 47 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\n  InviteID: 48 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\n  InviteID: 49 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\n  InviteID: 50 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\n  InviteID: 51 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\n  InviteID: 52 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\n  InviteID: 53 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\n  InviteID: 54 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\n  InviteID: 55 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\n  InviteID: 56 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\n  InviteID: 57 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\n  InviteID: 58 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\n  InviteID: 59 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\n  InviteID: 60 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\n  InviteID: 61 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\n  InviteID: 62 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\n  InviteID: 63 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\n  InviteID: 64 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Accepted'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\n  InviteID: 65 PK\r\n  LunchGroupName: 'Software Development'\r\n  Status: 'Pending'\r\n  UsernameEmail: 'useremail@gmail.com'\r\nLunchGroup {GroupId: 1} Unchanged\r\n  GroupId: 1 PK\r\n  Description: 'We codessss'\r\n  GroupName: 'Software Development'\r\n  Events: []\r\n  Users: [{UserId: 1}]\r\nUser {UserId: 1} Unchanged\r\n  UserId: 1 PK\r\n  EmailAddress: 'useremail@gmail.com'\r\n  Password: '$2a$11$JCnfsLirY4zZj2s6zbpP5.YhyoU3xgzOSd6m/S6Sv4FJvUIK0HCN.'\r\n  UserName: 'Test'\r\n  UserType: 'USER'\r\n  Vote: <null>\r\n  LunchGroups: [{GroupId: 1}]\r\nUser {UserId: 2} Unchanged\r\n  UserId: 2 PK\r\n  EmailAddress: 'adminemail@gmail.com'\r\n  Password: '$2a$11$96cnvKoTj.81a5sTLuVqKO4cXOmAOWwciT8OnHOud5oVpFfA0iuFC'\r\n  UserName: 'Test'\r\n  UserType: 'ADMIN'\r\n  Vote: <null>\r\n  LunchGroups: []\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK\r\n", "ShortView":"Event {EventId: 1} Unchanged\r\nInviteToLunchGroup {InviteID: 1} Modified\r\nInviteToLunchGroup {InviteID: 2} Unchanged\r\nInviteToLunchGroup {InviteID: 3} Unchanged\r\nInviteToLunchGroup {InviteID: 4} Unchanged\r\nInviteToLunchGroup {InviteID: 5} Unchanged\r\nInviteToLunchGroup {InviteID: 6} Unchanged\r\nInviteToLunchGroup {InviteID: 7} Unchanged\r\nInviteToLunchGroup {InviteID: 8} Unchanged\r\nInviteToLunchGroup {InviteID: 9} Unchanged\r\nInviteToLunchGroup {InviteID: 10} Unchanged\r\nInviteToLunchGroup {InviteID: 11} Unchanged\r\nInviteToLunchGroup {InviteID: 12} Unchanged\r\nInviteToLunchGroup {InviteID: 13} Unchanged\r\nInviteToLunchGroup {InviteID: 14} Unchanged\r\nInviteToLunchGroup {InviteID: 15} Unchanged\r\nInviteToLunchGroup {InviteID: 16} Unchanged\r\nInviteToLunchGroup {InviteID: 17} Unchanged\r\nInviteToLunchGroup {InviteID: 18} Unchanged\r\nInviteToLunchGroup {InviteID: 19} Unchanged\r\nInviteToLunchGroup {InviteID: 20} Unchanged\r\nInviteToLunchGroup {InviteID: 21} Unchanged\r\nInviteToLunchGroup {InviteID: 22} Unchanged\r\nInviteToLunchGroup {InviteID: 23} Unchanged\r\nInviteToLunchGroup {InviteID: 24} Unchanged\r\nInviteToLunchGroup {InviteID: 26} Unchanged\r\nInviteToLunchGroup {InviteID: 27} Unchanged\r\nInviteToLunchGroup {InviteID: 28} Unchanged\r\nInviteToLunchGroup {InviteID: 29} Unchanged\r\nInviteToLunchGroup {InviteID: 30} Unchanged\r\nInviteToLunchGroup {InviteID: 31} Unchanged\r\nInviteToLunchGroup {InviteID: 32} Unchanged\r\nInviteToLunchGroup {InviteID: 33} Unchanged\r\nInviteToLunchGroup {InviteID: 34} Unchanged\r\nInviteToLunchGroup {InviteID: 35} Unchanged\r\nInviteToLunchGroup {InviteID: 36} Unchanged\r\nInviteToLunchGroup {InviteID: 37} Unchanged\r\nInviteToLunchGroup {InviteID: 38} Unchanged\r\nInviteToLunchGroup {InviteID: 39} Unchanged\r\nInviteToLunchGroup {InviteID: 40} Unchanged\r\nInviteToLunchGroup {InviteID: 41} Unchanged\r\nInviteToLunchGroup {InviteID: 42} Unchanged\r\nInviteToLunchGroup {InviteID: 43} Unchanged\r\nInviteToLunchGroup {InviteID: 44} Unchanged\r\nInviteToLunchGroup {InviteID: 45} Unchanged\r\nInviteToLunchGroup {InviteID: 46} Unchanged\r\nInviteToLunchGroup {InviteID: 47} Unchanged\r\nInviteToLunchGroup {InviteID: 48} Unchanged\r\nInviteToLunchGroup {InviteID: 49} Unchanged\r\nInviteToLunchGroup {InviteID: 50} Unchanged\r\nInviteToLunchGroup {InviteID: 51} Unchanged\r\nInviteToLunchGroup {InviteID: 52} Unchanged\r\nInviteToLunchGroup {InviteID: 53} Unchanged\r\nInviteToLunchGroup {InviteID: 54} Unchanged\r\nInviteToLunchGroup {InviteID: 55} Unchanged\r\nInviteToLunchGroup {InviteID: 56} Unchanged\r\nInviteToLunchGroup {InviteID: 57} Unchanged\r\nInviteToLunchGroup {InviteID: 58} Unchanged\r\nInviteToLunchGroup {InviteID: 59} Unchanged\r\nInviteToLunchGroup {InviteID: 60} Unchanged\r\nInviteToLunchGroup {InviteID: 61} Unchanged\r\nInviteToLunchGroup {InviteID: 62} Unchanged\r\nInviteToLunchGroup {InviteID: 63} Unchanged\r\nInviteToLunchGroup {InviteID: 64} Unchanged\r\nInviteToLunchGroup {InviteID: 65} Unchanged\r\nLunchGroup {GroupId: 1} Unchanged\r\nUser {UserId: 1} Unchanged\r\nUser {UserId: 2} Unchanged\r\nLunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}\r\n"}}, "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ContextId":{"InstanceId":"87913a70-5413-435c-97df-94383b4b9006", "Lease":0}}, "Metadata":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Members":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}},{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "OriginalValue":1, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}, "CurrentValue":1, "EntityEntry":{"Entity":{"LunchGroupsGroupId":1,"UsersUserId":1}, "State":"Added", "Context":{"Users":[], "LunchGroups":[], "Events":[], "Restaurants":[], "Votes":[], "Invites":[], "InvitesLG":[], "Database":"Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade", "ChangeTracker":"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ContextId":"87913a70-5413-435c-97df-94383b4b9006:0"}, "Metadata":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "Members":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "Navigations":[], "Properties":["Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry","Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry"], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "OriginalValues":{"Properties":[], "EntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>"}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "References":[], "Collections":[], "IsKeySet":true, "CurrentValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "OriginalValues":{"Properties":[{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw"}, "Name":"LunchGroupsGroupId", "IsReadOnly":false},{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":"Microsoft.EntityFrameworkCore.Metadata.RuntimeModel", "ConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "ServiceOnlyConstructorBinding":"Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IsReadOnly":false}, "PrimaryKey":{"Properties":[], "DeclaringEntityType":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>", "DebugView":"Microsoft.EntityFrameworkCore.Infrastructure.DebugView", "IdentityMapFactory":"System.Func`2[System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap]", "IsReadOnly":false}, "Keys":["Key: LunchGroupUser (Dictionary<string, object>).LunchGroupsGroupId, LunchGroupUser (Dictionary<string, object>).UsersUserId PK"], "ForeignKeys":["ForeignKey: LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade"], "Indexes":["Index: LunchGroupUser (Dictionary<string, object>).UsersUserId"], "TypeMapping":{"StoreTypePostfix":"None", "StoreType":"int", "StoreTypeNameBase":"int", "DbType":"Int32", "IsUnicode":false, "IsFixedLength":false, "ClrType":"System.Int32", "Comparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "KeyComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]", "ProviderValueComparer":"Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer+DefaultValueComparer`1[System.Int32]"}, "DebugView":{"LongView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Annotations: \r\n    SqlServer:ValueGenerationStrategy: None", "ShortView":"UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw"}, "Name":"UsersUserId", "IsReadOnly":false}], "EntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}}, "DebugView":{"LongView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added\r\n  LunchGroupsGroupId: 1 PK FK\r\n  UsersUserId: 1 PK FK", "ShortView":"LunchGroupUser (Dictionary<string, object>) {LunchGroupsGroupId: 1, UsersUserId: 1} Added FK {LunchGroupsGroupId: 1} FK {UsersUserId: 1}"}}}], "Navigations":[], "Properties":[{"IsModified":false, "IsTemporary":false, "Metadata":{"DeclaringEntityType":{"Name":"LunchGroupUser", "Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: EventLunchGroup\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroupUser\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      EndTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      StartTime (DateTime) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Events\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      LunchGroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UsernameEmail (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteID PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: InvitesLG\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Status (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      InviteId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Invites\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Description (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: LunchGroups\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantDescription (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Restaurants\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EmailAddress (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Password (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserName (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserType (string) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Users\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      EventVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      RestaurantVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      UserVoteID (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Votes\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 7.0.5\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn", "ShortView":"Model: \r\n  EntityType: EventLunchGroup (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      EventsEventId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      EventsEventId, LunchGroupsGroupId PK\r\n    Foreign keys: \r\n      EventLunchGroup (Dictionary<string, object>) {'EventsEventId'} -> Event {'EventId'} Cascade\r\n      EventLunchGroup (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    Indexes: \r\n      LunchGroupsGroupId\r\n  EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n    Properties: \r\n      LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n    Keys: \r\n      LunchGroupsGroupId, UsersUserId PK\r\n    Foreign keys: \r\n      LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n      LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n    Indexes: \r\n      UsersUserId\r\n  EntityType: Event\r\n    Properties: \r\n      EventId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      EndTime (DateTime) Required\r\n      Name (string) Required\r\n      StartTime (DateTime) Required\r\n    Navigations: \r\n      RestaurantOptions (ICollection<Restaurant>) Collection ToDependent Restaurant Inverse: Events\r\n      Votes (ICollection<Vote>) Collection ToDependent Vote Inverse: Event\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Events\r\n    Keys: \r\n      EventId PK\r\n  EntityType: InviteToLunchGroup\r\n    Properties: \r\n      InviteID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      LunchGroupName (string) Required\r\n      Status (string) Required\r\n      UsernameEmail (string) Required\r\n    Keys: \r\n      InviteID PK\r\n  EntityType: Invites\r\n    Properties: \r\n      InviteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Status (string)\r\n      UserName (string) Required\r\n    Keys: \r\n      InviteId PK\r\n  EntityType: LunchGroup\r\n    Properties: \r\n      GroupId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Description (string) Required\r\n      GroupName (string) Required\r\n    Skip navigations: \r\n      Events (ICollection<Event>) CollectionEvent Inverse: LunchGroups\r\n      Users (ICollection<User>) CollectionUser Inverse: LunchGroups\r\n    Keys: \r\n      GroupId PK\r\n  EntityType: Restaurant\r\n    Properties: \r\n      RestaurantID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventsEventId (no field, int?) Shadow FK Index\r\n      RestaurantDescription (string) Required\r\n      RestaurantName (string) Required\r\n      RestaurantsRestaurantID (no field, int?) Shadow FK Index\r\n    Navigations: \r\n      Events (Event) ToPrincipal Event Inverse: RestaurantOptions\r\n      Restaurants (Restaurant) ToPrincipal Restaurant\r\n    Keys: \r\n      RestaurantID PK\r\n    Foreign keys: \r\n      Restaurant {'EventsEventId'} -> Event {'EventId'} ToDependent: RestaurantOptions ToPrincipal: Events ClientSetNull\r\n      Restaurant {'RestaurantsRestaurantID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurants ClientSetNull\r\n    Indexes: \r\n      EventsEventId\r\n      RestaurantsRestaurantID\r\n  EntityType: User\r\n    Properties: \r\n      UserId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EmailAddress (string) Required\r\n      Password (string) Required\r\n      UserName (string) Required\r\n      UserType (string) Required\r\n    Navigations: \r\n      Vote (Vote) ToDependent Vote Inverse: User\r\n    Skip navigations: \r\n      LunchGroups (ICollection<LunchGroup>) CollectionLunchGroup Inverse: Users\r\n    Keys: \r\n      UserId PK\r\n  EntityType: Vote\r\n    Properties: \r\n      VoteId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      EventVoteID (int) Required FK Index\r\n      RestaurantVoteID (int) Required FK Index\r\n      UserVoteID (int) Required FK Index\r\n    Navigations: \r\n      Event (Event) ToPrincipal Event Inverse: Votes\r\n      Restaurant (Restaurant) ToPrincipal Restaurant\r\n      User (User) ToPrincipal User Inverse: Vote\r\n    Keys: \r\n      VoteId PK\r\n    Foreign keys: \r\n      Vote {'EventVoteID'} -> Event {'EventId'} ToDependent: Votes ToPrincipal: Event Cascade\r\n      Vote {'RestaurantVoteID'} -> Restaurant {'RestaurantID'} ToPrincipal: Restaurant Cascade\r\n      Vote {'UserVoteID'} -> User {'UserId'} Unique ToDependent: Vote ToPrincipal: User Cascade\r\n    Indexes: \r\n      EventVoteID\r\n      RestaurantVoteID\r\n      UserVoteID Unique"}, "IsReadOnly":false}, "ConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()", "RuntimeType":"System.Collections.Generic.Dictionary`2[System.String,System.Object]", "ParameterBindings":[]}, "DebugView":{"LongView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: LunchGroupUser\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ", "ShortView":"EntityType: LunchGroupUser (Dictionary<string, object>) CLR Type: Dictionary<string, object>\r\n  Properties: \r\n    LunchGroupsGroupId (no field, int) Indexer Required PK FK AfterSave:Throw\r\n    UsersUserId (no field, int) Indexer Required PK FK Index AfterSave:Throw\r\n  Keys: \r\n    LunchGroupsGroupId, UsersUserId PK\r\n  Foreign keys: \r\n    LunchGroupUser (Dictionary<string, object>) {'LunchGroupsGroupId'} -> LunchGroup {'GroupId'} Cascade\r\n    LunchGroupUser (Dictionary<string, object>) {'UsersUserId'} -> User {'UserId'} Cascade\r\n  Indexes: \r\n    UsersUserId"}, "IsReadOnly":false}, "Name":"LunchGroupsGroupId", "IsReadOnly":false}, "OriginalValue":1, "CurrentValue":1}], "IsKeySet":true}], "Message":"An error occurred while saving the entity changes. See the inner exception for details.", "Source":"Microsoft.EntityFrameworkCore.Relational", "HResult":-2146233088, "StackTrace":"   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(StateManager stateManager, Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite(String email, String lunchgroup) in C:\\Users\\ewalsh\\source\\repos\\Lunch Tinder\\Lunch Tinder\\Lunch Tinder\\Controllers\\UserController.cs:line 394\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|25_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)"}
2023-06-15 13:03:51.2924|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 13:03:51.2924|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 13:03:51.2929|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3616ms 
2023-06-15 13:03:51.2929|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - - 500 - text/html;+charset=utf-8 1401.5434ms 
2023-06-15 13:03:51.2929|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.7307ms 
2023-06-15 13:05:00.7530|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 13:05:02.6314|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 13:05:02.6734|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 13:05:02.6734|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 13:05:02.6734|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 13:05:02.6981|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 13:05:02.7180|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 13:05:02.8886|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 13:05:02.8886|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 13:05:02.8886|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 13:05:02.8886|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 13:05:02.8886|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 13:05:03.5019|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 13:05:03.5970|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 13:05:03.6080|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 13:05:03.6080|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 13:05:03.7834|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 166.1877ms. 
2023-06-15 13:05:03.7834|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 180.2969ms 
2023-06-15 13:05:03.7834|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 13:05:03.8252|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 13:05:03.8252|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 3.7789ms 
2023-06-15 13:05:03.8252|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 331.2718ms 
2023-06-15 13:05:03.8396|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 13:05:03.8396|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.0135ms 
2023-06-15 13:05:11.1823|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 13:05:11.1864|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 13:05:11.1990|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 13:05:11.6414|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (36ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 13:05:11.6855|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 13:05:11.7033|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__p_0='?' (Size = 4000), @__p_1='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i]
WHERE [i].[UsernameEmail] = @__p_0 AND [i].[LunchGroupName] = @__p_1 
2023-06-15 13:06:55.0346|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 13:06:56.9110|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 13:06:56.9525|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 13:06:56.9525|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 13:06:56.9525|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 13:06:56.9782|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 13:06:56.9967|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 13:06:57.1711|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 13:06:57.1711|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 13:06:57.1711|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 13:06:57.1711|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 13:06:57.1711|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 13:06:57.7103|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 13:06:57.7944|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 13:06:57.7944|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 13:06:57.8159|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 13:06:57.9755|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 160.9278ms. 
2023-06-15 13:06:57.9819|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 176.1721ms 
2023-06-15 13:06:57.9819|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 13:06:58.0227|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 13:06:58.0227|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 317.0891ms 
2023-06-15 13:06:58.0227|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 4.1254ms 
2023-06-15 13:06:58.0351|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 13:06:58.0498|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 14.7960ms 
2023-06-15 13:07:04.9619|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 13:07:04.9713|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 13:07:04.9837|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 13:07:05.4176|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (36ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 13:07:05.4603|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 13:07:05.4778|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__p_0='?' (Size = 4000), @__p_1='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i]
WHERE [i].[UsernameEmail] = @__p_0 AND [i].[LunchGroupName] = @__p_1 
2023-06-15 13:07:11.1552|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__lunchgroup_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__lunchgroup_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-06-15 13:07:21.9670|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [InvitesLG] SET [LunchGroupName] = @p0, [Status] = @p1, [UsernameEmail] = @p2
OUTPUT 1
WHERE [InviteID] = @p3; 
2023-06-15 13:07:23.7272|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 13:07:24.6083|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/ViewLunchGroup?groupName=Software%20Development. 
2023-06-15 13:07:24.6083|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 19624.6343ms 
2023-06-15 13:07:24.6083|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 13:07:24.6083|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - 
2023-06-15 13:07:24.6083|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - - 302 0 - 19656.2599ms 
2023-06-15 13:07:24.6214|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 13:07:24.6214|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(System.String) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 13:07:24.6714|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 13:07:24.6939|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 13:07:24.7038|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t0].[RestaurantID], [t0].[EventsEventId0], [t0].[RestaurantDescription], [t0].[RestaurantName], [t0].[RestaurantsRestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime], [r].[RestaurantID], [r].[EventsEventId] AS [EventsEventId0], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
    LEFT JOIN [Restaurants] AS [r] ON [e0].[EventId] = [r].[EventsEventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[RestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 13:07:24.7038|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml. 
2023-06-15 13:07:24.7366|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml executed in 28.2598ms. 
2023-06-15 13:07:24.7366|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder) in 114.5377ms 
2023-06-15 13:07:24.7366|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 13:07:24.7366|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 127.7721ms 
2023-06-15 13:07:24.7501|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - 
2023-06-15 13:07:24.7501|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/ViewLunchGroupDetailsLGU.css was not modified 
2023-06-15 13:07:24.7501|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - - 304 - text/css 7.5881ms 
2023-06-15 13:07:24.7501|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - 
2023-06-15 13:07:24.7613|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 13:07:24.7613|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - - 304 - application/javascript 0.5643ms 
2023-06-15 13:07:24.7613|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 13:07:24.7613|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2495ms 
2023-06-15 13:07:24.7613|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 13:07:24.7613|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 5.5818ms 
2023-06-15 14:23:31.6204|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 14:23:34.5288|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (29ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 14:23:34.5701|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 14:23:34.5701|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 14:23:34.5701|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 14:23:34.5988|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 14:23:34.6166|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 14:23:34.8087|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 14:23:34.8087|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 14:23:34.8087|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 14:23:34.8087|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 14:23:34.8087|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 14:23:35.4647|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 14:23:35.5622|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 14:23:35.5779|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 14:23:35.5951|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Login. 
2023-06-15 14:23:35.7741|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Login executed in 180.7931ms. 
2023-06-15 14:23:35.7741|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 201.0203ms 
2023-06-15 14:23:35.7741|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 14:23:35.8239|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 14:23:35.8239|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 5.6520ms 
2023-06-15 14:23:35.8239|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 200 - text/html;+charset=utf-8 368.8157ms 
2023-06-15 14:23:35.8405|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 14:23:35.8548|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 14.2530ms 
2023-06-15 14:23:42.2775|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 
2023-06-15 14:23:42.2775|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 14:23:42.2941|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(Lunch_Tinder.ViewModels.VMLogin) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 14:23:42.5819|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 14:23:42.7565|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 14:23:42.8941|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 14:23:42.8941|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 14:23:42.8941|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 601.1409ms 
2023-06-15 14:23:42.8941|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 14:23:42.8993|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 14:23:42.8993|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/ application/x-www-form-urlencoded 248 - 302 0 - 625.7840ms 
2023-06-15 14:23:42.8993|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 14:23:42.8993|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 14:23:42.9478|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 14:23:42.9667|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 14:23:42.9763|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 14:23:42.9763|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 14:23:43.0008|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 24.0592ms. 
2023-06-15 14:23:43.0008|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 95.1837ms 
2023-06-15 14:23:43.0008|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 14:23:43.0008|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 102.8303ms 
2023-06-15 14:23:43.0146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 14:23:43.0146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.5397ms 
2023-06-15 14:23:43.0243|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 14:23:43.0243|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.0780ms 
2023-06-15 14:23:44.1649|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 14:23:44.1649|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 14:23:44.1649|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 14:23:44.1649|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 14:23:44.4598|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 14:23:44.5211|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (42ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 14:23:44.5496|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 14:23:44.5829|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 33.6015ms. 
2023-06-15 14:23:44.5829|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 414.007ms 
2023-06-15 14:23:44.5829|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 14:23:44.5829|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 419.9646ms 
2023-06-15 14:23:44.5829|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 14:23:44.5829|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - 
2023-06-15 14:23:44.5829|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2826ms 
2023-06-15 14:23:44.5829|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - 
2023-06-15 14:23:44.5994|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 14:23:44.5994|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/LunchGroupDetails.css was not modified 
2023-06-15 14:23:44.5994|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /js/site.js was not modified 
2023-06-15 14:23:44.5994|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/LunchGroupDetails.css?v=UPDKe_lCwrXS3WNKWBSjnblAUxWdOlqyWcjYR5-iV1g - - - 304 - text/css 8.0564ms 
2023-06-15 14:23:44.5994|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/js/site.js?v=BMqP4__V9Xba8ijPLlwZH-4VGzxLzdJcjhvfuwQHyf8 - - - 304 - application/javascript 7.4411ms 
2023-06-15 14:23:44.5994|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.4501ms 
2023-06-15 14:23:49.0651|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 334 
2023-06-15 14:23:49.0651|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 14:23:49.0736|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 14:23:49.0889|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__UserEmail_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[EmailAddress]
FROM [Users] AS [u]
WHERE [u].[UserName] = @__UserEmail_0 
2023-06-15 14:23:49.1953|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 14:23:49.2540|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 14:23:51.1752|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 14:23:51.1802|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 5.0309ms. 
2023-06-15 14:23:51.1802|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 2106.6435ms 
2023-06-15 14:23:51.1802|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 14:23:51.1802|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 334 - 200 - text/html;+charset=utf-8 2116.7198ms 
2023-06-15 14:23:51.1802|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 14:23:51.1802|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 14:23:51.1802|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2638ms 
2023-06-15 14:23:51.1935|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.8158ms 
2023-06-15 14:31:18.0260|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 14:31:19.7777|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 14:31:19.8176|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 14:31:19.8176|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 14:31:19.8176|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 14:31:19.8417|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 14:31:19.8588|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 14:31:20.0243|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 14:31:20.0243|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 14:31:20.0243|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 14:31:20.0243|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 14:31:20.0243|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 14:31:20.8458|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 14:31:20.9415|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 14:31:20.9527|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 14:31:20.9761|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 14:31:20.9761|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 23.7782ms 
2023-06-15 14:31:20.9761|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 14:31:20.9986|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 14:31:20.9986|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 157.1416ms 
2023-06-15 14:31:20.9986|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 14:31:20.9986|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 14:31:21.2390|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 14:31:21.2877|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 14:31:21.2877|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 14:31:21.3171|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 14:31:21.4476|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 134.3633ms. 
2023-06-15 14:31:21.4476|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 448.8143ms 
2023-06-15 14:31:21.4476|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 14:31:21.4825|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 14:31:21.4825|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 484.1725ms 
2023-06-15 14:31:21.4825|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 3.9381ms 
2023-06-15 14:31:21.4917|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 14:31:21.5072|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.5480ms 
2023-06-15 14:32:31.0078|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\ewalsh\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 
2023-06-15 14:32:32.8126|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 14:32:32.8526|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 14:32:32.8526|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 
2023-06-15 14:32:32.8526|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]'); 
2023-06-15 14:32:32.8799|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId]; 
2023-06-15 14:32:32.8973|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date. 
2023-06-15 14:32:33.1132|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7215 
2023-06-15 14:32:33.1132|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5176 
2023-06-15 14:32:33.1147|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 
2023-06-15 14:32:33.1147|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 
2023-06-15 14:32:33.1147|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\ewalsh\source\repos\Lunch Tinder\Lunch Tinder\Lunch Tinder\ 
2023-06-15 14:32:33.8092|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/ - - 
2023-06-15 14:32:33.9031|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 14:32:33.9143|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "User"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.ActionResult Login() on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 14:32:33.9364|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /Admin/Index. 
2023-06-15 14:32:33.9364|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder) in 22.5075ms 
2023-06-15 14:32:33.9364|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.Login (Lunch Tinder)' 
2023-06-15 14:32:33.9598|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/Index - - 
2023-06-15 14:32:33.9598|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/ - - - 302 0 - 153.7516ms 
2023-06-15 14:32:33.9598|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 14:32:33.9598|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Index", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 14:32:34.2134|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [e].[EventId], [e].[Description], [e].[EndTime], [e].[Name], [e].[StartTime]
FROM [Events] AS [e] 
2023-06-15 14:32:34.2672|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 14:32:34.2811|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u] 
2023-06-15 14:32:34.2981|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/Admin/AdminHomePage.cshtml. 
2023-06-15 14:32:34.4288|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/Admin/AdminHomePage.cshtml executed in 135.8575ms. 
2023-06-15 14:32:34.4288|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder) in 463.9104ms 
2023-06-15 14:32:34.4288|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.Index (Lunch Tinder)' 
2023-06-15 14:32:34.4658|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 14:32:34.4658|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/Index - - - 200 - text/html;+charset=utf-8 506.2898ms 
2023-06-15 14:32:34.4658|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 6.5376ms 
2023-06-15 14:32:34.4769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 14:32:34.4921|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 15.1771ms 
2023-06-15 14:32:35.4504|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - 
2023-06-15 14:32:35.4504|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 14:32:35.4646|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DisplayGroups", controller = "Admin"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DisplayGroups(System.String) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 14:32:35.5171|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 14:32:35.7847|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 14:32:35.8419|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (39ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 14:32:35.8690|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 14:32:35.9139|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 45.4074ms. 
2023-06-15 14:32:35.9139|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder) in 449.27ms 
2023-06-15 14:32:35.9139|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.DisplayGroups (Lunch Tinder)' 
2023-06-15 14:32:35.9139|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/Admin/DisplayGroups?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 465.3775ms 
2023-06-15 14:32:35.9139|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 14:32:35.9139|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.2747ms 
2023-06-15 14:32:35.9305|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 14:32:35.9305|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 3.8993ms 
2023-06-15 14:32:43.3715|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 
2023-06-15 14:32:43.3715|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 14:32:43.3851|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "InviteToLunchGroup", controller = "Admin"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InviteToLunchGroup(Lunch_Tinder.ViewModels.VMInviteLG) on controller Lunch_Tinder.Controllers.AdminController (Lunch Tinder). 
2023-06-15 14:32:43.5203|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [InvitesLG] ([LunchGroupName], [Status], [UsernameEmail])
OUTPUT INSERTED.[InviteID]
VALUES (@p0, @p1, @p2); 
2023-06-15 14:32:43.5708|INFO|Lunch_Tinder.Services.MailService|Initiating method. 
2023-06-15 14:32:46.0209|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/User/LunchGroupDetails.cshtml. 
2023-06-15 14:32:46.0209|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/User/LunchGroupDetails.cshtml executed in 5.3911ms. 
2023-06-15 14:32:46.0209|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder) in 2641.1883ms 
2023-06-15 14:32:46.0209|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.AdminController.InviteToLunchGroup (Lunch Tinder)' 
2023-06-15 14:32:46.0209|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7215/Admin/InviteToLunchGroup application/x-www-form-urlencoded 351 - 200 - text/html;+charset=utf-8 2656.7576ms 
2023-06-15 14:32:46.0209|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 14:32:46.0359|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 14:32:46.0359|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.3221ms 
2023-06-15 14:32:46.0359|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 6.4754ms 
2023-06-15 14:32:52.4372|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - 
2023-06-15 14:32:52.4372|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 14:32:52.4445|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "AcceptLunchGroupInvite", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] AcceptLunchGroupInvite(System.String, System.String) on controller Lunch_Tinder.Controllers.UserController (Lunch Tinder). 
2023-06-15 14:32:52.4445|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
FROM [Users] AS [u]
WHERE [u].[EmailAddress] = @__p_0 
2023-06-15 14:32:52.4445|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l]
WHERE [l].[GroupName] = @__p_0 
2023-06-15 14:32:52.4640|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 4000), @__p_1='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [i].[InviteID], [i].[LunchGroupName], [i].[Status], [i].[UsernameEmail]
FROM [InvitesLG] AS [i]
WHERE [i].[UsernameEmail] = @__p_0 AND [i].[LunchGroupName] = @__p_1 
2023-06-15 14:32:52.4640|WARN|Microsoft.EntityFrameworkCore.Query|The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results. 
2023-06-15 14:32:52.4781|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[LunchGroupsGroupId], [t0].[UsersUserId], [t0].[UserId], [t0].[EmailAddress], [t0].[Password], [t0].[UserName], [t0].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
) AS [t]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[LunchGroupsGroupId], [t0].[UsersUserId] 
2023-06-15 14:32:52.5066|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (15ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [InvitesLG] SET [LunchGroupName] = @p0, [Status] = @p1, [UsernameEmail] = @p2
OUTPUT 1
WHERE [InviteID] = @p3; 
2023-06-15 14:32:52.5066|INFO|Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler|AuthenticationScheme: Cookies signed in. 
2023-06-15 14:32:52.5066|INFO|Microsoft.AspNetCore.Mvc.RedirectToActionResult|Executing RedirectResult, redirecting to /LGU/ViewLunchGroup?groupName=Software%20Development. 
2023-06-15 14:32:52.5066|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder) in 67.2462ms 
2023-06-15 14:32:52.5066|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.UserController.AcceptLunchGroupInvite (Lunch Tinder)' 
2023-06-15 14:32:52.5066|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/User/AcceptLunchGroupInvite?email=useremail%40gmail.com&lunchgroup=Software%20Development - - - 302 0 - 74.8334ms 
2023-06-15 14:32:52.5066|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - 
2023-06-15 14:32:52.5066|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 14:32:52.5066|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "ViewLunchGroup", controller = "LGU"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult ViewLunchGroup(System.String) on controller Lunch_Tinder.Controllers.LGUController (Lunch Tinder). 
2023-06-15 14:32:52.5289|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [l].[GroupId], [l].[Description], [l].[GroupName]
FROM [LunchGroups] AS [l] 
2023-06-15 14:32:52.5501|WARN|Microsoft.EntityFrameworkCore.Query|Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. 
2023-06-15 14:32:52.5581|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__group_GroupId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[GroupId], [t].[Description], [t].[GroupName], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[Description], [t0].[EndTime], [t0].[Name], [t0].[StartTime], [t0].[RestaurantID], [t0].[EventsEventId0], [t0].[RestaurantDescription], [t0].[RestaurantName], [t0].[RestaurantsRestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId], [t1].[UserId], [t1].[EmailAddress], [t1].[Password], [t1].[UserName], [t1].[UserType]
FROM (
    SELECT TOP(1) [l].[GroupId], [l].[Description], [l].[GroupName]
    FROM [LunchGroups] AS [l]
    WHERE [l].[GroupId] = @__group_GroupId_0
) AS [t]
LEFT JOIN (
    SELECT [e].[EventsEventId], [e].[LunchGroupsGroupId], [e0].[EventId], [e0].[Description], [e0].[EndTime], [e0].[Name], [e0].[StartTime], [r].[RestaurantID], [r].[EventsEventId] AS [EventsEventId0], [r].[RestaurantDescription], [r].[RestaurantName], [r].[RestaurantsRestaurantID]
    FROM [EventLunchGroup] AS [e]
    INNER JOIN [Events] AS [e0] ON [e].[EventsEventId] = [e0].[EventId]
    LEFT JOIN [Restaurants] AS [r] ON [e0].[EventId] = [r].[EventsEventId]
) AS [t0] ON [t].[GroupId] = [t0].[LunchGroupsGroupId]
LEFT JOIN (
    SELECT [l0].[LunchGroupsGroupId], [l0].[UsersUserId], [u].[UserId], [u].[EmailAddress], [u].[Password], [u].[UserName], [u].[UserType]
    FROM [LunchGroupUser] AS [l0]
    INNER JOIN [Users] AS [u] ON [l0].[UsersUserId] = [u].[UserId]
) AS [t1] ON [t].[GroupId] = [t1].[LunchGroupsGroupId]
ORDER BY [t].[GroupId], [t0].[EventsEventId], [t0].[LunchGroupsGroupId], [t0].[EventId], [t0].[RestaurantID], [t1].[LunchGroupsGroupId], [t1].[UsersUserId] 
2023-06-15 14:32:52.5581|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml. 
2023-06-15 14:32:52.5691|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view ~/Views/LunchGroupUser/ViewLunchGroupDetailsLGU.cshtml executed in 10.3763ms. 
2023-06-15 14:32:52.5691|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder) in 49.2913ms 
2023-06-15 14:32:52.5691|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Lunch_Tinder.Controllers.LGUController.ViewLunchGroup (Lunch Tinder)' 
2023-06-15 14:32:52.5691|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/LGU/ViewLunchGroup?groupName=Software%20Development - - - 200 - text/html;+charset=utf-8 57.6641ms 
2023-06-15 14:32:52.5838|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - 
2023-06-15 14:32:52.5838|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_framework/aspnetcore-browser-refresh.js - - - 200 11994 application/javascript;+charset=utf-8 0.1872ms 
2023-06-15 14:32:52.5838|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - 
2023-06-15 14:32:52.5838|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The file /css/ViewLunchGroupDetailsLGU.css was not modified 
2023-06-15 14:32:52.5838|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/css/ViewLunchGroupDetailsLGU.css?v=532QZmj5Ht3CYjcX5tqadU2sJWGsYOpD_oRZxnaWCSg - - - 304 - text/css 5.2311ms 
2023-06-15 14:32:52.5838|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7215/_vs/browserLink - - 
2023-06-15 14:32:52.5985|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7215/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 4.8530ms 
